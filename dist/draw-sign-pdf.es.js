import { ref, onMounted, onBeforeUnmount, createElementBlock, openBlock, createElementVNode, normalizeStyle, defineComponent, nextTick, computed, Fragment, toDisplayString, createCommentVNode, reactive, markRaw, resolveComponent, createVNode, normalizeClass, renderList, createBlock } from "vue";
import download from "downloadjs";
import { PDFDocument, LineCapStyle, rgb } from "pdf-lib";
const _sfc_main$4 = {
  props: {
    page: Object,
    zoomScale: Number,
    finishedRendering: Function
  },
  setup(L, { emit: c }) {
    const i = ref(null), t = ref(0), Z = ref(0), W = () => {
      i.value && i.value.clientWidth && t.value && c("measure", {
        scale: i.value.clientWidth / t.value
      });
    };
    return onMounted(async () => {
      const y = await L.page, h = i.value.getContext("2d"), p = y.getViewport({ scale: L.zoomScale || 1, rotation: 0 });
      t.value = p.width, Z.value = p.height, await y.render({
        canvasContext: h,
        viewport: p
      }).promise.then(function() {
        c("finishedRendering"), W();
      }), window.addEventListener("resize", W);
    }), onBeforeUnmount(() => {
      window.removeEventListener("resize", W);
    }), {
      canvas: i,
      width: t,
      height: Z
    };
  }
}, _export_sfc = (L, c) => {
  const i = L.__vccOpts || L;
  for (const [t, Z] of c)
    i[t] = Z;
  return i;
}, _hoisted_1$4 = ["width", "height"];
function _sfc_render$4(L, c, i, t, Z, W) {
  return openBlock(), createElementBlock("div", null, [
    createElementVNode("canvas", {
      ref: "canvas",
      id: "canvas",
      class: "max-w-full",
      style: normalizeStyle({ width: `${t.width}px` }),
      width: t.width,
      height: t.height
    }, null, 12, _hoisted_1$4)
  ]);
}
const PDFPage = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render$4], ["__scopeId", "data-v-fc4cca72"]]), _sfc_main$3 = defineComponent({
  props: {
    originWidth: { type: Number, required: !0 },
    originHeight: { type: Number, required: !0 },
    width: { type: Number, required: !0 },
    height: { type: Number, required: !0 },
    x: { type: Number, required: !0 },
    y: { type: Number, required: !0 },
    pageScale: { type: Number, default: 1 },
    path: { type: String, required: !0 },
    zoomScale: { type: Number, required: !0 }
  },
  emits: ["update"],
  setup(L, {}) {
    const c = ref(0), i = ref(0), t = ref(0), Z = ref(""), W = ref(""), y = ref(0), h = ref(0), p = ref(null), X = L.originWidth / L.originHeight;
    return onMounted(async () => {
      await nextTick(), p.value && p.value.setAttribute(
        "viewBox",
        `0 0 ${L.originWidth} ${L.originHeight}`
      );
    }), {
      dx: c,
      dy: i,
      dw: t,
      direction: Z,
      operation: W,
      startX: y,
      startY: h,
      svg: p,
      ratio: X
      // handlePanStart,
      // handlePanMove,
      // handlePanEnd,
    };
  }
}), _hoisted_1$3 = {
  ref: "svg",
  width: "100%",
  height: "100%"
}, _hoisted_2$3 = ["d"];
function _sfc_render$3(L, c, i, t, Z, W) {
  return openBlock(), createElementBlock("div", {
    style: normalizeStyle({
      width: `${(L.width + L.dw) * L.zoomScale}px`,
      height: `${(L.height + L.dw) * L.zoomScale}px`,
      transform: `translate(${(L.x + L.dx) * L.zoomScale}px, ${(L.y + L.dy) * L.zoomScale}px)`
    }),
    class: "absolute left-0 top-0 select-none"
  }, [
    c[0] || (c[0] = createElementVNode("div", { class: "absolute h-full w-full border border-dashed border-gray-400" }, [
      createElementVNode("div", {
        "data-direction": "left-top",
        class: "absolute left-0 top-0 h-4 w-4 -translate-x-1/2 -translate-y-1/2 transform cursor-nwse-resize rounded-full bg-green-400 md:scale-25"
      }),
      createElementVNode("div", {
        "data-direction": "right-bottom",
        class: "absolute bottom-0 right-0 h-4 w-4 translate-x-1/2 translate-y-1/2 transform cursor-nwse-resize rounded-full bg-green-400 md:scale-25"
      })
    ], -1)),
    (openBlock(), createElementBlock("svg", _hoisted_1$3, [
      createElementVNode("path", {
        "stroke-width": "5",
        "stroke-linejoin": "round",
        "stroke-linecap": "round",
        stroke: "black",
        fill: "none",
        d: L.path
      }, null, 8, _hoisted_2$3)
    ], 512))
  ], 4);
}
const DrawingSignature = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["render", _sfc_render$3], ["__scopeId", "data-v-a8d09abc"]]), _sfc_main$2 = defineComponent({
  name: "DialogBox",
  props: {
    translations: {
      type: Object,
      default: () => ({})
    },
    type: {
      type: String,
      default: "warning"
    }
  },
  emits: ["finish", "cancel"],
  setup(L, { emit: c }) {
    return {
      getTranslation: computed(() => {
        const W = L.translations;
        return L.type === "warning" ? {
          title: W.warningTitle,
          desc: W.warningDesc,
          close: W.warningClose
        } : {
          title: W.confirmBoxTitle,
          desc: W.confirmBoxDesc,
          close: W.confirmBoxClose,
          saveChanges: W.confirmBoxSaveChanges
        };
      }),
      closeModal: () => c("cancel"),
      finish: () => c("finish")
    };
  }
}), _hoisted_1$2 = { class: "confirm-modal relative top-40 mx-auto shadow-xl rounded-md bg-white max-w-md mt-40" }, _hoisted_2$2 = { class: "flex flex-col bg-white border shadow-sm rounded-xl pointer-events-auto" }, _hoisted_3$2 = { class: "flex justify-between items-center py-3 px-4 border-b" }, _hoisted_4$2 = { class: "font-bold text-gray-800" }, _hoisted_5$2 = { class: "sr-only" }, _hoisted_6$2 = { class: "p-4 overflow-y-auto" }, _hoisted_7$2 = { class: "mt-1 text-gray-800" }, _hoisted_8$2 = { class: "flex justify-end items-center gap-x-2 py-3 px-4 border-t" };
function _sfc_render$2(L, c, i, t, Z, W) {
  return openBlock(), createElementBlock(Fragment, null, [
    c[4] || (c[4] = createElementVNode("div", {
      id: "headlessui-dialog-overlay-16",
      "aria-hidden": "true",
      "data-headlessui-state": "open",
      class: "fixed inset-0 bg-gray-500 opacity-30"
    }, null, -1)),
    createElementVNode("div", _hoisted_1$2, [
      createElementVNode("div", _hoisted_2$2, [
        createElementVNode("div", _hoisted_3$2, [
          createElementVNode("h3", _hoisted_4$2, toDisplayString(L.getTranslation.title), 1),
          createElementVNode("button", {
            onClick: c[0] || (c[0] = (...y) => L.closeModal && L.closeModal(...y)),
            type: "button",
            class: "flex justify-center items-center size-7 text-sm font-semibold rounded-full border border-transparent text-gray-800 hover:bg-gray-100 disabled:opacity-50 disabled:pointer-events-none"
          }, [
            createElementVNode("span", _hoisted_5$2, toDisplayString(L.getTranslation.close), 1),
            c[3] || (c[3] = createElementVNode("svg", {
              class: "flex-shrink-0 size-4",
              xmlns: "http://www.w3.org/2000/svg",
              width: "24",
              height: "24",
              viewBox: "0 0 24 24",
              fill: "none",
              stroke: "currentColor",
              "stroke-width": "2",
              "stroke-linecap": "round",
              "stroke-linejoin": "round"
            }, [
              createElementVNode("path", { d: "M18 6 6 18" }),
              createElementVNode("path", { d: "m6 6 12 12" })
            ], -1))
          ])
        ]),
        createElementVNode("div", _hoisted_6$2, [
          createElementVNode("p", _hoisted_7$2, toDisplayString(L.getTranslation.desc), 1)
        ]),
        createElementVNode("div", _hoisted_8$2, [
          createElementVNode("button", {
            onClick: c[1] || (c[1] = (...y) => L.closeModal && L.closeModal(...y)),
            type: "button",
            "data-cy": "close-confirm",
            class: "py-2 px-3 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-gray-200 bg-white text-gray-800 shadow-sm hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none btn-negative"
          }, toDisplayString(L.getTranslation.close), 1),
          L.type === "confirm" ? (openBlock(), createElementBlock("button", {
            key: 0,
            onClick: c[2] || (c[2] = (...y) => L.finish && L.finish(...y)),
            type: "button",
            "data-cy": "confirm-save",
            class: "py-2 px-3 inline-flex items-center gap-x-2 text-sm font-semibold rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none ml-2 btn-positive"
          }, toDisplayString(L.getTranslation.saveChanges), 1)) : createCommentVNode("", !0)
        ])
      ])
    ])
  ], 64);
}
const DialogBox = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["render", _sfc_render$2], ["__scopeId", "data-v-a1ca1473"]]), _sfc_main$1 = defineComponent({
  name: "DrawingCanvas",
  props: {
    translations: {
      type: Object,
      default: () => ({})
    }
  },
  emits: ["finish", "cancel"],
  setup(L, { emit: c }) {
    const i = {
      drawLabel: "Draw the signature here",
      drawDone: "Done",
      drawCancel: "Cancel",
      additionalTextField: ""
    }, t = computed(() => ({
      ...i,
      ...L.translations
    })), Z = ref(null), W = ref([]), y = ref(""), h = reactive({
      drawing: !1,
      x: 0,
      y: 0,
      minX: 1 / 0,
      minY: 1 / 0,
      maxX: 0,
      maxY: 0
    }), p = (e) => {
      if (e.target !== e.currentTarget) {
        h.drawing = !1;
        return;
      }
      h.drawing = !0, h.x = e.x, h.y = e.y, h.minX = Math.min(h.minX, h.x), h.maxX = Math.max(h.maxX, h.x), h.minY = Math.min(h.minY, h.y), h.maxY = Math.max(h.maxY, h.y), W.value.push(["M", h.x, h.y]), y.value += `M${h.x},${h.y}`;
    }, X = (e) => {
      h.drawing && (h.x = e.x, h.y = e.y, h.minX = Math.min(h.minX, h.x), h.maxX = Math.max(h.maxX, h.x), h.minY = Math.min(h.minY, h.y), h.maxY = Math.max(h.maxY, h.y), y.value += `L${h.x},${h.y}`, W.value.push(["L", h.x, h.y]));
    }, M = () => {
      h.drawing = !1;
    }, x = () => {
      var r;
      if (!W.value.length) return;
      const e = -(h.minX - 10), m = -(h.minY - 10), d = h.maxX - h.minX + 20, b = h.maxY - h.minY + 20, N = W.value.reduce((j, D) => j + D[0] + (D[1] + e) + "," + (D[2] + m), ""), G = document.getElementById("signature-path-data");
      if (G) {
        G.style.display = "none", G.removeAttribute("viewBox"), (r = G.querySelector("path")) == null || r.setAttribute("d", N);
        const j = new XMLSerializer().serializeToString(G), D = btoa(j), f = new Image();
        f.src = "data:image/svg+xml;base64," + D, f.onload = () => {
          const P = document.createElement("canvas");
          P.style.display = "none", P.width = d, P.height = b;
          const B = P.getContext("2d");
          B == null || B.drawImage(f, 0, 0);
          let A = P.toDataURL("image/png").replace("data:image/png;base64,", "");
          P.remove(), G.innerHTML = "", W.value = [], c("finish", {
            originWidth: d,
            originHeight: b,
            path: N,
            signatureImageData: {
              data: A,
              type: "image/png"
            }
          });
        };
      }
    }, n = () => {
      W.value = [], c("cancel");
    }, V = (e) => {
      var m, d;
      h.x = e.clientX, h.y = e.clientY, p({
        x: h.x,
        y: h.y,
        target: e.target,
        currentTarget: Z.value
      }), (m = Z.value) == null || m.addEventListener("mousemove", S), (d = Z.value) == null || d.addEventListener("mouseup", o);
    }, S = (e) => {
      e.clientX - h.x, e.clientY - h.y, h.x = e.clientX, h.y = e.clientY, X({ x: h.x, y: h.y });
    }, o = (e) => {
      var m, d;
      h.x = e.clientX, h.y = e.clientY, M(), (m = Z.value) == null || m.removeEventListener("mousemove", S), (d = Z.value) == null || d.removeEventListener("mouseup", o);
    }, R = (e) => {
      var d, b;
      if (e.touches.length > 1) return;
      const m = e.touches[0];
      h.x = m.clientX, h.y = m.clientY, p({
        x: h.x,
        y: h.y,
        target: m.target,
        currentTarget: Z.value
      }), (d = Z.value) == null || d.addEventListener("touchmove", J), (b = Z.value) == null || b.addEventListener("touchend", u);
    }, J = (e) => {
      if (e.preventDefault(), e.touches.length > 1) return;
      const m = e.touches[0];
      m.clientX - h.x, m.clientY - h.y, h.x = m.clientX, h.y = m.clientY, X({ x: h.x, y: h.y });
    }, u = (e) => {
      var m, d;
      h.x = e.changedTouches[0].clientX, h.y = e.changedTouches[0].clientY, M(), (m = Z.value) == null || m.removeEventListener("touchmove", J), (d = Z.value) == null || d.removeEventListener("touchend", u);
    };
    return onMounted(() => {
      var e, m;
      (e = Z.value) == null || e.addEventListener("mousedown", V), (m = Z.value) == null || m.addEventListener("touchstart", R);
    }), onBeforeUnmount(() => {
      var e, m;
      (e = Z.value) == null || e.removeEventListener("mousedown", V), (m = Z.value) == null || m.removeEventListener(
        "touchstart",
        R
      );
    }), {
      getTranslation: t,
      signatureCanvas: Z,
      path: y,
      finish: x,
      cancel: n,
      handlePanStart: p,
      handlePanMove: X,
      handlePanEnd: M
    };
  }
}), _hoisted_1$1 = {
  style: { height: "210px" },
  class: "left-0 right-0 top-0 z-0 border-b border-gray-300 bg-white shadow-lg",
  "data-cy": "sign-area"
}, _hoisted_2$1 = { class: "absolute flex w-full flex-grow items-center justify-center" }, _hoisted_3$1 = { class: "text-black-600" }, _hoisted_4$1 = { class: "absolute bottom-0 right-0 mb-4 mx-4 flex" }, _hoisted_5$1 = { class: "flex w-full flex-grow items-center justify-center" }, _hoisted_6$1 = { class: "text-black-600" }, _hoisted_7$1 = {
  class: "pointer-events-none h-full w-full",
  id: "signature-path-data"
}, _hoisted_8$1 = ["d"];
function _sfc_render$1(L, c, i, t, Z, W) {
  return openBlock(), createElementBlock("div", _hoisted_1$1, [
    createElementVNode("div", {
      ref: "signatureCanvas",
      onPanstart: c[2] || (c[2] = (...y) => L.handlePanStart && L.handlePanStart(...y)),
      onPanmove: c[3] || (c[3] = (...y) => L.handlePanMove && L.handlePanMove(...y)),
      onPanend: c[4] || (c[4] = (...y) => L.handlePanEnd && L.handlePanEnd(...y)),
      class: "relative h-full w-full select-none"
    }, [
      createElementVNode("div", _hoisted_2$1, [
        createElementVNode("p", _hoisted_3$1, toDisplayString(L.getTranslation.drawLabel), 1)
      ]),
      createElementVNode("div", _hoisted_4$1, [
        createElementVNode("div", _hoisted_5$1, [
          createElementVNode("p", _hoisted_6$1, toDisplayString(L.getTranslation.additionalTextField), 1)
        ]),
        createElementVNode("button", {
          onClick: c[0] || (c[0] = (...y) => L.finish && L.finish(...y)),
          class: "mx-4 w-24 rounded bg-blue-600 px-4 py-1 font-bold text-white hover:bg-blue-700 btn-positive",
          "data-cy": "sign-done"
        }, toDisplayString(L.getTranslation.drawDone), 1),
        createElementVNode("button", {
          onClick: c[1] || (c[1] = (...y) => L.cancel && L.cancel(...y)),
          class: "w-24 rounded bg-red-500 px-4 py-1 font-bold text-white hover:bg-red-700 btn-negative",
          "data-cy": "sign-cancel"
        }, toDisplayString(L.getTranslation.drawCancel), 1)
      ]),
      (openBlock(), createElementBlock("svg", _hoisted_7$1, [
        createElementVNode("path", {
          "stroke-width": "5",
          "stroke-linejoin": "round",
          "stroke-linecap": "round",
          d: L.path,
          stroke: "black",
          fill: "none"
        }, null, 8, _hoisted_8$1)
      ]))
    ], 544)
  ]);
}
const DrawingCanvas = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render$1]]);
function render$1(L, c) {
  return openBlock(), createElementBlock("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    fill: "currentColor",
    "aria-hidden": "true",
    "data-slot": "icon"
  }, [
    createElementVNode("path", { d: "M8.75 6.25h-3.5a.75.75 0 0 0 0 1.5h3.5a.75.75 0 0 0 0-1.5Z" }),
    createElementVNode("path", {
      "fill-rule": "evenodd",
      d: "M7 12c1.11 0 2.136-.362 2.965-.974l2.755 2.754a.75.75 0 1 0 1.06-1.06l-2.754-2.755A5 5 0 1 0 7 12Zm0-1.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Z",
      "clip-rule": "evenodd"
    })
  ]);
}
function render(L, c) {
  return openBlock(), createElementBlock("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    fill: "currentColor",
    "aria-hidden": "true",
    "data-slot": "icon"
  }, [
    createElementVNode("path", { d: "M6.25 8.75v-1h-1a.75.75 0 0 1 0-1.5h1v-1a.75.75 0 0 1 1.5 0v1h1a.75.75 0 0 1 0 1.5h-1v1a.75.75 0 0 1-1.5 0Z" }),
    createElementVNode("path", {
      "fill-rule": "evenodd",
      d: "M7 12c1.11 0 2.136-.362 2.965-.974l2.755 2.754a.75.75 0 1 0 1.06-1.06l-2.754-2.755A5 5 0 1 0 7 12Zm0-1.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Z",
      "clip-rule": "evenodd"
    })
  ]);
}
var commonjsGlobal = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function getAugmentedNamespace(L) {
  if (L.__esModule) return L;
  var c = L.default;
  if (typeof c == "function") {
    var i = function t() {
      return this instanceof t ? Reflect.construct(c, arguments, this.constructor) : c.apply(this, arguments);
    };
    i.prototype = c.prototype;
  } else i = {};
  return Object.defineProperty(i, "__esModule", { value: !0 }), Object.keys(L).forEach(function(t) {
    var Z = Object.getOwnPropertyDescriptor(L, t);
    Object.defineProperty(i, t, Z.get ? Z : {
      enumerable: !0,
      get: function() {
        return L[t];
      }
    });
  }), i;
}
function commonjsRequire(L) {
  throw new Error('Could not dynamically require "' + L + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var pdf = { exports: {} }, dommatrix = { exports: {} };
/*!
* DOMMatrix v1.0.3 (https://thednp.github.io/dommatrix/)
* Copyright 2022 © thednp
* Licensed under MIT (https://github.com/thednp/DOMMatrix/blob/master/LICENSE)
*/
var hasRequiredDommatrix;
function requireDommatrix() {
  return hasRequiredDommatrix || (hasRequiredDommatrix = 1, function(L, c) {
    (function(i, t) {
      L.exports = t();
    })(commonjsGlobal, function() {
      function i(u) {
        var e = new S(), m = Array.from(u);
        if (!m.every(function(g) {
          return !Number.isNaN(g);
        }))
          throw TypeError('CSSMatrix: "' + u + '" must only have numbers.');
        if (m.length === 16) {
          var d = m[0], b = m[1], N = m[2], G = m[3], r = m[4], j = m[5], D = m[6], f = m[7], P = m[8], B = m[9], A = m[10], H = m[11], O = m[12], U = m[13], k = m[14], q = m[15];
          e.m11 = d, e.a = d, e.m21 = r, e.c = r, e.m31 = P, e.m41 = O, e.e = O, e.m12 = b, e.b = b, e.m22 = j, e.d = j, e.m32 = B, e.m42 = U, e.f = U, e.m13 = N, e.m23 = D, e.m33 = A, e.m43 = k, e.m14 = G, e.m24 = f, e.m34 = H, e.m44 = q;
        } else if (m.length === 6) {
          var al = m[0], Ml = m[1], wl = m[2], Q = m[3], T = m[4], w = m[5];
          e.m11 = al, e.a = al, e.m12 = Ml, e.b = Ml, e.m21 = wl, e.c = wl, e.m22 = Q, e.d = Q, e.m41 = T, e.e = T, e.m42 = w, e.f = w;
        } else
          throw new TypeError("CSSMatrix: expecting an Array of 6/16 values.");
        return e;
      }
      function t(u) {
        var e = Object.keys(new S());
        if (typeof u == "object" && e.every(function(m) {
          return m in u;
        }))
          return i(
            [
              u.m11,
              u.m12,
              u.m13,
              u.m14,
              u.m21,
              u.m22,
              u.m23,
              u.m24,
              u.m31,
              u.m32,
              u.m33,
              u.m34,
              u.m41,
              u.m42,
              u.m43,
              u.m44
            ]
          );
        throw TypeError('CSSMatrix: "' + JSON.stringify(u) + '" is not a DOMMatrix / CSSMatrix / JSON compatible object.');
      }
      function Z(u) {
        if (typeof u != "string")
          throw TypeError('CSSMatrix: "' + u + '" is not a string.');
        var e = String(u).replace(/\s/g, ""), m = new S(), d = 'CSSMatrix: invalid transform string "' + u + '"';
        return e.split(")").filter(function(b) {
          return b;
        }).forEach(function(b) {
          var N = b.split("("), G = N[0], r = N[1];
          if (!r)
            throw TypeError(d);
          var j = r.split(",").map(function(T) {
            return T.includes("rad") ? parseFloat(T) * (180 / Math.PI) : parseFloat(T);
          }), D = j[0], f = j[1], P = j[2], B = j[3], A = [D, f, P], H = [D, f, P, B];
          if (G === "perspective" && D && [f, P].every(function(T) {
            return T === void 0;
          }))
            m.m34 = -1 / D;
          else if (G.includes("matrix") && [6, 16].includes(j.length) && j.every(function(T) {
            return !Number.isNaN(+T);
          })) {
            var O = j.map(function(T) {
              return Math.abs(T) < 1e-6 ? 0 : T;
            });
            m = m.multiply(i(O));
          } else if (G === "translate3d" && A.every(function(T) {
            return !Number.isNaN(+T);
          }))
            m = m.translate(D, f, P);
          else if (G === "translate" && D && P === void 0)
            m = m.translate(D, f || 0, 0);
          else if (G === "rotate3d" && H.every(function(T) {
            return !Number.isNaN(+T);
          }) && B)
            m = m.rotateAxisAngle(D, f, P, B);
          else if (G === "rotate" && D && [f, P].every(function(T) {
            return T === void 0;
          }))
            m = m.rotate(0, 0, D);
          else if (G === "scale3d" && A.every(function(T) {
            return !Number.isNaN(+T);
          }) && A.some(function(T) {
            return T !== 1;
          }))
            m = m.scale(D, f, P);
          else if (G === "scale" && !Number.isNaN(D) && D !== 1 && P === void 0) {
            var U = Number.isNaN(+f), k = U ? D : f;
            m = m.scale(D, k, 1);
          } else if (G === "skew" && (D || !Number.isNaN(D) && f) && P === void 0)
            m = m.skew(D, f || 0);
          else if (/[XYZ]/.test(G) && D && [f, P].every(function(T) {
            return T === void 0;
          }) && ["translate", "rotate", "scale", "skew"].some(function(T) {
            return G.includes(T);
          }))
            if (["skewX", "skewY"].includes(G))
              m = m[G](D);
            else {
              var q = G.replace(/[XYZ]/, ""), al = G.replace(q, ""), Ml = ["X", "Y", "Z"].indexOf(al), wl = q === "scale" ? 1 : 0, Q = [
                Ml === 0 ? D : wl,
                Ml === 1 ? D : wl,
                Ml === 2 ? D : wl
              ];
              m = m[q].apply(m, Q);
            }
          else
            throw TypeError(d);
        }), m;
      }
      function W(u, e) {
        return e ? [u.a, u.b, u.c, u.d, u.e, u.f] : [
          u.m11,
          u.m12,
          u.m13,
          u.m14,
          u.m21,
          u.m22,
          u.m23,
          u.m24,
          u.m31,
          u.m32,
          u.m33,
          u.m34,
          u.m41,
          u.m42,
          u.m43,
          u.m44
        ];
      }
      function y(u, e, m) {
        var d = new S();
        return d.m41 = u, d.e = u, d.m42 = e, d.f = e, d.m43 = m, d;
      }
      function h(u, e, m) {
        var d = new S(), b = Math.PI / 180, N = u * b, G = e * b, r = m * b, j = Math.cos(N), D = -Math.sin(N), f = Math.cos(G), P = -Math.sin(G), B = Math.cos(r), A = -Math.sin(r), H = f * B, O = -f * A;
        d.m11 = H, d.a = H, d.m12 = O, d.b = O, d.m13 = P;
        var U = D * P * B + j * A;
        d.m21 = U, d.c = U;
        var k = j * B - D * P * A;
        return d.m22 = k, d.d = k, d.m23 = -D * f, d.m31 = D * A - j * P * B, d.m32 = D * B + j * P * A, d.m33 = j * f, d;
      }
      function p(u, e, m, d) {
        var b = new S(), N = Math.sqrt(u * u + e * e + m * m);
        if (N === 0)
          return b;
        var G = u / N, r = e / N, j = m / N, D = d * (Math.PI / 360), f = Math.sin(D), P = Math.cos(D), B = f * f, A = G * G, H = r * r, O = j * j, U = 1 - 2 * (H + O) * B;
        b.m11 = U, b.a = U;
        var k = 2 * (G * r * B + j * f * P);
        b.m12 = k, b.b = k, b.m13 = 2 * (G * j * B - r * f * P);
        var q = 2 * (r * G * B - j * f * P);
        b.m21 = q, b.c = q;
        var al = 1 - 2 * (O + A) * B;
        return b.m22 = al, b.d = al, b.m23 = 2 * (r * j * B + G * f * P), b.m31 = 2 * (j * G * B + r * f * P), b.m32 = 2 * (j * r * B - G * f * P), b.m33 = 1 - 2 * (A + H) * B, b;
      }
      function X(u, e, m) {
        var d = new S();
        return d.m11 = u, d.a = u, d.m22 = e, d.d = e, d.m33 = m, d;
      }
      function M(u, e) {
        var m = new S();
        if (u) {
          var d = u * Math.PI / 180, b = Math.tan(d);
          m.m21 = b, m.c = b;
        }
        if (e) {
          var N = e * Math.PI / 180, G = Math.tan(N);
          m.m12 = G, m.b = G;
        }
        return m;
      }
      function x(u) {
        return M(u, 0);
      }
      function n(u) {
        return M(0, u);
      }
      function V(u, e) {
        var m = e.m11 * u.m11 + e.m12 * u.m21 + e.m13 * u.m31 + e.m14 * u.m41, d = e.m11 * u.m12 + e.m12 * u.m22 + e.m13 * u.m32 + e.m14 * u.m42, b = e.m11 * u.m13 + e.m12 * u.m23 + e.m13 * u.m33 + e.m14 * u.m43, N = e.m11 * u.m14 + e.m12 * u.m24 + e.m13 * u.m34 + e.m14 * u.m44, G = e.m21 * u.m11 + e.m22 * u.m21 + e.m23 * u.m31 + e.m24 * u.m41, r = e.m21 * u.m12 + e.m22 * u.m22 + e.m23 * u.m32 + e.m24 * u.m42, j = e.m21 * u.m13 + e.m22 * u.m23 + e.m23 * u.m33 + e.m24 * u.m43, D = e.m21 * u.m14 + e.m22 * u.m24 + e.m23 * u.m34 + e.m24 * u.m44, f = e.m31 * u.m11 + e.m32 * u.m21 + e.m33 * u.m31 + e.m34 * u.m41, P = e.m31 * u.m12 + e.m32 * u.m22 + e.m33 * u.m32 + e.m34 * u.m42, B = e.m31 * u.m13 + e.m32 * u.m23 + e.m33 * u.m33 + e.m34 * u.m43, A = e.m31 * u.m14 + e.m32 * u.m24 + e.m33 * u.m34 + e.m34 * u.m44, H = e.m41 * u.m11 + e.m42 * u.m21 + e.m43 * u.m31 + e.m44 * u.m41, O = e.m41 * u.m12 + e.m42 * u.m22 + e.m43 * u.m32 + e.m44 * u.m42, U = e.m41 * u.m13 + e.m42 * u.m23 + e.m43 * u.m33 + e.m44 * u.m43, k = e.m41 * u.m14 + e.m42 * u.m24 + e.m43 * u.m34 + e.m44 * u.m44;
        return i(
          [
            m,
            d,
            b,
            N,
            G,
            r,
            j,
            D,
            f,
            P,
            B,
            A,
            H,
            O,
            U,
            k
          ]
        );
      }
      var S = function() {
        for (var e = [], m = arguments.length; m--; ) e[m] = arguments[m];
        var d = this;
        if (d.a = 1, d.b = 0, d.c = 0, d.d = 1, d.e = 0, d.f = 0, d.m11 = 1, d.m12 = 0, d.m13 = 0, d.m14 = 0, d.m21 = 0, d.m22 = 1, d.m23 = 0, d.m24 = 0, d.m31 = 0, d.m32 = 0, d.m33 = 1, d.m34 = 0, d.m41 = 0, d.m42 = 0, d.m43 = 0, d.m44 = 1, e.length) {
          var b = [16, 6].some(function(N) {
            return N === e.length;
          }) ? e : e[0];
          return d.setMatrixValue(b);
        }
        return d;
      }, o = { isIdentity: { configurable: !0 }, is2D: { configurable: !0 } };
      o.isIdentity.get = function() {
        var u = this;
        return u.m11 === 1 && u.m12 === 0 && u.m13 === 0 && u.m14 === 0 && u.m21 === 0 && u.m22 === 1 && u.m23 === 0 && u.m24 === 0 && u.m31 === 0 && u.m32 === 0 && u.m33 === 1 && u.m34 === 0 && u.m41 === 0 && u.m42 === 0 && u.m43 === 0 && u.m44 === 1;
      }, o.is2D.get = function() {
        var u = this;
        return u.m31 === 0 && u.m32 === 0 && u.m33 === 1 && u.m34 === 0 && u.m43 === 0 && u.m44 === 1;
      }, S.prototype.setMatrixValue = function(e) {
        var m = this;
        return typeof e == "string" && e.length && e !== "none" ? Z(e) : [Array, Float64Array, Float32Array].some(function(d) {
          return e instanceof d;
        }) ? i(e) : [S, DOMMatrix, Object].some(function(d) {
          return e instanceof d;
        }) ? t(e) : m;
      }, S.prototype.toFloat32Array = function(e) {
        return Float32Array.from(W(this, e));
      }, S.prototype.toFloat64Array = function(e) {
        return Float64Array.from(W(this, e));
      }, S.prototype.toString = function() {
        var e = this, m = e.is2D, d = e.toFloat64Array(m).join(", "), b = m ? "matrix" : "matrix3d";
        return b + "(" + d + ")";
      }, S.prototype.toJSON = function() {
        var e = this, m = e.is2D, d = e.isIdentity;
        return Object.assign({}, e, { is2D: m, isIdentity: d });
      }, S.prototype.multiply = function(e) {
        return V(this, e);
      }, S.prototype.translate = function(e, m, d) {
        var b = e, N = m, G = d;
        return N === void 0 && (N = 0), G === void 0 && (G = 0), V(this, y(b, N, G));
      }, S.prototype.scale = function(e, m, d) {
        var b = e, N = m, G = d;
        return N === void 0 && (N = e), G === void 0 && (G = 1), V(this, X(b, N, G));
      }, S.prototype.rotate = function(e, m, d) {
        var b = e, N = m || 0, G = d || 0;
        return typeof e == "number" && m === void 0 && d === void 0 && (G = b, b = 0, N = 0), V(this, h(b, N, G));
      }, S.prototype.rotateAxisAngle = function(e, m, d, b) {
        if ([e, m, d, b].some(function(N) {
          return Number.isNaN(+N);
        }))
          throw new TypeError("CSSMatrix: expecting 4 values");
        return V(this, p(e, m, d, b));
      }, S.prototype.skewX = function(e) {
        return V(this, x(e));
      }, S.prototype.skewY = function(e) {
        return V(this, n(e));
      }, S.prototype.skew = function(e, m) {
        return V(this, M(e, m));
      }, S.prototype.transformPoint = function(e) {
        var m = this, d = m.m11 * e.x + m.m21 * e.y + m.m31 * e.z + m.m41 * e.w, b = m.m12 * e.x + m.m22 * e.y + m.m32 * e.z + m.m42 * e.w, N = m.m13 * e.x + m.m23 * e.y + m.m33 * e.z + m.m43 * e.w, G = m.m14 * e.x + m.m24 * e.y + m.m34 * e.z + m.m44 * e.w;
        return e instanceof DOMPoint ? new DOMPoint(d, b, N, G) : {
          x: d,
          y: b,
          z: N,
          w: G
        };
      }, Object.defineProperties(S.prototype, o), Object.assign(S, {
        Translate: y,
        Rotate: h,
        RotateAxisAngle: p,
        Scale: X,
        SkewX: x,
        SkewY: n,
        Skew: M,
        Multiply: V,
        fromArray: i,
        fromMatrix: t,
        fromString: Z,
        toArray: W
      });
      var R = "1.0.3", J = R;
      return Object.assign(S, { Version: J }), S;
    });
  }(dommatrix)), dommatrix.exports;
}
var ponyfill = { exports: {} };
/**
 * @license
 * web-streams-polyfill v3.3.3
 * Copyright 2024 Mattias Buelens, Diwank Singh Tomer and other contributors.
 * This code is released under the MIT license.
 * SPDX-License-Identifier: MIT
 */
var hasRequiredPonyfill;
function requirePonyfill() {
  return hasRequiredPonyfill || (hasRequiredPonyfill = 1, function(L, c) {
    (function(i, t) {
      t(c);
    })(commonjsGlobal, function(i) {
      var t = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? Symbol : function(l) {
        return "Symbol(".concat(l, ")");
      };
      function Z(l, s) {
        var I = { label: 0, sent: function() {
          if (tl[0] & 1) throw tl[1];
          return tl[1];
        }, trys: [], ops: [] }, E, _, tl, Wl;
        return Wl = { next: Tl(0), throw: Tl(1), return: Tl(2) }, typeof Symbol == "function" && (Wl[Symbol.iterator] = function() {
          return this;
        }), Wl;
        function Tl(pl) {
          return function(Ul) {
            return Rl([pl, Ul]);
          };
        }
        function Rl(pl) {
          if (E) throw new TypeError("Generator is already executing.");
          for (; Wl && (Wl = 0, pl[0] && (I = 0)), I; ) try {
            if (E = 1, _ && (tl = pl[0] & 2 ? _.return : pl[0] ? _.throw || ((tl = _.return) && tl.call(_), 0) : _.next) && !(tl = tl.call(_, pl[1])).done) return tl;
            switch (_ = 0, tl && (pl = [pl[0] & 2, tl.value]), pl[0]) {
              case 0:
              case 1:
                tl = pl;
                break;
              case 4:
                return I.label++, { value: pl[1], done: !1 };
              case 5:
                I.label++, _ = pl[1], pl = [0];
                continue;
              case 7:
                pl = I.ops.pop(), I.trys.pop();
                continue;
              default:
                if (tl = I.trys, !(tl = tl.length > 0 && tl[tl.length - 1]) && (pl[0] === 6 || pl[0] === 2)) {
                  I = 0;
                  continue;
                }
                if (pl[0] === 3 && (!tl || pl[1] > tl[0] && pl[1] < tl[3])) {
                  I.label = pl[1];
                  break;
                }
                if (pl[0] === 6 && I.label < tl[1]) {
                  I.label = tl[1], tl = pl;
                  break;
                }
                if (tl && I.label < tl[2]) {
                  I.label = tl[2], I.ops.push(pl);
                  break;
                }
                tl[2] && I.ops.pop(), I.trys.pop();
                continue;
            }
            pl = s.call(l, I);
          } catch (Ul) {
            pl = [6, Ul], _ = 0;
          } finally {
            E = tl = 0;
          }
          if (pl[0] & 5) throw pl[1];
          return { value: pl[0] ? pl[1] : void 0, done: !0 };
        }
      }
      function W(l) {
        var s = typeof Symbol == "function" && Symbol.iterator, I = s && l[s], E = 0;
        if (I) return I.call(l);
        if (l && typeof l.length == "number") return {
          next: function() {
            return l && E >= l.length && (l = void 0), { value: l && l[E++], done: !l };
          }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      }
      function y(l) {
        return this instanceof y ? (this.v = l, this) : new y(l);
      }
      function h(l, s, I) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var E = I.apply(l, s || []), _, tl = [];
        return _ = {}, Wl("next"), Wl("throw"), Wl("return"), _[Symbol.asyncIterator] = function() {
          return this;
        }, _;
        function Wl(Ql) {
          E[Ql] && (_[Ql] = function(di) {
            return new Promise(function(ni, hi) {
              tl.push([Ql, di, ni, hi]) > 1 || Tl(Ql, di);
            });
          });
        }
        function Tl(Ql, di) {
          try {
            Rl(E[Ql](di));
          } catch (ni) {
            vl(tl[0][3], ni);
          }
        }
        function Rl(Ql) {
          Ql.value instanceof y ? Promise.resolve(Ql.value.v).then(pl, Ul) : vl(tl[0][2], Ql);
        }
        function pl(Ql) {
          Tl("next", Ql);
        }
        function Ul(Ql) {
          Tl("throw", Ql);
        }
        function vl(Ql, di) {
          Ql(di), tl.shift(), tl.length && Tl(tl[0][0], tl[0][1]);
        }
      }
      function p(l) {
        var s, I;
        return s = {}, E("next"), E("throw", function(_) {
          throw _;
        }), E("return"), s[Symbol.iterator] = function() {
          return this;
        }, s;
        function E(_, tl) {
          s[_] = l[_] ? function(Wl) {
            return (I = !I) ? { value: y(l[_](Wl)), done: !1 } : tl ? tl(Wl) : Wl;
          } : tl;
        }
      }
      function X(l) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var s = l[Symbol.asyncIterator], I;
        return s ? s.call(l) : (l = typeof W == "function" ? W(l) : l[Symbol.iterator](), I = {}, E("next"), E("throw"), E("return"), I[Symbol.asyncIterator] = function() {
          return this;
        }, I);
        function E(tl) {
          I[tl] = l[tl] && function(Wl) {
            return new Promise(function(Tl, Rl) {
              Wl = l[tl](Wl), _(Tl, Rl, Wl.done, Wl.value);
            });
          };
        }
        function _(tl, Wl, Tl, Rl) {
          Promise.resolve(Rl).then(function(pl) {
            tl({ value: pl, done: Tl });
          }, Wl);
        }
      }
      typeof SuppressedError == "function" && SuppressedError;
      function M() {
      }
      function x(l) {
        return typeof l == "object" && l !== null || typeof l == "function";
      }
      var n = M;
      function V(l, s) {
        try {
          Object.defineProperty(l, "name", {
            value: s,
            configurable: !0
          });
        } catch {
        }
      }
      var S = Promise, o = Promise.prototype.then, R = Promise.reject.bind(S);
      function J(l) {
        return new S(l);
      }
      function u(l) {
        return J(function(s) {
          return s(l);
        });
      }
      function e(l) {
        return R(l);
      }
      function m(l, s, I) {
        return o.call(l, s, I);
      }
      function d(l, s, I) {
        m(m(l, s, I), void 0, n);
      }
      function b(l, s) {
        d(l, s);
      }
      function N(l, s) {
        d(l, void 0, s);
      }
      function G(l, s, I) {
        return m(l, s, I);
      }
      function r(l) {
        m(l, void 0, n);
      }
      var j = function(l) {
        if (typeof queueMicrotask == "function")
          j = queueMicrotask;
        else {
          var s = u(void 0);
          j = function(I) {
            return m(s, I);
          };
        }
        return j(l);
      };
      function D(l, s, I) {
        if (typeof l != "function")
          throw new TypeError("Argument is not a function");
        return Function.prototype.apply.call(l, s, I);
      }
      function f(l, s, I) {
        try {
          return u(D(l, s, I));
        } catch (E) {
          return e(E);
        }
      }
      var P = 16384, B = (
        /** @class */
        function() {
          function l() {
            this._cursor = 0, this._size = 0, this._front = {
              _elements: [],
              _next: void 0
            }, this._back = this._front, this._cursor = 0, this._size = 0;
          }
          return Object.defineProperty(l.prototype, "length", {
            get: function() {
              return this._size;
            },
            enumerable: !1,
            configurable: !0
          }), l.prototype.push = function(s) {
            var I = this._back, E = I;
            I._elements.length === P - 1 && (E = {
              _elements: [],
              _next: void 0
            }), I._elements.push(s), E !== I && (this._back = E, I._next = E), ++this._size;
          }, l.prototype.shift = function() {
            var s = this._front, I = s, E = this._cursor, _ = E + 1, tl = s._elements, Wl = tl[E];
            return _ === P && (I = s._next, _ = 0), --this._size, this._cursor = _, s !== I && (this._front = I), tl[E] = void 0, Wl;
          }, l.prototype.forEach = function(s) {
            for (var I = this._cursor, E = this._front, _ = E._elements; (I !== _.length || E._next !== void 0) && !(I === _.length && (E = E._next, _ = E._elements, I = 0, _.length === 0)); )
              s(_[I]), ++I;
          }, l.prototype.peek = function() {
            var s = this._front, I = this._cursor;
            return s._elements[I];
          }, l;
        }()
      ), A = t("[[AbortSteps]]"), H = t("[[ErrorSteps]]"), O = t("[[CancelSteps]]"), U = t("[[PullSteps]]"), k = t("[[ReleaseSteps]]");
      function q(l, s) {
        l._ownerReadableStream = s, s._reader = l, s._state === "readable" ? Q(l) : s._state === "closed" ? w(l) : T(l, s._storedError);
      }
      function al(l, s) {
        var I = l._ownerReadableStream;
        return Mi(I, s);
      }
      function Ml(l) {
        var s = l._ownerReadableStream;
        s._state === "readable" ? g(l, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")) : K(l, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")), s._readableStreamController[k](), s._reader = void 0, l._ownerReadableStream = void 0;
      }
      function wl(l) {
        return new TypeError("Cannot " + l + " a stream using a released reader");
      }
      function Q(l) {
        l._closedPromise = J(function(s, I) {
          l._closedPromise_resolve = s, l._closedPromise_reject = I;
        });
      }
      function T(l, s) {
        Q(l), g(l, s);
      }
      function w(l) {
        Q(l), a(l);
      }
      function g(l, s) {
        l._closedPromise_reject !== void 0 && (r(l._closedPromise), l._closedPromise_reject(s), l._closedPromise_resolve = void 0, l._closedPromise_reject = void 0);
      }
      function K(l, s) {
        T(l, s);
      }
      function a(l) {
        l._closedPromise_resolve !== void 0 && (l._closedPromise_resolve(void 0), l._closedPromise_resolve = void 0, l._closedPromise_reject = void 0);
      }
      var Y = Number.isFinite || function(l) {
        return typeof l == "number" && isFinite(l);
      }, z = Math.trunc || function(l) {
        return l < 0 ? Math.ceil(l) : Math.floor(l);
      };
      function C(l) {
        return typeof l == "object" || typeof l == "function";
      }
      function F(l, s) {
        if (l !== void 0 && !C(l))
          throw new TypeError("".concat(s, " is not an object."));
      }
      function v(l, s) {
        if (typeof l != "function")
          throw new TypeError("".concat(s, " is not a function."));
      }
      function $(l) {
        return typeof l == "object" && l !== null || typeof l == "function";
      }
      function il(l, s) {
        if (!$(l))
          throw new TypeError("".concat(s, " is not an object."));
      }
      function dl(l, s, I) {
        if (l === void 0)
          throw new TypeError("Parameter ".concat(s, " is required in '").concat(I, "'."));
      }
      function el(l, s, I) {
        if (l === void 0)
          throw new TypeError("".concat(s, " is required in '").concat(I, "'."));
      }
      function bl(l) {
        return Number(l);
      }
      function ml(l) {
        return l === 0 ? 0 : l;
      }
      function Gl(l) {
        return ml(z(l));
      }
      function Yl(l, s) {
        var I = 0, E = Number.MAX_SAFE_INTEGER, _ = Number(l);
        if (_ = ml(_), !Y(_))
          throw new TypeError("".concat(s, " is not a finite number"));
        if (_ = Gl(_), _ < I || _ > E)
          throw new TypeError("".concat(s, " is outside the accepted range of ").concat(I, " to ").concat(E, ", inclusive"));
        return !Y(_) || _ === 0 ? 0 : _;
      }
      function yl(l, s) {
        if (!ri(l))
          throw new TypeError("".concat(s, " is not a ReadableStream."));
      }
      function Vl(l) {
        return new Sl(l);
      }
      function Dl(l, s) {
        l._reader._readRequests.push(s);
      }
      function Xl(l, s, I) {
        var E = l._reader, _ = E._readRequests.shift();
        I ? _._closeSteps() : _._chunkSteps(s);
      }
      function Hl(l) {
        return l._reader._readRequests.length;
      }
      function Al(l) {
        var s = l._reader;
        return !(s === void 0 || !ol(s));
      }
      var Sl = (
        /** @class */
        function() {
          function l(s) {
            if (dl(s, 1, "ReadableStreamDefaultReader"), yl(s, "First parameter"), Ri(s))
              throw new TypeError("This stream has already been locked for exclusive reading by another reader");
            q(this, s), this._readRequests = new B();
          }
          return Object.defineProperty(l.prototype, "closed", {
            /**
             * Returns a promise that will be fulfilled when the stream becomes closed,
             * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.
             */
            get: function() {
              return ol(this) ? this._closedPromise : e(fl("closed"));
            },
            enumerable: !1,
            configurable: !0
          }), l.prototype.cancel = function(s) {
            return s === void 0 && (s = void 0), ol(this) ? this._ownerReadableStream === void 0 ? e(wl("cancel")) : al(this, s) : e(fl("cancel"));
          }, l.prototype.read = function() {
            if (!ol(this))
              return e(fl("read"));
            if (this._ownerReadableStream === void 0)
              return e(wl("read from"));
            var s, I, E = J(function(tl, Wl) {
              s = tl, I = Wl;
            }), _ = {
              _chunkSteps: function(tl) {
                return s({ value: tl, done: !1 });
              },
              _closeSteps: function() {
                return s({ value: void 0, done: !0 });
              },
              _errorSteps: function(tl) {
                return I(tl);
              }
            };
            return cl(this, _), E;
          }, l.prototype.releaseLock = function() {
            if (!ol(this))
              throw fl("releaseLock");
            this._ownerReadableStream !== void 0 && Il(this);
          }, l;
        }()
      );
      Object.defineProperties(Sl.prototype, {
        cancel: { enumerable: !0 },
        read: { enumerable: !0 },
        releaseLock: { enumerable: !0 },
        closed: { enumerable: !0 }
      }), V(Sl.prototype.cancel, "cancel"), V(Sl.prototype.read, "read"), V(Sl.prototype.releaseLock, "releaseLock"), typeof t.toStringTag == "symbol" && Object.defineProperty(Sl.prototype, t.toStringTag, {
        value: "ReadableStreamDefaultReader",
        configurable: !0
      });
      function ol(l) {
        return !x(l) || !Object.prototype.hasOwnProperty.call(l, "_readRequests") ? !1 : l instanceof Sl;
      }
      function cl(l, s) {
        var I = l._ownerReadableStream;
        I._disturbed = !0, I._state === "closed" ? s._closeSteps() : I._state === "errored" ? s._errorSteps(I._storedError) : I._readableStreamController[U](s);
      }
      function Il(l) {
        Ml(l);
        var s = new TypeError("Reader was released");
        Jl(l, s);
      }
      function Jl(l, s) {
        var I = l._readRequests;
        l._readRequests = new B(), I.forEach(function(E) {
          E._errorSteps(s);
        });
      }
      function fl(l) {
        return new TypeError("ReadableStreamDefaultReader.prototype.".concat(l, " can only be used on a ReadableStreamDefaultReader"));
      }
      var Nl, zl, kl;
      function nl(l) {
        return l.slice();
      }
      function ll(l, s, I, E, _) {
        new Uint8Array(l).set(new Uint8Array(I, E, _), s);
      }
      var sl = function(l) {
        return typeof l.transfer == "function" ? sl = function(s) {
          return s.transfer();
        } : typeof structuredClone == "function" ? sl = function(s) {
          return structuredClone(s, { transfer: [s] });
        } : sl = function(s) {
          return s;
        }, sl(l);
      }, hl = function(l) {
        return typeof l.detached == "boolean" ? hl = function(s) {
          return s.detached;
        } : hl = function(s) {
          return s.byteLength === 0;
        }, hl(l);
      };
      function Cl(l, s, I) {
        if (l.slice)
          return l.slice(s, I);
        var E = I - s, _ = new ArrayBuffer(E);
        return ll(_, 0, l, s, E), _;
      }
      function jl(l, s) {
        var I = l[s];
        if (I != null) {
          if (typeof I != "function")
            throw new TypeError("".concat(String(s), " is not a function"));
          return I;
        }
      }
      function ul(l) {
        var s, I = (s = {}, s[t.iterator] = function() {
          return l.iterator;
        }, s), E = function() {
          return h(this, arguments, function() {
            return Z(this, function(tl) {
              switch (tl.label) {
                case 0:
                  return [5, W(p(X(I)))];
                case 1:
                  return [4, y.apply(void 0, [tl.sent()])];
                case 2:
                  return [4, y.apply(void 0, [tl.sent()])];
                case 3:
                  return [2, tl.sent()];
              }
            });
          });
        }(), _ = E.next;
        return { iterator: E, nextMethod: _, done: !1 };
      }
      var Zl = (kl = (Nl = t.asyncIterator) !== null && Nl !== void 0 ? Nl : (zl = t.for) === null || zl === void 0 ? void 0 : zl.call(t, "Symbol.asyncIterator")) !== null && kl !== void 0 ? kl : "@@asyncIterator";
      function Ll(l, s, I) {
        if (s === void 0 && (s = "sync"), I === void 0)
          if (s === "async") {
            if (I = jl(l, Zl), I === void 0) {
              var E = jl(l, t.iterator), _ = Ll(l, "sync", E);
              return ul(_);
            }
          } else
            I = jl(l, t.iterator);
        if (I === void 0)
          throw new TypeError("The object is not iterable");
        var tl = D(I, l, []);
        if (!x(tl))
          throw new TypeError("The iterator method must return an object");
        var Wl = tl.next;
        return { iterator: tl, nextMethod: Wl, done: !1 };
      }
      function rl(l) {
        var s = D(l.nextMethod, l.iterator, []);
        if (!x(s))
          throw new TypeError("The iterator.next() method must return an object");
        return s;
      }
      function Fl(l) {
        return !!l.done;
      }
      function Kl(l) {
        return l.value;
      }
      var Ol, El = (Ol = {}, // 25.1.3.1 %AsyncIteratorPrototype% [ @@asyncIterator ] ( )
      // https://tc39.github.io/ecma262/#sec-asynciteratorprototype-asynciterator
      Ol[Zl] = function() {
        return this;
      }, Ol);
      Object.defineProperty(El, Zl, { enumerable: !1 });
      var xl = (
        /** @class */
        function() {
          function l(s, I) {
            this._ongoingPromise = void 0, this._isFinished = !1, this._reader = s, this._preventCancel = I;
          }
          return l.prototype.next = function() {
            var s = this, I = function() {
              return s._nextSteps();
            };
            return this._ongoingPromise = this._ongoingPromise ? G(this._ongoingPromise, I, I) : I(), this._ongoingPromise;
          }, l.prototype.return = function(s) {
            var I = this, E = function() {
              return I._returnSteps(s);
            };
            return this._ongoingPromise ? G(this._ongoingPromise, E, E) : E();
          }, l.prototype._nextSteps = function() {
            var s = this;
            if (this._isFinished)
              return Promise.resolve({ value: void 0, done: !0 });
            var I = this._reader, E, _, tl = J(function(Tl, Rl) {
              E = Tl, _ = Rl;
            }), Wl = {
              _chunkSteps: function(Tl) {
                s._ongoingPromise = void 0, j(function() {
                  return E({ value: Tl, done: !1 });
                });
              },
              _closeSteps: function() {
                s._ongoingPromise = void 0, s._isFinished = !0, Ml(I), E({ value: void 0, done: !0 });
              },
              _errorSteps: function(Tl) {
                s._ongoingPromise = void 0, s._isFinished = !0, Ml(I), _(Tl);
              }
            };
            return cl(I, Wl), tl;
          }, l.prototype._returnSteps = function(s) {
            if (this._isFinished)
              return Promise.resolve({ value: s, done: !0 });
            this._isFinished = !0;
            var I = this._reader;
            if (!this._preventCancel) {
              var E = al(I, s);
              return Ml(I), G(E, function() {
                return { value: s, done: !0 };
              });
            }
            return Ml(I), u({ value: s, done: !0 });
          }, l;
        }()
      ), Bl = {
        next: function() {
          return Pl(this) ? this._asyncIteratorImpl.next() : e(ql("next"));
        },
        return: function(l) {
          return Pl(this) ? this._asyncIteratorImpl.return(l) : e(ql("return"));
        }
      };
      Object.setPrototypeOf(Bl, El);
      function si(l, s) {
        var I = Vl(l), E = new xl(I, s), _ = Object.create(Bl);
        return _._asyncIteratorImpl = E, _;
      }
      function Pl(l) {
        if (!x(l) || !Object.prototype.hasOwnProperty.call(l, "_asyncIteratorImpl"))
          return !1;
        try {
          return l._asyncIteratorImpl instanceof xl;
        } catch {
          return !1;
        }
      }
      function ql(l) {
        return new TypeError("ReadableStreamAsyncIterator.".concat(l, " can only be used on a ReadableSteamAsyncIterator"));
      }
      var ci = Number.isNaN || function(l) {
        return l !== l;
      };
      function $l(l) {
        return !(typeof l != "number" || ci(l) || l < 0);
      }
      function Zi(l) {
        var s = Cl(l.buffer, l.byteOffset, l.byteOffset + l.byteLength);
        return new Uint8Array(s);
      }
      function li(l) {
        var s = l._queue.shift();
        return l._queueTotalSize -= s.size, l._queueTotalSize < 0 && (l._queueTotalSize = 0), s.value;
      }
      function Gi(l, s, I) {
        if (!$l(I) || I === 1 / 0)
          throw new RangeError("Size must be a finite, non-NaN, non-negative number.");
        l._queue.push({ value: s, size: I }), l._queueTotalSize += I;
      }
      function Ti(l) {
        var s = l._queue.peek();
        return s.value;
      }
      function ei(l) {
        l._queue = new B(), l._queueTotalSize = 0;
      }
      function Di(l) {
        return l === DataView;
      }
      function Ki(l) {
        return Di(l.constructor);
      }
      function xi(l) {
        return Di(l) ? 1 : l.BYTES_PER_ELEMENT;
      }
      var mi = (
        /** @class */
        function() {
          function l() {
            throw new TypeError("Illegal constructor");
          }
          return Object.defineProperty(l.prototype, "view", {
            /**
             * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.
             */
            get: function() {
              if (!St(this))
                throw kt("view");
              return this._view;
            },
            enumerable: !1,
            configurable: !0
          }), l.prototype.respond = function(s) {
            if (!St(this))
              throw kt("respond");
            if (dl(s, 1, "respond"), s = Yl(s, "First parameter"), this._associatedReadableByteStreamController === void 0)
              throw new TypeError("This BYOB request has been invalidated");
            if (hl(this._view.buffer))
              throw new TypeError("The BYOB request's buffer has been detached and so cannot be used as a response");
            et(this._associatedReadableByteStreamController, s);
          }, l.prototype.respondWithNewView = function(s) {
            if (!St(this))
              throw kt("respondWithNewView");
            if (dl(s, 1, "respondWithNewView"), !ArrayBuffer.isView(s))
              throw new TypeError("You can only respond with array buffer views");
            if (this._associatedReadableByteStreamController === void 0)
              throw new TypeError("This BYOB request has been invalidated");
            if (hl(s.buffer))
              throw new TypeError("The given view's buffer has been detached and so cannot be used as a response");
            mt(this._associatedReadableByteStreamController, s);
          }, l;
        }()
      );
      Object.defineProperties(mi.prototype, {
        respond: { enumerable: !0 },
        respondWithNewView: { enumerable: !0 },
        view: { enumerable: !0 }
      }), V(mi.prototype.respond, "respond"), V(mi.prototype.respondWithNewView, "respondWithNewView"), typeof t.toStringTag == "symbol" && Object.defineProperty(mi.prototype, t.toStringTag, {
        value: "ReadableStreamBYOBRequest",
        configurable: !0
      });
      var yi = (
        /** @class */
        function() {
          function l() {
            throw new TypeError("Illegal constructor");
          }
          return Object.defineProperty(l.prototype, "byobRequest", {
            /**
             * Returns the current BYOB pull request, or `null` if there isn't one.
             */
            get: function() {
              if (!Ji(this))
                throw qi("byobRequest");
              return Jt(this);
            },
            enumerable: !1,
            configurable: !0
          }), Object.defineProperty(l.prototype, "desiredSize", {
            /**
             * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is
             * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.
             */
            get: function() {
              if (!Ji(this))
                throw qi("desiredSize");
              return ms(this);
            },
            enumerable: !1,
            configurable: !0
          }), l.prototype.close = function() {
            if (!Ji(this))
              throw qi("close");
            if (this._closeRequested)
              throw new TypeError("The stream has already been closed; do not close it again!");
            var s = this._controlledReadableByteStream._state;
            if (s !== "readable")
              throw new TypeError("The stream (in ".concat(s, " state) is not in the readable state and cannot be closed"));
            _i(this);
          }, l.prototype.enqueue = function(s) {
            if (!Ji(this))
              throw qi("enqueue");
            if (dl(s, 1, "enqueue"), !ArrayBuffer.isView(s))
              throw new TypeError("chunk must be an array buffer view");
            if (s.byteLength === 0)
              throw new TypeError("chunk must have non-zero byteLength");
            if (s.buffer.byteLength === 0)
              throw new TypeError("chunk's buffer must have non-zero byteLength");
            if (this._closeRequested)
              throw new TypeError("stream is closed or draining");
            var I = this._controlledReadableByteStream._state;
            if (I !== "readable")
              throw new TypeError("The stream (in ".concat(I, " state) is not in the readable state and cannot be enqueued to"));
            at(this, s);
          }, l.prototype.error = function(s) {
            if (s === void 0 && (s = void 0), !Ji(this))
              throw qi("error");
            Wi(this, s);
          }, l.prototype[O] = function(s) {
            is(this), ei(this);
            var I = this._cancelAlgorithm(s);
            return bt(this), I;
          }, l.prototype[U] = function(s) {
            var I = this._controlledReadableByteStream;
            if (this._queueTotalSize > 0) {
              es(this, s);
              return;
            }
            var E = this._autoAllocateChunkSize;
            if (E !== void 0) {
              var _ = void 0;
              try {
                _ = new ArrayBuffer(E);
              } catch (Wl) {
                s._errorSteps(Wl);
                return;
              }
              var tl = {
                buffer: _,
                bufferByteLength: E,
                byteOffset: 0,
                byteLength: E,
                bytesFilled: 0,
                minimumFill: 1,
                elementSize: 1,
                viewConstructor: Uint8Array,
                readerType: "default"
              };
              this._pendingPullIntos.push(tl);
            }
            Dl(I, s), ki(this);
          }, l.prototype[k] = function() {
            if (this._pendingPullIntos.length > 0) {
              var s = this._pendingPullIntos.peek();
              s.readerType = "none", this._pendingPullIntos = new B(), this._pendingPullIntos.push(s);
            }
          }, l;
        }()
      );
      Object.defineProperties(yi.prototype, {
        close: { enumerable: !0 },
        enqueue: { enumerable: !0 },
        error: { enumerable: !0 },
        byobRequest: { enumerable: !0 },
        desiredSize: { enumerable: !0 }
      }), V(yi.prototype.close, "close"), V(yi.prototype.enqueue, "enqueue"), V(yi.prototype.error, "error"), typeof t.toStringTag == "symbol" && Object.defineProperty(yi.prototype, t.toStringTag, {
        value: "ReadableByteStreamController",
        configurable: !0
      });
      function Ji(l) {
        return !x(l) || !Object.prototype.hasOwnProperty.call(l, "_controlledReadableByteStream") ? !1 : l instanceof yi;
      }
      function St(l) {
        return !x(l) || !Object.prototype.hasOwnProperty.call(l, "_associatedReadableByteStreamController") ? !1 : l instanceof mi;
      }
      function ki(l) {
        var s = tc(l);
        if (s) {
          if (l._pulling) {
            l._pullAgain = !0;
            return;
          }
          l._pulling = !0;
          var I = l._pullAlgorithm();
          d(I, function() {
            return l._pulling = !1, l._pullAgain && (l._pullAgain = !1, ki(l)), null;
          }, function(E) {
            return Wi(l, E), null;
          });
        }
      }
      function is(l) {
        Dt(l), l._pendingPullIntos = new B();
      }
      function Ct(l, s) {
        var I = !1;
        l._state === "closed" && (I = !0);
        var E = ts(s);
        s.readerType === "default" ? Xl(l, E, I) : ac(l, E, I);
      }
      function ts(l) {
        var s = l.bytesFilled, I = l.elementSize;
        return new l.viewConstructor(l.buffer, l.byteOffset, s / I);
      }
      function Zt(l, s, I, E) {
        l._queue.push({ buffer: s, byteOffset: I, byteLength: E }), l._queueTotalSize += E;
      }
      function ss(l, s, I, E) {
        var _;
        try {
          _ = Cl(s, I, I + E);
        } catch (tl) {
          throw Wi(l, tl), tl;
        }
        Zt(l, _, 0, E);
      }
      function cs(l, s) {
        s.bytesFilled > 0 && ss(l, s.buffer, s.byteOffset, s.bytesFilled), Ei(l);
      }
      function ds(l, s) {
        var I = Math.min(l._queueTotalSize, s.byteLength - s.bytesFilled), E = s.bytesFilled + I, _ = I, tl = !1, Wl = E % s.elementSize, Tl = E - Wl;
        Tl >= s.minimumFill && (_ = Tl - s.bytesFilled, tl = !0);
        for (var Rl = l._queue; _ > 0; ) {
          var pl = Rl.peek(), Ul = Math.min(_, pl.byteLength), vl = s.byteOffset + s.bytesFilled;
          ll(s.buffer, vl, pl.buffer, pl.byteOffset, Ul), pl.byteLength === Ul ? Rl.shift() : (pl.byteOffset += Ul, pl.byteLength -= Ul), l._queueTotalSize -= Ul, Zs(l, Ul, s), _ -= Ul;
        }
        return tl;
      }
      function Zs(l, s, I) {
        I.bytesFilled += s;
      }
      function bs(l) {
        l._queueTotalSize === 0 && l._closeRequested ? (bt(l), ct(l._controlledReadableByteStream)) : ki(l);
      }
      function Dt(l) {
        l._byobRequest !== null && (l._byobRequest._associatedReadableByteStreamController = void 0, l._byobRequest._view = null, l._byobRequest = null);
      }
      function xt(l) {
        for (; l._pendingPullIntos.length > 0; ) {
          if (l._queueTotalSize === 0)
            return;
          var s = l._pendingPullIntos.peek();
          ds(l, s) && (Ei(l), Ct(l._controlledReadableByteStream, s));
        }
      }
      function qs(l) {
        for (var s = l._controlledReadableByteStream._reader; s._readRequests.length > 0; ) {
          if (l._queueTotalSize === 0)
            return;
          var I = s._readRequests.shift();
          es(l, I);
        }
      }
      function $s(l, s, I, E) {
        var _ = l._controlledReadableByteStream, tl = s.constructor, Wl = xi(tl), Tl = s.byteOffset, Rl = s.byteLength, pl = I * Wl, Ul;
        try {
          Ul = sl(s.buffer);
        } catch (hi) {
          E._errorSteps(hi);
          return;
        }
        var vl = {
          buffer: Ul,
          bufferByteLength: Ul.byteLength,
          byteOffset: Tl,
          byteLength: Rl,
          bytesFilled: 0,
          minimumFill: pl,
          elementSize: Wl,
          viewConstructor: tl,
          readerType: "byob"
        };
        if (l._pendingPullIntos.length > 0) {
          l._pendingPullIntos.push(vl), Ws(_, E);
          return;
        }
        if (_._state === "closed") {
          var Ql = new tl(vl.buffer, vl.byteOffset, 0);
          E._closeSteps(Ql);
          return;
        }
        if (l._queueTotalSize > 0) {
          if (ds(l, vl)) {
            var di = ts(vl);
            bs(l), E._chunkSteps(di);
            return;
          }
          if (l._closeRequested) {
            var ni = new TypeError("Insufficient bytes to fill elements in the given buffer");
            Wi(l, ni), E._errorSteps(ni);
            return;
          }
        }
        l._pendingPullIntos.push(vl), Ws(_, E), ki(l);
      }
      function lc(l, s) {
        s.readerType === "none" && Ei(l);
        var I = l._controlledReadableByteStream;
        if (jt(I))
          for (; hs(I) > 0; ) {
            var E = Ei(l);
            Ct(I, E);
          }
      }
      function ic(l, s, I) {
        if (Zs(l, s, I), I.readerType === "none") {
          cs(l, I), xt(l);
          return;
        }
        if (!(I.bytesFilled < I.minimumFill)) {
          Ei(l);
          var E = I.bytesFilled % I.elementSize;
          if (E > 0) {
            var _ = I.byteOffset + I.bytesFilled;
            ss(l, I.buffer, _ - E, E);
          }
          I.bytesFilled -= E, Ct(l._controlledReadableByteStream, I), xt(l);
        }
      }
      function as(l, s) {
        var I = l._pendingPullIntos.peek();
        Dt(l);
        var E = l._controlledReadableByteStream._state;
        E === "closed" ? lc(l, I) : ic(l, s, I), ki(l);
      }
      function Ei(l) {
        var s = l._pendingPullIntos.shift();
        return s;
      }
      function tc(l) {
        var s = l._controlledReadableByteStream;
        if (s._state !== "readable" || l._closeRequested || !l._started)
          return !1;
        if (Al(s) && Hl(s) > 0 || jt(s) && hs(s) > 0)
          return !0;
        var I = ms(l);
        return I > 0;
      }
      function bt(l) {
        l._pullAlgorithm = void 0, l._cancelAlgorithm = void 0;
      }
      function _i(l) {
        var s = l._controlledReadableByteStream;
        if (!(l._closeRequested || s._state !== "readable")) {
          if (l._queueTotalSize > 0) {
            l._closeRequested = !0;
            return;
          }
          if (l._pendingPullIntos.length > 0) {
            var I = l._pendingPullIntos.peek();
            if (I.bytesFilled % I.elementSize !== 0) {
              var E = new TypeError("Insufficient bytes to fill elements in the given buffer");
              throw Wi(l, E), E;
            }
          }
          bt(l), ct(s);
        }
      }
      function at(l, s) {
        var I = l._controlledReadableByteStream;
        if (!(l._closeRequested || I._state !== "readable")) {
          var E = s.buffer, _ = s.byteOffset, tl = s.byteLength;
          if (hl(E))
            throw new TypeError("chunk's buffer is detached and so cannot be enqueued");
          var Wl = sl(E);
          if (l._pendingPullIntos.length > 0) {
            var Tl = l._pendingPullIntos.peek();
            if (hl(Tl.buffer))
              throw new TypeError("The BYOB request's buffer has been detached and so cannot be filled with an enqueued chunk");
            Dt(l), Tl.buffer = sl(Tl.buffer), Tl.readerType === "none" && cs(l, Tl);
          }
          if (Al(I))
            if (qs(l), Hl(I) === 0)
              Zt(l, Wl, _, tl);
            else {
              l._pendingPullIntos.length > 0 && Ei(l);
              var Rl = new Uint8Array(Wl, _, tl);
              Xl(I, Rl, !1);
            }
          else jt(I) ? (Zt(l, Wl, _, tl), xt(l)) : Zt(l, Wl, _, tl);
          ki(l);
        }
      }
      function Wi(l, s) {
        var I = l._controlledReadableByteStream;
        I._state === "readable" && (is(l), ei(l), bt(l), Fs(I, s));
      }
      function es(l, s) {
        var I = l._queue.shift();
        l._queueTotalSize -= I.byteLength, bs(l);
        var E = new Uint8Array(I.buffer, I.byteOffset, I.byteLength);
        s._chunkSteps(E);
      }
      function Jt(l) {
        if (l._byobRequest === null && l._pendingPullIntos.length > 0) {
          var s = l._pendingPullIntos.peek(), I = new Uint8Array(s.buffer, s.byteOffset + s.bytesFilled, s.byteLength - s.bytesFilled), E = Object.create(mi.prototype);
          cc(E, l, I), l._byobRequest = E;
        }
        return l._byobRequest;
      }
      function ms(l) {
        var s = l._controlledReadableByteStream._state;
        return s === "errored" ? null : s === "closed" ? 0 : l._strategyHWM - l._queueTotalSize;
      }
      function et(l, s) {
        var I = l._pendingPullIntos.peek(), E = l._controlledReadableByteStream._state;
        if (E === "closed") {
          if (s !== 0)
            throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");
        } else {
          if (s === 0)
            throw new TypeError("bytesWritten must be greater than 0 when calling respond() on a readable stream");
          if (I.bytesFilled + s > I.byteLength)
            throw new RangeError("bytesWritten out of range");
        }
        I.buffer = sl(I.buffer), as(l, s);
      }
      function mt(l, s) {
        var I = l._pendingPullIntos.peek(), E = l._controlledReadableByteStream._state;
        if (E === "closed") {
          if (s.byteLength !== 0)
            throw new TypeError("The view's length must be 0 when calling respondWithNewView() on a closed stream");
        } else if (s.byteLength === 0)
          throw new TypeError("The view's length must be greater than 0 when calling respondWithNewView() on a readable stream");
        if (I.byteOffset + I.bytesFilled !== s.byteOffset)
          throw new RangeError("The region specified by view does not match byobRequest");
        if (I.bufferByteLength !== s.buffer.byteLength)
          throw new RangeError("The buffer of view has different capacity than byobRequest");
        if (I.bytesFilled + s.byteLength > I.byteLength)
          throw new RangeError("The region specified by view is larger than byobRequest");
        var _ = s.byteLength;
        I.buffer = sl(s.buffer), as(l, _);
      }
      function ns(l, s, I, E, _, tl, Wl) {
        s._controlledReadableByteStream = l, s._pullAgain = !1, s._pulling = !1, s._byobRequest = null, s._queue = s._queueTotalSize = void 0, ei(s), s._closeRequested = !1, s._started = !1, s._strategyHWM = tl, s._pullAlgorithm = E, s._cancelAlgorithm = _, s._autoAllocateChunkSize = Wl, s._pendingPullIntos = new B(), l._readableStreamController = s;
        var Tl = I();
        d(u(Tl), function() {
          return s._started = !0, ki(s), null;
        }, function(Rl) {
          return Wi(s, Rl), null;
        });
      }
      function sc(l, s, I) {
        var E = Object.create(yi.prototype), _, tl, Wl;
        s.start !== void 0 ? _ = function() {
          return s.start(E);
        } : _ = function() {
        }, s.pull !== void 0 ? tl = function() {
          return s.pull(E);
        } : tl = function() {
          return u(void 0);
        }, s.cancel !== void 0 ? Wl = function(Rl) {
          return s.cancel(Rl);
        } : Wl = function() {
          return u(void 0);
        };
        var Tl = s.autoAllocateChunkSize;
        if (Tl === 0)
          throw new TypeError("autoAllocateChunkSize must be greater than 0");
        ns(l, E, _, tl, Wl, I, Tl);
      }
      function cc(l, s, I) {
        l._associatedReadableByteStreamController = s, l._view = I;
      }
      function kt(l) {
        return new TypeError("ReadableStreamBYOBRequest.prototype.".concat(l, " can only be used on a ReadableStreamBYOBRequest"));
      }
      function qi(l) {
        return new TypeError("ReadableByteStreamController.prototype.".concat(l, " can only be used on a ReadableByteStreamController"));
      }
      function dc(l, s) {
        F(l, s);
        var I = l == null ? void 0 : l.mode;
        return {
          mode: I === void 0 ? void 0 : Zc(I, "".concat(s, " has member 'mode' that"))
        };
      }
      function Zc(l, s) {
        if (l = "".concat(l), l !== "byob")
          throw new TypeError("".concat(s, " '").concat(l, "' is not a valid enumeration value for ReadableStreamReaderMode"));
        return l;
      }
      function bc(l, s) {
        var I;
        F(l, s);
        var E = (I = l == null ? void 0 : l.min) !== null && I !== void 0 ? I : 1;
        return {
          min: Yl(E, "".concat(s, " has member 'min' that"))
        };
      }
      function us(l) {
        return new wi(l);
      }
      function Ws(l, s) {
        l._reader._readIntoRequests.push(s);
      }
      function ac(l, s, I) {
        var E = l._reader, _ = E._readIntoRequests.shift();
        I ? _._closeSteps(s) : _._chunkSteps(s);
      }
      function hs(l) {
        return l._reader._readIntoRequests.length;
      }
      function jt(l) {
        var s = l._reader;
        return !(s === void 0 || !ji(s));
      }
      var wi = (
        /** @class */
        function() {
          function l(s) {
            if (dl(s, 1, "ReadableStreamBYOBReader"), yl(s, "First parameter"), Ri(s))
              throw new TypeError("This stream has already been locked for exclusive reading by another reader");
            if (!Ji(s._readableStreamController))
              throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");
            q(this, s), this._readIntoRequests = new B();
          }
          return Object.defineProperty(l.prototype, "closed", {
            /**
             * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or
             * the reader's lock is released before the stream finishes closing.
             */
            get: function() {
              return ji(this) ? this._closedPromise : e(nt("closed"));
            },
            enumerable: !1,
            configurable: !0
          }), l.prototype.cancel = function(s) {
            return s === void 0 && (s = void 0), ji(this) ? this._ownerReadableStream === void 0 ? e(wl("cancel")) : al(this, s) : e(nt("cancel"));
          }, l.prototype.read = function(s, I) {
            if (I === void 0 && (I = {}), !ji(this))
              return e(nt("read"));
            if (!ArrayBuffer.isView(s))
              return e(new TypeError("view must be an array buffer view"));
            if (s.byteLength === 0)
              return e(new TypeError("view must have non-zero byteLength"));
            if (s.buffer.byteLength === 0)
              return e(new TypeError("view's buffer must have non-zero byteLength"));
            if (hl(s.buffer))
              return e(new TypeError("view's buffer has been detached"));
            var E;
            try {
              E = bc(I, "options");
            } catch (pl) {
              return e(pl);
            }
            var _ = E.min;
            if (_ === 0)
              return e(new TypeError("options.min must be greater than 0"));
            if (Ki(s)) {
              if (_ > s.byteLength)
                return e(new RangeError("options.min must be less than or equal to view's byteLength"));
            } else if (_ > s.length)
              return e(new RangeError("options.min must be less than or equal to view's length"));
            if (this._ownerReadableStream === void 0)
              return e(wl("read from"));
            var tl, Wl, Tl = J(function(pl, Ul) {
              tl = pl, Wl = Ul;
            }), Rl = {
              _chunkSteps: function(pl) {
                return tl({ value: pl, done: !1 });
              },
              _closeSteps: function(pl) {
                return tl({ value: pl, done: !0 });
              },
              _errorSteps: function(pl) {
                return Wl(pl);
              }
            };
            return Gs(this, s, _, Rl), Tl;
          }, l.prototype.releaseLock = function() {
            if (!ji(this))
              throw nt("releaseLock");
            this._ownerReadableStream !== void 0 && ec(this);
          }, l;
        }()
      );
      Object.defineProperties(wi.prototype, {
        cancel: { enumerable: !0 },
        read: { enumerable: !0 },
        releaseLock: { enumerable: !0 },
        closed: { enumerable: !0 }
      }), V(wi.prototype.cancel, "cancel"), V(wi.prototype.read, "read"), V(wi.prototype.releaseLock, "releaseLock"), typeof t.toStringTag == "symbol" && Object.defineProperty(wi.prototype, t.toStringTag, {
        value: "ReadableStreamBYOBReader",
        configurable: !0
      });
      function ji(l) {
        return !x(l) || !Object.prototype.hasOwnProperty.call(l, "_readIntoRequests") ? !1 : l instanceof wi;
      }
      function Gs(l, s, I, E) {
        var _ = l._ownerReadableStream;
        _._disturbed = !0, _._state === "errored" ? E._errorSteps(_._storedError) : $s(_._readableStreamController, s, I, E);
      }
      function ec(l) {
        Ml(l);
        var s = new TypeError("Reader was released");
        Ns(l, s);
      }
      function Ns(l, s) {
        var I = l._readIntoRequests;
        l._readIntoRequests = new B(), I.forEach(function(E) {
          E._errorSteps(s);
        });
      }
      function nt(l) {
        return new TypeError("ReadableStreamBYOBReader.prototype.".concat(l, " can only be used on a ReadableStreamBYOBReader"));
      }
      function $i(l, s) {
        var I = l.highWaterMark;
        if (I === void 0)
          return s;
        if (ci(I) || I < 0)
          throw new RangeError("Invalid highWaterMark");
        return I;
      }
      function ut(l) {
        var s = l.size;
        return s || function() {
          return 1;
        };
      }
      function Wt(l, s) {
        F(l, s);
        var I = l == null ? void 0 : l.highWaterMark, E = l == null ? void 0 : l.size;
        return {
          highWaterMark: I === void 0 ? void 0 : bl(I),
          size: E === void 0 ? void 0 : mc(E, "".concat(s, " has member 'size' that"))
        };
      }
      function mc(l, s) {
        return v(l, s), function(I) {
          return bl(l(I));
        };
      }
      function nc(l, s) {
        F(l, s);
        var I = l == null ? void 0 : l.abort, E = l == null ? void 0 : l.close, _ = l == null ? void 0 : l.start, tl = l == null ? void 0 : l.type, Wl = l == null ? void 0 : l.write;
        return {
          abort: I === void 0 ? void 0 : uc(I, l, "".concat(s, " has member 'abort' that")),
          close: E === void 0 ? void 0 : Wc(E, l, "".concat(s, " has member 'close' that")),
          start: _ === void 0 ? void 0 : hc(_, l, "".concat(s, " has member 'start' that")),
          write: Wl === void 0 ? void 0 : Gc(Wl, l, "".concat(s, " has member 'write' that")),
          type: tl
        };
      }
      function uc(l, s, I) {
        return v(l, I), function(E) {
          return f(l, s, [E]);
        };
      }
      function Wc(l, s, I) {
        return v(l, I), function() {
          return f(l, s, []);
        };
      }
      function hc(l, s, I) {
        return v(l, I), function(E) {
          return D(l, s, [E]);
        };
      }
      function Gc(l, s, I) {
        return v(l, I), function(E, _) {
          return f(l, s, [E, _]);
        };
      }
      function Ms(l, s) {
        if (!vi(l))
          throw new TypeError("".concat(s, " is not a WritableStream."));
      }
      function Nc(l) {
        if (typeof l != "object" || l === null)
          return !1;
        try {
          return typeof l.aborted == "boolean";
        } catch {
          return !1;
        }
      }
      var Mc = typeof AbortController == "function";
      function Ic() {
        if (Mc)
          return new AbortController();
      }
      var zi = (
        /** @class */
        function() {
          function l(s, I) {
            s === void 0 && (s = {}), I === void 0 && (I = {}), s === void 0 ? s = null : il(s, "First parameter");
            var E = Wt(I, "Second parameter"), _ = nc(s, "First parameter");
            Ys(this);
            var tl = _.type;
            if (tl !== void 0)
              throw new RangeError("Invalid type is specified");
            var Wl = ut(E), Tl = $i(E, 1);
            Cc(this, _, Tl, Wl);
          }
          return Object.defineProperty(l.prototype, "locked", {
            /**
             * Returns whether or not the writable stream is locked to a writer.
             */
            get: function() {
              if (!vi(this))
                throw It("locked");
              return Qi(this);
            },
            enumerable: !1,
            configurable: !0
          }), l.prototype.abort = function(s) {
            return s === void 0 && (s = void 0), vi(this) ? Qi(this) ? e(new TypeError("Cannot abort a stream that already has a writer")) : ht(this, s) : e(It("abort"));
          }, l.prototype.close = function() {
            return vi(this) ? Qi(this) ? e(new TypeError("Cannot close a stream that already has a writer")) : Ii(this) ? e(new TypeError("Cannot close an already-closing stream")) : Ls(this) : e(It("close"));
          }, l.prototype.getWriter = function() {
            if (!vi(this))
              throw It("getWriter");
            return Is(this);
          }, l;
        }()
      );
      Object.defineProperties(zi.prototype, {
        abort: { enumerable: !0 },
        close: { enumerable: !0 },
        getWriter: { enumerable: !0 },
        locked: { enumerable: !0 }
      }), V(zi.prototype.abort, "abort"), V(zi.prototype.close, "close"), V(zi.prototype.getWriter, "getWriter"), typeof t.toStringTag == "symbol" && Object.defineProperty(zi.prototype, t.toStringTag, {
        value: "WritableStream",
        configurable: !0
      });
      function Is(l) {
        return new oi(l);
      }
      function Yc(l, s, I, E, _, tl) {
        _ === void 0 && (_ = 1), tl === void 0 && (tl = function() {
          return 1;
        });
        var Wl = Object.create(zi.prototype);
        Ys(Wl);
        var Tl = Object.create(Hi.prototype);
        return Ts(Wl, Tl, l, s, I, E, _, tl), Wl;
      }
      function Ys(l) {
        l._state = "writable", l._storedError = void 0, l._writer = void 0, l._writableStreamController = void 0, l._writeRequests = new B(), l._inFlightWriteRequest = void 0, l._closeRequest = void 0, l._inFlightCloseRequest = void 0, l._pendingAbortRequest = void 0, l._backpressure = !1;
      }
      function vi(l) {
        return !x(l) || !Object.prototype.hasOwnProperty.call(l, "_writableStreamController") ? !1 : l instanceof zi;
      }
      function Qi(l) {
        return l._writer !== void 0;
      }
      function ht(l, s) {
        var I;
        if (l._state === "closed" || l._state === "errored")
          return u(void 0);
        l._writableStreamController._abortReason = s, (I = l._writableStreamController._abortController) === null || I === void 0 || I.abort(s);
        var E = l._state;
        if (E === "closed" || E === "errored")
          return u(void 0);
        if (l._pendingAbortRequest !== void 0)
          return l._pendingAbortRequest._promise;
        var _ = !1;
        E === "erroring" && (_ = !0, s = void 0);
        var tl = J(function(Wl, Tl) {
          l._pendingAbortRequest = {
            _promise: void 0,
            _resolve: Wl,
            _reject: Tl,
            _reason: s,
            _wasAlreadyErroring: _
          };
        });
        return l._pendingAbortRequest._promise = tl, _ || Ut(l, s), tl;
      }
      function Ls(l) {
        var s = l._state;
        if (s === "closed" || s === "errored")
          return e(new TypeError("The stream (in ".concat(s, " state) is not in the writable state and cannot be closed")));
        var I = J(function(_, tl) {
          var Wl = {
            _resolve: _,
            _reject: tl
          };
          l._closeRequest = Wl;
        }), E = l._writer;
        return E !== void 0 && l._backpressure && s === "writable" && Pt(E), Dc(l._writableStreamController), I;
      }
      function Lc(l) {
        var s = J(function(I, E) {
          var _ = {
            _resolve: I,
            _reject: E
          };
          l._writeRequests.push(_);
        });
        return s;
      }
      function Ft(l, s) {
        var I = l._state;
        if (I === "writable") {
          Ut(l, s);
          return;
        }
        Ot(l);
      }
      function Ut(l, s) {
        var I = l._writableStreamController;
        l._state = "erroring", l._storedError = s;
        var E = l._writer;
        E !== void 0 && ys(E, s), !pc(l) && I._started && Ot(l);
      }
      function Ot(l) {
        l._state = "errored", l._writableStreamController[H]();
        var s = l._storedError;
        if (l._writeRequests.forEach(function(_) {
          _._reject(s);
        }), l._writeRequests = new B(), l._pendingAbortRequest === void 0) {
          Gt(l);
          return;
        }
        var I = l._pendingAbortRequest;
        if (l._pendingAbortRequest = void 0, I._wasAlreadyErroring) {
          I._reject(s), Gt(l);
          return;
        }
        var E = l._writableStreamController[A](I._reason);
        d(E, function() {
          return I._resolve(), Gt(l), null;
        }, function(_) {
          return I._reject(_), Gt(l), null;
        });
      }
      function Xc(l) {
        l._inFlightWriteRequest._resolve(void 0), l._inFlightWriteRequest = void 0;
      }
      function yc(l, s) {
        l._inFlightWriteRequest._reject(s), l._inFlightWriteRequest = void 0, Ft(l, s);
      }
      function oc(l) {
        l._inFlightCloseRequest._resolve(void 0), l._inFlightCloseRequest = void 0;
        var s = l._state;
        s === "erroring" && (l._storedError = void 0, l._pendingAbortRequest !== void 0 && (l._pendingAbortRequest._resolve(), l._pendingAbortRequest = void 0)), l._state = "closed";
        var I = l._writer;
        I !== void 0 && Rs(I);
      }
      function Vc(l, s) {
        l._inFlightCloseRequest._reject(s), l._inFlightCloseRequest = void 0, l._pendingAbortRequest !== void 0 && (l._pendingAbortRequest._reject(s), l._pendingAbortRequest = void 0), Ft(l, s);
      }
      function Ii(l) {
        return !(l._closeRequest === void 0 && l._inFlightCloseRequest === void 0);
      }
      function pc(l) {
        return !(l._inFlightWriteRequest === void 0 && l._inFlightCloseRequest === void 0);
      }
      function Tc(l) {
        l._inFlightCloseRequest = l._closeRequest, l._closeRequest = void 0;
      }
      function wc(l) {
        l._inFlightWriteRequest = l._writeRequests.shift();
      }
      function Gt(l) {
        l._closeRequest !== void 0 && (l._closeRequest._reject(l._storedError), l._closeRequest = void 0);
        var s = l._writer;
        s !== void 0 && Qt(s, l._storedError);
      }
      function gt(l, s) {
        var I = l._writer;
        I !== void 0 && s !== l._backpressure && (s ? Oc(I) : Pt(I)), l._backpressure = s;
      }
      var oi = (
        /** @class */
        function() {
          function l(s) {
            if (dl(s, 1, "WritableStreamDefaultWriter"), Ms(s, "First parameter"), Qi(s))
              throw new TypeError("This stream has already been locked for exclusive writing by another writer");
            this._ownerWritableStream = s, s._writer = this;
            var I = s._state;
            if (I === "writable")
              !Ii(s) && s._backpressure ? Lt(this) : Ss(this), Yt(this);
            else if (I === "erroring")
              Ht(this, s._storedError), Yt(this);
            else if (I === "closed")
              Ss(this), Fc(this);
            else {
              var E = s._storedError;
              Ht(this, E), rs(this, E);
            }
          }
          return Object.defineProperty(l.prototype, "closed", {
            /**
             * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or
             * the writer’s lock is released before the stream finishes closing.
             */
            get: function() {
              return Fi(this) ? this._closedPromise : e(Ui("closed"));
            },
            enumerable: !1,
            configurable: !0
          }), Object.defineProperty(l.prototype, "desiredSize", {
            /**
             * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.
             * A producer can use this information to determine the right amount of data to write.
             *
             * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort
             * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when
             * the writer’s lock is released.
             */
            get: function() {
              if (!Fi(this))
                throw Ui("desiredSize");
              if (this._ownerWritableStream === void 0)
                throw it("desiredSize");
              return Sc(this);
            },
            enumerable: !1,
            configurable: !0
          }), Object.defineProperty(l.prototype, "ready", {
            /**
             * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions
             * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips
             * back to zero or below, the getter will return a new promise that stays pending until the next transition.
             *
             * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become
             * rejected.
             */
            get: function() {
              return Fi(this) ? this._readyPromise : e(Ui("ready"));
            },
            enumerable: !1,
            configurable: !0
          }), l.prototype.abort = function(s) {
            return s === void 0 && (s = void 0), Fi(this) ? this._ownerWritableStream === void 0 ? e(it("abort")) : zc(this, s) : e(Ui("abort"));
          }, l.prototype.close = function() {
            if (!Fi(this))
              return e(Ui("close"));
            var s = this._ownerWritableStream;
            return s === void 0 ? e(it("close")) : Ii(s) ? e(new TypeError("Cannot close an already-closing stream")) : Xs(this);
          }, l.prototype.releaseLock = function() {
            if (!Fi(this))
              throw Ui("releaseLock");
            var s = this._ownerWritableStream;
            s !== void 0 && os(this);
          }, l.prototype.write = function(s) {
            return s === void 0 && (s = void 0), Fi(this) ? this._ownerWritableStream === void 0 ? e(it("write to")) : Vs(this, s) : e(Ui("write"));
          }, l;
        }()
      );
      Object.defineProperties(oi.prototype, {
        abort: { enumerable: !0 },
        close: { enumerable: !0 },
        releaseLock: { enumerable: !0 },
        write: { enumerable: !0 },
        closed: { enumerable: !0 },
        desiredSize: { enumerable: !0 },
        ready: { enumerable: !0 }
      }), V(oi.prototype.abort, "abort"), V(oi.prototype.close, "close"), V(oi.prototype.releaseLock, "releaseLock"), V(oi.prototype.write, "write"), typeof t.toStringTag == "symbol" && Object.defineProperty(oi.prototype, t.toStringTag, {
        value: "WritableStreamDefaultWriter",
        configurable: !0
      });
      function Fi(l) {
        return !x(l) || !Object.prototype.hasOwnProperty.call(l, "_ownerWritableStream") ? !1 : l instanceof oi;
      }
      function zc(l, s) {
        var I = l._ownerWritableStream;
        return ht(I, s);
      }
      function Xs(l) {
        var s = l._ownerWritableStream;
        return Ls(s);
      }
      function rc(l) {
        var s = l._ownerWritableStream, I = s._state;
        return Ii(s) || I === "closed" ? u(void 0) : I === "errored" ? e(s._storedError) : Xs(l);
      }
      function Rc(l, s) {
        l._closedPromiseState === "pending" ? Qt(l, s) : Uc(l, s);
      }
      function ys(l, s) {
        l._readyPromiseState === "pending" ? Cs(l, s) : gc(l, s);
      }
      function Sc(l) {
        var s = l._ownerWritableStream, I = s._state;
        return I === "errored" || I === "erroring" ? null : I === "closed" ? 0 : ws(s._writableStreamController);
      }
      function os(l) {
        var s = l._ownerWritableStream, I = new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");
        ys(l, I), Rc(l, I), s._writer = void 0, l._ownerWritableStream = void 0;
      }
      function Vs(l, s) {
        var I = l._ownerWritableStream, E = I._writableStreamController, _ = xc(E, s);
        if (I !== l._ownerWritableStream)
          return e(it("write to"));
        var tl = I._state;
        if (tl === "errored")
          return e(I._storedError);
        if (Ii(I) || tl === "closed")
          return e(new TypeError("The stream is closing or closed and cannot be written to"));
        if (tl === "erroring")
          return e(I._storedError);
        var Wl = Lc(I);
        return Jc(E, s, _), Wl;
      }
      var ps = {}, Hi = (
        /** @class */
        function() {
          function l() {
            throw new TypeError("Illegal constructor");
          }
          return Object.defineProperty(l.prototype, "abortReason", {
            /**
             * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.
             *
             * @deprecated
             *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.
             *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.
             */
            get: function() {
              if (!Kt(this))
                throw vt("abortReason");
              return this._abortReason;
            },
            enumerable: !1,
            configurable: !0
          }), Object.defineProperty(l.prototype, "signal", {
            /**
             * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.
             */
            get: function() {
              if (!Kt(this))
                throw vt("signal");
              if (this._abortController === void 0)
                throw new TypeError("WritableStreamDefaultController.prototype.signal is not supported");
              return this._abortController.signal;
            },
            enumerable: !1,
            configurable: !0
          }), l.prototype.error = function(s) {
            if (s === void 0 && (s = void 0), !Kt(this))
              throw vt("error");
            var I = this._controlledWritableStream._state;
            I === "writable" && zs(this, s);
          }, l.prototype[A] = function(s) {
            var I = this._abortAlgorithm(s);
            return Nt(this), I;
          }, l.prototype[H] = function() {
            ei(this);
          }, l;
        }()
      );
      Object.defineProperties(Hi.prototype, {
        abortReason: { enumerable: !0 },
        signal: { enumerable: !0 },
        error: { enumerable: !0 }
      }), typeof t.toStringTag == "symbol" && Object.defineProperty(Hi.prototype, t.toStringTag, {
        value: "WritableStreamDefaultController",
        configurable: !0
      });
      function Kt(l) {
        return !x(l) || !Object.prototype.hasOwnProperty.call(l, "_controlledWritableStream") ? !1 : l instanceof Hi;
      }
      function Ts(l, s, I, E, _, tl, Wl, Tl) {
        s._controlledWritableStream = l, l._writableStreamController = s, s._queue = void 0, s._queueTotalSize = void 0, ei(s), s._abortReason = void 0, s._abortController = Ic(), s._started = !1, s._strategySizeAlgorithm = Tl, s._strategyHWM = Wl, s._writeAlgorithm = E, s._closeAlgorithm = _, s._abortAlgorithm = tl;
        var Rl = Et(s);
        gt(l, Rl);
        var pl = I(), Ul = u(pl);
        d(Ul, function() {
          return s._started = !0, Mt(s), null;
        }, function(vl) {
          return s._started = !0, Ft(l, vl), null;
        });
      }
      function Cc(l, s, I, E) {
        var _ = Object.create(Hi.prototype), tl, Wl, Tl, Rl;
        s.start !== void 0 ? tl = function() {
          return s.start(_);
        } : tl = function() {
        }, s.write !== void 0 ? Wl = function(pl) {
          return s.write(pl, _);
        } : Wl = function() {
          return u(void 0);
        }, s.close !== void 0 ? Tl = function() {
          return s.close();
        } : Tl = function() {
          return u(void 0);
        }, s.abort !== void 0 ? Rl = function(pl) {
          return s.abort(pl);
        } : Rl = function() {
          return u(void 0);
        }, Ts(l, _, tl, Wl, Tl, Rl, I, E);
      }
      function Nt(l) {
        l._writeAlgorithm = void 0, l._closeAlgorithm = void 0, l._abortAlgorithm = void 0, l._strategySizeAlgorithm = void 0;
      }
      function Dc(l) {
        Gi(l, ps, 0), Mt(l);
      }
      function xc(l, s) {
        try {
          return l._strategySizeAlgorithm(s);
        } catch (I) {
          return lt(l, I), 1;
        }
      }
      function ws(l) {
        return l._strategyHWM - l._queueTotalSize;
      }
      function Jc(l, s, I) {
        try {
          Gi(l, s, I);
        } catch (tl) {
          lt(l, tl);
          return;
        }
        var E = l._controlledWritableStream;
        if (!Ii(E) && E._state === "writable") {
          var _ = Et(l);
          gt(E, _);
        }
        Mt(l);
      }
      function Mt(l) {
        var s = l._controlledWritableStream;
        if (l._started && s._inFlightWriteRequest === void 0) {
          var I = s._state;
          if (I === "erroring") {
            Ot(s);
            return;
          }
          if (l._queue.length !== 0) {
            var E = Ti(l);
            E === ps ? kc(l) : jc(l, E);
          }
        }
      }
      function lt(l, s) {
        l._controlledWritableStream._state === "writable" && zs(l, s);
      }
      function kc(l) {
        var s = l._controlledWritableStream;
        Tc(s), li(l);
        var I = l._closeAlgorithm();
        Nt(l), d(I, function() {
          return oc(s), null;
        }, function(E) {
          return Vc(s, E), null;
        });
      }
      function jc(l, s) {
        var I = l._controlledWritableStream;
        wc(I);
        var E = l._writeAlgorithm(s);
        d(E, function() {
          Xc(I);
          var _ = I._state;
          if (li(l), !Ii(I) && _ === "writable") {
            var tl = Et(l);
            gt(I, tl);
          }
          return Mt(l), null;
        }, function(_) {
          return I._state === "writable" && Nt(l), yc(I, _), null;
        });
      }
      function Et(l) {
        var s = ws(l);
        return s <= 0;
      }
      function zs(l, s) {
        var I = l._controlledWritableStream;
        Nt(l), Ut(I, s);
      }
      function It(l) {
        return new TypeError("WritableStream.prototype.".concat(l, " can only be used on a WritableStream"));
      }
      function vt(l) {
        return new TypeError("WritableStreamDefaultController.prototype.".concat(l, " can only be used on a WritableStreamDefaultController"));
      }
      function Ui(l) {
        return new TypeError("WritableStreamDefaultWriter.prototype.".concat(l, " can only be used on a WritableStreamDefaultWriter"));
      }
      function it(l) {
        return new TypeError("Cannot " + l + " a stream using a released writer");
      }
      function Yt(l) {
        l._closedPromise = J(function(s, I) {
          l._closedPromise_resolve = s, l._closedPromise_reject = I, l._closedPromiseState = "pending";
        });
      }
      function rs(l, s) {
        Yt(l), Qt(l, s);
      }
      function Fc(l) {
        Yt(l), Rs(l);
      }
      function Qt(l, s) {
        l._closedPromise_reject !== void 0 && (r(l._closedPromise), l._closedPromise_reject(s), l._closedPromise_resolve = void 0, l._closedPromise_reject = void 0, l._closedPromiseState = "rejected");
      }
      function Uc(l, s) {
        rs(l, s);
      }
      function Rs(l) {
        l._closedPromise_resolve !== void 0 && (l._closedPromise_resolve(void 0), l._closedPromise_resolve = void 0, l._closedPromise_reject = void 0, l._closedPromiseState = "resolved");
      }
      function Lt(l) {
        l._readyPromise = J(function(s, I) {
          l._readyPromise_resolve = s, l._readyPromise_reject = I;
        }), l._readyPromiseState = "pending";
      }
      function Ht(l, s) {
        Lt(l), Cs(l, s);
      }
      function Ss(l) {
        Lt(l), Pt(l);
      }
      function Cs(l, s) {
        l._readyPromise_reject !== void 0 && (r(l._readyPromise), l._readyPromise_reject(s), l._readyPromise_resolve = void 0, l._readyPromise_reject = void 0, l._readyPromiseState = "rejected");
      }
      function Oc(l) {
        Lt(l);
      }
      function gc(l, s) {
        Ht(l, s);
      }
      function Pt(l) {
        l._readyPromise_resolve !== void 0 && (l._readyPromise_resolve(void 0), l._readyPromise_resolve = void 0, l._readyPromise_reject = void 0, l._readyPromiseState = "fulfilled");
      }
      function Kc() {
        if (typeof globalThis < "u")
          return globalThis;
        if (typeof self < "u")
          return self;
        if (typeof commonjsGlobal < "u")
          return commonjsGlobal;
      }
      var Bt = Kc();
      function Ec(l) {
        if (!(typeof l == "function" || typeof l == "object") || l.name !== "DOMException")
          return !1;
        try {
          return new l(), !0;
        } catch {
          return !1;
        }
      }
      function vc() {
        var l = Bt == null ? void 0 : Bt.DOMException;
        return Ec(l) ? l : void 0;
      }
      function Qc() {
        var l = function(I, E) {
          this.message = I || "", this.name = E || "Error", Error.captureStackTrace && Error.captureStackTrace(this, this.constructor);
        };
        return V(l, "DOMException"), l.prototype = Object.create(Error.prototype), Object.defineProperty(l.prototype, "constructor", { value: l, writable: !0, configurable: !0 }), l;
      }
      var Hc = vc() || Qc();
      function Ds(l, s, I, E, _, tl) {
        var Wl = Vl(l), Tl = Is(s);
        l._disturbed = !0;
        var Rl = !1, pl = u(void 0);
        return J(function(Ul, vl) {
          var Ql;
          if (tl !== void 0) {
            if (Ql = function() {
              var gl = tl.reason !== void 0 ? tl.reason : new Hc("Aborted", "AbortError"), _l = [];
              E || _l.push(function() {
                return s._state === "writable" ? ht(s, gl) : u(void 0);
              }), _ || _l.push(function() {
                return l._state === "readable" ? Mi(l, gl) : u(void 0);
              }), ui(function() {
                return Promise.all(_l.map(function(ti) {
                  return ti();
                }));
              }, !0, gl);
            }, tl.aborted) {
              Ql();
              return;
            }
            tl.addEventListener("abort", Ql);
          }
          function di() {
            return J(function(gl, _l) {
              function ti(Xi) {
                Xi ? gl() : m(ni(), ti, _l);
              }
              ti(!1);
            });
          }
          function ni() {
            return Rl ? u(!0) : m(Tl._readyPromise, function() {
              return J(function(gl, _l) {
                cl(Wl, {
                  _chunkSteps: function(ti) {
                    pl = m(Vs(Tl, ti), void 0, M), gl(!1);
                  },
                  _closeSteps: function() {
                    return gl(!0);
                  },
                  _errorSteps: _l
                });
              });
            });
          }
          if (bi(l, Wl._closedPromise, function(gl) {
            return E ? pi(!0, gl) : ui(function() {
              return ht(s, gl);
            }, !0, gl), null;
          }), bi(s, Tl._closedPromise, function(gl) {
            return _ ? pi(!0, gl) : ui(function() {
              return Mi(l, gl);
            }, !0, gl), null;
          }), Li(l, Wl._closedPromise, function() {
            return I ? pi() : ui(function() {
              return rc(Tl);
            }), null;
          }), Ii(s) || s._state === "closed") {
            var hi = new TypeError("the destination writable stream closed before all data could be piped to it");
            _ ? pi(!0, hi) : ui(function() {
              return Mi(l, hi);
            }, !0, hi);
          }
          r(di());
          function Yi() {
            var gl = pl;
            return m(pl, function() {
              return gl !== pl ? Yi() : void 0;
            });
          }
          function bi(gl, _l, ti) {
            gl._state === "errored" ? ti(gl._storedError) : N(_l, ti);
          }
          function Li(gl, _l, ti) {
            gl._state === "closed" ? ti() : b(_l, ti);
          }
          function ui(gl, _l, ti) {
            if (Rl)
              return;
            Rl = !0, s._state === "writable" && !Ii(s) ? b(Yi(), Xi) : Xi();
            function Xi() {
              return d(gl(), function() {
                return ii(_l, ti);
              }, function(Ci) {
                return ii(!0, Ci);
              }), null;
            }
          }
          function pi(gl, _l) {
            Rl || (Rl = !0, s._state === "writable" && !Ii(s) ? b(Yi(), function() {
              return ii(gl, _l);
            }) : ii(gl, _l));
          }
          function ii(gl, _l) {
            return os(Tl), Ml(Wl), tl !== void 0 && tl.removeEventListener("abort", Ql), gl ? vl(_l) : Ul(void 0), null;
          }
        });
      }
      var Vi = (
        /** @class */
        function() {
          function l() {
            throw new TypeError("Illegal constructor");
          }
          return Object.defineProperty(l.prototype, "desiredSize", {
            /**
             * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is
             * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.
             */
            get: function() {
              if (!Xt(this))
                throw ot("desiredSize");
              return ft(this);
            },
            enumerable: !1,
            configurable: !0
          }), l.prototype.close = function() {
            if (!Xt(this))
              throw ot("close");
            if (!Bi(this))
              throw new TypeError("The stream is not in a state that permits close");
            Oi(this);
          }, l.prototype.enqueue = function(s) {
            if (s === void 0 && (s = void 0), !Xt(this))
              throw ot("enqueue");
            if (!Bi(this))
              throw new TypeError("The stream is not in a state that permits enqueue");
            return Pi(this, s);
          }, l.prototype.error = function(s) {
            if (s === void 0 && (s = void 0), !Xt(this))
              throw ot("error");
            Ni(this, s);
          }, l.prototype[O] = function(s) {
            ei(this);
            var I = this._cancelAlgorithm(s);
            return yt(this), I;
          }, l.prototype[U] = function(s) {
            var I = this._controlledReadableStream;
            if (this._queue.length > 0) {
              var E = li(this);
              this._closeRequested && this._queue.length === 0 ? (yt(this), ct(I)) : tt(this), s._chunkSteps(E);
            } else
              Dl(I, s), tt(this);
          }, l.prototype[k] = function() {
          }, l;
        }()
      );
      Object.defineProperties(Vi.prototype, {
        close: { enumerable: !0 },
        enqueue: { enumerable: !0 },
        error: { enumerable: !0 },
        desiredSize: { enumerable: !0 }
      }), V(Vi.prototype.close, "close"), V(Vi.prototype.enqueue, "enqueue"), V(Vi.prototype.error, "error"), typeof t.toStringTag == "symbol" && Object.defineProperty(Vi.prototype, t.toStringTag, {
        value: "ReadableStreamDefaultController",
        configurable: !0
      });
      function Xt(l) {
        return !x(l) || !Object.prototype.hasOwnProperty.call(l, "_controlledReadableStream") ? !1 : l instanceof Vi;
      }
      function tt(l) {
        var s = xs(l);
        if (s) {
          if (l._pulling) {
            l._pullAgain = !0;
            return;
          }
          l._pulling = !0;
          var I = l._pullAlgorithm();
          d(I, function() {
            return l._pulling = !1, l._pullAgain && (l._pullAgain = !1, tt(l)), null;
          }, function(E) {
            return Ni(l, E), null;
          });
        }
      }
      function xs(l) {
        var s = l._controlledReadableStream;
        if (!Bi(l) || !l._started)
          return !1;
        if (Ri(s) && Hl(s) > 0)
          return !0;
        var I = ft(l);
        return I > 0;
      }
      function yt(l) {
        l._pullAlgorithm = void 0, l._cancelAlgorithm = void 0, l._strategySizeAlgorithm = void 0;
      }
      function Oi(l) {
        if (Bi(l)) {
          var s = l._controlledReadableStream;
          l._closeRequested = !0, l._queue.length === 0 && (yt(l), ct(s));
        }
      }
      function Pi(l, s) {
        if (Bi(l)) {
          var I = l._controlledReadableStream;
          if (Ri(I) && Hl(I) > 0)
            Xl(I, s, !1);
          else {
            var E = void 0;
            try {
              E = l._strategySizeAlgorithm(s);
            } catch (_) {
              throw Ni(l, _), _;
            }
            try {
              Gi(l, s, E);
            } catch (_) {
              throw Ni(l, _), _;
            }
          }
          tt(l);
        }
      }
      function Ni(l, s) {
        var I = l._controlledReadableStream;
        I._state === "readable" && (ei(l), yt(l), Fs(I, s));
      }
      function ft(l) {
        var s = l._controlledReadableStream._state;
        return s === "errored" ? null : s === "closed" ? 0 : l._strategyHWM - l._queueTotalSize;
      }
      function Pc(l) {
        return !xs(l);
      }
      function Bi(l) {
        var s = l._controlledReadableStream._state;
        return !l._closeRequested && s === "readable";
      }
      function Js(l, s, I, E, _, tl, Wl) {
        s._controlledReadableStream = l, s._queue = void 0, s._queueTotalSize = void 0, ei(s), s._started = !1, s._closeRequested = !1, s._pullAgain = !1, s._pulling = !1, s._strategySizeAlgorithm = Wl, s._strategyHWM = tl, s._pullAlgorithm = E, s._cancelAlgorithm = _, l._readableStreamController = s;
        var Tl = I();
        d(u(Tl), function() {
          return s._started = !0, tt(s), null;
        }, function(Rl) {
          return Ni(s, Rl), null;
        });
      }
      function Bc(l, s, I, E) {
        var _ = Object.create(Vi.prototype), tl, Wl, Tl;
        s.start !== void 0 ? tl = function() {
          return s.start(_);
        } : tl = function() {
        }, s.pull !== void 0 ? Wl = function() {
          return s.pull(_);
        } : Wl = function() {
          return u(void 0);
        }, s.cancel !== void 0 ? Tl = function(Rl) {
          return s.cancel(Rl);
        } : Tl = function() {
          return u(void 0);
        }, Js(l, _, tl, Wl, Tl, I, E);
      }
      function ot(l) {
        return new TypeError("ReadableStreamDefaultController.prototype.".concat(l, " can only be used on a ReadableStreamDefaultController"));
      }
      function fc(l, s) {
        return Ji(l._readableStreamController) ? _c(l) : Ac(l);
      }
      function Ac(l, s) {
        var I = Vl(l), E = !1, _ = !1, tl = !1, Wl = !1, Tl, Rl, pl, Ul, vl, Ql = J(function(bi) {
          vl = bi;
        });
        function di() {
          if (E)
            return _ = !0, u(void 0);
          E = !0;
          var bi = {
            _chunkSteps: function(Li) {
              j(function() {
                _ = !1;
                var ui = Li, pi = Li;
                tl || Pi(pl._readableStreamController, ui), Wl || Pi(Ul._readableStreamController, pi), E = !1, _ && di();
              });
            },
            _closeSteps: function() {
              E = !1, tl || Oi(pl._readableStreamController), Wl || Oi(Ul._readableStreamController), (!tl || !Wl) && vl(void 0);
            },
            _errorSteps: function() {
              E = !1;
            }
          };
          return cl(I, bi), u(void 0);
        }
        function ni(bi) {
          if (tl = !0, Tl = bi, Wl) {
            var Li = nl([Tl, Rl]), ui = Mi(l, Li);
            vl(ui);
          }
          return Ql;
        }
        function hi(bi) {
          if (Wl = !0, Rl = bi, tl) {
            var Li = nl([Tl, Rl]), ui = Mi(l, Li);
            vl(ui);
          }
          return Ql;
        }
        function Yi() {
        }
        return pl = st(Yi, di, ni), Ul = st(Yi, di, hi), N(I._closedPromise, function(bi) {
          return Ni(pl._readableStreamController, bi), Ni(Ul._readableStreamController, bi), (!tl || !Wl) && vl(void 0), null;
        }), [pl, Ul];
      }
      function _c(l) {
        var s = Vl(l), I = !1, E = !1, _ = !1, tl = !1, Wl = !1, Tl, Rl, pl, Ul, vl, Ql = J(function(ii) {
          vl = ii;
        });
        function di(ii) {
          N(ii._closedPromise, function(gl) {
            return ii !== s || (Wi(pl._readableStreamController, gl), Wi(Ul._readableStreamController, gl), (!tl || !Wl) && vl(void 0)), null;
          });
        }
        function ni() {
          ji(s) && (Ml(s), s = Vl(l), di(s));
          var ii = {
            _chunkSteps: function(gl) {
              j(function() {
                E = !1, _ = !1;
                var _l = gl, ti = gl;
                if (!tl && !Wl)
                  try {
                    ti = Zi(gl);
                  } catch (Xi) {
                    Wi(pl._readableStreamController, Xi), Wi(Ul._readableStreamController, Xi), vl(Mi(l, Xi));
                    return;
                  }
                tl || at(pl._readableStreamController, _l), Wl || at(Ul._readableStreamController, ti), I = !1, E ? Yi() : _ && bi();
              });
            },
            _closeSteps: function() {
              I = !1, tl || _i(pl._readableStreamController), Wl || _i(Ul._readableStreamController), pl._readableStreamController._pendingPullIntos.length > 0 && et(pl._readableStreamController, 0), Ul._readableStreamController._pendingPullIntos.length > 0 && et(Ul._readableStreamController, 0), (!tl || !Wl) && vl(void 0);
            },
            _errorSteps: function() {
              I = !1;
            }
          };
          cl(s, ii);
        }
        function hi(ii, gl) {
          ol(s) && (Ml(s), s = us(l), di(s));
          var _l = gl ? Ul : pl, ti = gl ? pl : Ul, Xi = {
            _chunkSteps: function(Ci) {
              j(function() {
                E = !1, _ = !1;
                var Ai = gl ? Wl : tl, dt = gl ? tl : Wl;
                if (dt)
                  Ai || mt(_l._readableStreamController, Ci);
                else {
                  var _s = void 0;
                  try {
                    _s = Zi(Ci);
                  } catch (ls) {
                    Wi(_l._readableStreamController, ls), Wi(ti._readableStreamController, ls), vl(Mi(l, ls));
                    return;
                  }
                  Ai || mt(_l._readableStreamController, Ci), at(ti._readableStreamController, _s);
                }
                I = !1, E ? Yi() : _ && bi();
              });
            },
            _closeSteps: function(Ci) {
              I = !1;
              var Ai = gl ? Wl : tl, dt = gl ? tl : Wl;
              Ai || _i(_l._readableStreamController), dt || _i(ti._readableStreamController), Ci !== void 0 && (Ai || mt(_l._readableStreamController, Ci), !dt && ti._readableStreamController._pendingPullIntos.length > 0 && et(ti._readableStreamController, 0)), (!Ai || !dt) && vl(void 0);
            },
            _errorSteps: function() {
              I = !1;
            }
          };
          Gs(s, ii, 1, Xi);
        }
        function Yi() {
          if (I)
            return E = !0, u(void 0);
          I = !0;
          var ii = Jt(pl._readableStreamController);
          return ii === null ? ni() : hi(ii._view, !1), u(void 0);
        }
        function bi() {
          if (I)
            return _ = !0, u(void 0);
          I = !0;
          var ii = Jt(Ul._readableStreamController);
          return ii === null ? ni() : hi(ii._view, !0), u(void 0);
        }
        function Li(ii) {
          if (tl = !0, Tl = ii, Wl) {
            var gl = nl([Tl, Rl]), _l = Mi(l, gl);
            vl(_l);
          }
          return Ql;
        }
        function ui(ii) {
          if (Wl = !0, Rl = ii, tl) {
            var gl = nl([Tl, Rl]), _l = Mi(l, gl);
            vl(_l);
          }
          return Ql;
        }
        function pi() {
        }
        return pl = js(pi, Yi, Li), Ul = js(pi, bi, ui), di(s), [pl, Ul];
      }
      function qc(l) {
        return x(l) && typeof l.getReader < "u";
      }
      function $c(l) {
        return qc(l) ? id(l.getReader()) : ld(l);
      }
      function ld(l) {
        var s, I = Ll(l, "async"), E = M;
        function _() {
          var Wl;
          try {
            Wl = rl(I);
          } catch (Rl) {
            return e(Rl);
          }
          var Tl = u(Wl);
          return G(Tl, function(Rl) {
            if (!x(Rl))
              throw new TypeError("The promise returned by the iterator.next() method must fulfill with an object");
            var pl = Fl(Rl);
            if (pl)
              Oi(s._readableStreamController);
            else {
              var Ul = Kl(Rl);
              Pi(s._readableStreamController, Ul);
            }
          });
        }
        function tl(Wl) {
          var Tl = I.iterator, Rl;
          try {
            Rl = jl(Tl, "return");
          } catch (vl) {
            return e(vl);
          }
          if (Rl === void 0)
            return u(void 0);
          var pl;
          try {
            pl = D(Rl, Tl, [Wl]);
          } catch (vl) {
            return e(vl);
          }
          var Ul = u(pl);
          return G(Ul, function(vl) {
            if (!x(vl))
              throw new TypeError("The promise returned by the iterator.return() method must fulfill with an object");
          });
        }
        return s = st(E, _, tl, 0), s;
      }
      function id(l) {
        var s, I = M;
        function E() {
          var tl;
          try {
            tl = l.read();
          } catch (Wl) {
            return e(Wl);
          }
          return G(tl, function(Wl) {
            if (!x(Wl))
              throw new TypeError("The promise returned by the reader.read() method must fulfill with an object");
            if (Wl.done)
              Oi(s._readableStreamController);
            else {
              var Tl = Wl.value;
              Pi(s._readableStreamController, Tl);
            }
          });
        }
        function _(tl) {
          try {
            return u(l.cancel(tl));
          } catch (Wl) {
            return e(Wl);
          }
        }
        return s = st(I, E, _, 0), s;
      }
      function td(l, s) {
        F(l, s);
        var I = l, E = I == null ? void 0 : I.autoAllocateChunkSize, _ = I == null ? void 0 : I.cancel, tl = I == null ? void 0 : I.pull, Wl = I == null ? void 0 : I.start, Tl = I == null ? void 0 : I.type;
        return {
          autoAllocateChunkSize: E === void 0 ? void 0 : Yl(E, "".concat(s, " has member 'autoAllocateChunkSize' that")),
          cancel: _ === void 0 ? void 0 : sd(_, I, "".concat(s, " has member 'cancel' that")),
          pull: tl === void 0 ? void 0 : cd(tl, I, "".concat(s, " has member 'pull' that")),
          start: Wl === void 0 ? void 0 : dd(Wl, I, "".concat(s, " has member 'start' that")),
          type: Tl === void 0 ? void 0 : Zd(Tl, "".concat(s, " has member 'type' that"))
        };
      }
      function sd(l, s, I) {
        return v(l, I), function(E) {
          return f(l, s, [E]);
        };
      }
      function cd(l, s, I) {
        return v(l, I), function(E) {
          return f(l, s, [E]);
        };
      }
      function dd(l, s, I) {
        return v(l, I), function(E) {
          return D(l, s, [E]);
        };
      }
      function Zd(l, s) {
        if (l = "".concat(l), l !== "bytes")
          throw new TypeError("".concat(s, " '").concat(l, "' is not a valid enumeration value for ReadableStreamType"));
        return l;
      }
      function bd(l, s) {
        F(l, s);
        var I = l == null ? void 0 : l.preventCancel;
        return { preventCancel: !!I };
      }
      function ks(l, s) {
        F(l, s);
        var I = l == null ? void 0 : l.preventAbort, E = l == null ? void 0 : l.preventCancel, _ = l == null ? void 0 : l.preventClose, tl = l == null ? void 0 : l.signal;
        return tl !== void 0 && ad(tl, "".concat(s, " has member 'signal' that")), {
          preventAbort: !!I,
          preventCancel: !!E,
          preventClose: !!_,
          signal: tl
        };
      }
      function ad(l, s) {
        if (!Nc(l))
          throw new TypeError("".concat(s, " is not an AbortSignal."));
      }
      function ed(l, s) {
        F(l, s);
        var I = l == null ? void 0 : l.readable;
        el(I, "readable", "ReadableWritablePair"), yl(I, "".concat(s, " has member 'readable' that"));
        var E = l == null ? void 0 : l.writable;
        return el(E, "writable", "ReadableWritablePair"), Ms(E, "".concat(s, " has member 'writable' that")), { readable: I, writable: E };
      }
      var ai = (
        /** @class */
        function() {
          function l(s, I) {
            s === void 0 && (s = {}), I === void 0 && (I = {}), s === void 0 ? s = null : il(s, "First parameter");
            var E = Wt(I, "Second parameter"), _ = td(s, "First parameter");
            if (At(this), _.type === "bytes") {
              if (E.size !== void 0)
                throw new RangeError("The strategy for a byte stream cannot have a size function");
              var tl = $i(E, 0);
              sc(this, _, tl);
            } else {
              var Wl = ut(E), tl = $i(E, 1);
              Bc(this, _, tl, Wl);
            }
          }
          return Object.defineProperty(l.prototype, "locked", {
            /**
             * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.
             */
            get: function() {
              if (!ri(this))
                throw gi("locked");
              return Ri(this);
            },
            enumerable: !1,
            configurable: !0
          }), l.prototype.cancel = function(s) {
            return s === void 0 && (s = void 0), ri(this) ? Ri(this) ? e(new TypeError("Cannot cancel a stream that already has a reader")) : Mi(this, s) : e(gi("cancel"));
          }, l.prototype.getReader = function(s) {
            if (s === void 0 && (s = void 0), !ri(this))
              throw gi("getReader");
            var I = dc(s, "First parameter");
            return I.mode === void 0 ? Vl(this) : us(this);
          }, l.prototype.pipeThrough = function(s, I) {
            if (I === void 0 && (I = {}), !ri(this))
              throw gi("pipeThrough");
            dl(s, 1, "pipeThrough");
            var E = ed(s, "First parameter"), _ = ks(I, "Second parameter");
            if (Ri(this))
              throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");
            if (Qi(E.writable))
              throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");
            var tl = Ds(this, E.writable, _.preventClose, _.preventAbort, _.preventCancel, _.signal);
            return r(tl), E.readable;
          }, l.prototype.pipeTo = function(s, I) {
            if (I === void 0 && (I = {}), !ri(this))
              return e(gi("pipeTo"));
            if (s === void 0)
              return e("Parameter 1 is required in 'pipeTo'.");
            if (!vi(s))
              return e(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream"));
            var E;
            try {
              E = ks(I, "Second parameter");
            } catch (_) {
              return e(_);
            }
            return Ri(this) ? e(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream")) : Qi(s) ? e(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream")) : Ds(this, s, E.preventClose, E.preventAbort, E.preventCancel, E.signal);
          }, l.prototype.tee = function() {
            if (!ri(this))
              throw gi("tee");
            var s = fc(this);
            return nl(s);
          }, l.prototype.values = function(s) {
            if (s === void 0 && (s = void 0), !ri(this))
              throw gi("values");
            var I = bd(s, "First parameter");
            return si(this, I.preventCancel);
          }, l.prototype[Zl] = function(s) {
            return this.values(s);
          }, l.from = function(s) {
            return $c(s);
          }, l;
        }()
      );
      Object.defineProperties(ai, {
        from: { enumerable: !0 }
      }), Object.defineProperties(ai.prototype, {
        cancel: { enumerable: !0 },
        getReader: { enumerable: !0 },
        pipeThrough: { enumerable: !0 },
        pipeTo: { enumerable: !0 },
        tee: { enumerable: !0 },
        values: { enumerable: !0 },
        locked: { enumerable: !0 }
      }), V(ai.from, "from"), V(ai.prototype.cancel, "cancel"), V(ai.prototype.getReader, "getReader"), V(ai.prototype.pipeThrough, "pipeThrough"), V(ai.prototype.pipeTo, "pipeTo"), V(ai.prototype.tee, "tee"), V(ai.prototype.values, "values"), typeof t.toStringTag == "symbol" && Object.defineProperty(ai.prototype, t.toStringTag, {
        value: "ReadableStream",
        configurable: !0
      }), Object.defineProperty(ai.prototype, Zl, {
        value: ai.prototype.values,
        writable: !0,
        configurable: !0
      });
      function st(l, s, I, E, _) {
        E === void 0 && (E = 1), _ === void 0 && (_ = function() {
          return 1;
        });
        var tl = Object.create(ai.prototype);
        At(tl);
        var Wl = Object.create(Vi.prototype);
        return Js(tl, Wl, l, s, I, E, _), tl;
      }
      function js(l, s, I) {
        var E = Object.create(ai.prototype);
        At(E);
        var _ = Object.create(yi.prototype);
        return ns(E, _, l, s, I, 0, void 0), E;
      }
      function At(l) {
        l._state = "readable", l._reader = void 0, l._storedError = void 0, l._disturbed = !1;
      }
      function ri(l) {
        return !x(l) || !Object.prototype.hasOwnProperty.call(l, "_readableStreamController") ? !1 : l instanceof ai;
      }
      function Ri(l) {
        return l._reader !== void 0;
      }
      function Mi(l, s) {
        if (l._disturbed = !0, l._state === "closed")
          return u(void 0);
        if (l._state === "errored")
          return e(l._storedError);
        ct(l);
        var I = l._reader;
        if (I !== void 0 && ji(I)) {
          var E = I._readIntoRequests;
          I._readIntoRequests = new B(), E.forEach(function(tl) {
            tl._closeSteps(void 0);
          });
        }
        var _ = l._readableStreamController[O](s);
        return G(_, M);
      }
      function ct(l) {
        l._state = "closed";
        var s = l._reader;
        if (s !== void 0 && (a(s), ol(s))) {
          var I = s._readRequests;
          s._readRequests = new B(), I.forEach(function(E) {
            E._closeSteps();
          });
        }
      }
      function Fs(l, s) {
        l._state = "errored", l._storedError = s;
        var I = l._reader;
        I !== void 0 && (g(I, s), ol(I) ? Jl(I, s) : Ns(I, s));
      }
      function gi(l) {
        return new TypeError("ReadableStream.prototype.".concat(l, " can only be used on a ReadableStream"));
      }
      function Us(l, s) {
        F(l, s);
        var I = l == null ? void 0 : l.highWaterMark;
        return el(I, "highWaterMark", "QueuingStrategyInit"), {
          highWaterMark: bl(I)
        };
      }
      var Os = function(l) {
        return l.byteLength;
      };
      V(Os, "size");
      var Vt = (
        /** @class */
        function() {
          function l(s) {
            dl(s, 1, "ByteLengthQueuingStrategy"), s = Us(s, "First parameter"), this._byteLengthQueuingStrategyHighWaterMark = s.highWaterMark;
          }
          return Object.defineProperty(l.prototype, "highWaterMark", {
            /**
             * Returns the high water mark provided to the constructor.
             */
            get: function() {
              if (!Ks(this))
                throw gs("highWaterMark");
              return this._byteLengthQueuingStrategyHighWaterMark;
            },
            enumerable: !1,
            configurable: !0
          }), Object.defineProperty(l.prototype, "size", {
            /**
             * Measures the size of `chunk` by returning the value of its `byteLength` property.
             */
            get: function() {
              if (!Ks(this))
                throw gs("size");
              return Os;
            },
            enumerable: !1,
            configurable: !0
          }), l;
        }()
      );
      Object.defineProperties(Vt.prototype, {
        highWaterMark: { enumerable: !0 },
        size: { enumerable: !0 }
      }), typeof t.toStringTag == "symbol" && Object.defineProperty(Vt.prototype, t.toStringTag, {
        value: "ByteLengthQueuingStrategy",
        configurable: !0
      });
      function gs(l) {
        return new TypeError("ByteLengthQueuingStrategy.prototype.".concat(l, " can only be used on a ByteLengthQueuingStrategy"));
      }
      function Ks(l) {
        return !x(l) || !Object.prototype.hasOwnProperty.call(l, "_byteLengthQueuingStrategyHighWaterMark") ? !1 : l instanceof Vt;
      }
      var Es = function() {
        return 1;
      };
      V(Es, "size");
      var pt = (
        /** @class */
        function() {
          function l(s) {
            dl(s, 1, "CountQueuingStrategy"), s = Us(s, "First parameter"), this._countQueuingStrategyHighWaterMark = s.highWaterMark;
          }
          return Object.defineProperty(l.prototype, "highWaterMark", {
            /**
             * Returns the high water mark provided to the constructor.
             */
            get: function() {
              if (!Qs(this))
                throw vs("highWaterMark");
              return this._countQueuingStrategyHighWaterMark;
            },
            enumerable: !1,
            configurable: !0
          }), Object.defineProperty(l.prototype, "size", {
            /**
             * Measures the size of `chunk` by always returning 1.
             * This ensures that the total queue size is a count of the number of chunks in the queue.
             */
            get: function() {
              if (!Qs(this))
                throw vs("size");
              return Es;
            },
            enumerable: !1,
            configurable: !0
          }), l;
        }()
      );
      Object.defineProperties(pt.prototype, {
        highWaterMark: { enumerable: !0 },
        size: { enumerable: !0 }
      }), typeof t.toStringTag == "symbol" && Object.defineProperty(pt.prototype, t.toStringTag, {
        value: "CountQueuingStrategy",
        configurable: !0
      });
      function vs(l) {
        return new TypeError("CountQueuingStrategy.prototype.".concat(l, " can only be used on a CountQueuingStrategy"));
      }
      function Qs(l) {
        return !x(l) || !Object.prototype.hasOwnProperty.call(l, "_countQueuingStrategyHighWaterMark") ? !1 : l instanceof pt;
      }
      function md(l, s) {
        F(l, s);
        var I = l == null ? void 0 : l.cancel, E = l == null ? void 0 : l.flush, _ = l == null ? void 0 : l.readableType, tl = l == null ? void 0 : l.start, Wl = l == null ? void 0 : l.transform, Tl = l == null ? void 0 : l.writableType;
        return {
          cancel: I === void 0 ? void 0 : hd(I, l, "".concat(s, " has member 'cancel' that")),
          flush: E === void 0 ? void 0 : nd(E, l, "".concat(s, " has member 'flush' that")),
          readableType: _,
          start: tl === void 0 ? void 0 : ud(tl, l, "".concat(s, " has member 'start' that")),
          transform: Wl === void 0 ? void 0 : Wd(Wl, l, "".concat(s, " has member 'transform' that")),
          writableType: Tl
        };
      }
      function nd(l, s, I) {
        return v(l, I), function(E) {
          return f(l, s, [E]);
        };
      }
      function ud(l, s, I) {
        return v(l, I), function(E) {
          return D(l, s, [E]);
        };
      }
      function Wd(l, s, I) {
        return v(l, I), function(E, _) {
          return f(l, s, [E, _]);
        };
      }
      function hd(l, s, I) {
        return v(l, I), function(E) {
          return f(l, s, [E]);
        };
      }
      var Tt = (
        /** @class */
        function() {
          function l(s, I, E) {
            s === void 0 && (s = {}), I === void 0 && (I = {}), E === void 0 && (E = {}), s === void 0 && (s = null);
            var _ = Wt(I, "Second parameter"), tl = Wt(E, "Third parameter"), Wl = md(s, "First parameter");
            if (Wl.readableType !== void 0)
              throw new RangeError("Invalid readableType specified");
            if (Wl.writableType !== void 0)
              throw new RangeError("Invalid writableType specified");
            var Tl = $i(tl, 0), Rl = ut(tl), pl = $i(_, 1), Ul = ut(_), vl, Ql = J(function(di) {
              vl = di;
            });
            Gd(this, Ql, pl, Ul, Tl, Rl), Md(this, Wl), Wl.start !== void 0 ? vl(Wl.start(this._transformStreamController)) : vl(void 0);
          }
          return Object.defineProperty(l.prototype, "readable", {
            /**
             * The readable side of the transform stream.
             */
            get: function() {
              if (!Hs(this))
                throw As("readable");
              return this._readable;
            },
            enumerable: !1,
            configurable: !0
          }), Object.defineProperty(l.prototype, "writable", {
            /**
             * The writable side of the transform stream.
             */
            get: function() {
              if (!Hs(this))
                throw As("writable");
              return this._writable;
            },
            enumerable: !1,
            configurable: !0
          }), l;
        }()
      );
      Object.defineProperties(Tt.prototype, {
        readable: { enumerable: !0 },
        writable: { enumerable: !0 }
      }), typeof t.toStringTag == "symbol" && Object.defineProperty(Tt.prototype, t.toStringTag, {
        value: "TransformStream",
        configurable: !0
      });
      function Gd(l, s, I, E, _, tl) {
        function Wl() {
          return s;
        }
        function Tl(Ql) {
          return Ld(l, Ql);
        }
        function Rl(Ql) {
          return Xd(l, Ql);
        }
        function pl() {
          return yd(l);
        }
        l._writable = Yc(Wl, Tl, pl, Rl, I, E);
        function Ul() {
          return od(l);
        }
        function vl(Ql) {
          return Vd(l, Ql);
        }
        l._readable = st(Wl, Ul, vl, _, tl), l._backpressure = void 0, l._backpressureChangePromise = void 0, l._backpressureChangePromise_resolve = void 0, wt(l, !0), l._transformStreamController = void 0;
      }
      function Hs(l) {
        return !x(l) || !Object.prototype.hasOwnProperty.call(l, "_transformStreamController") ? !1 : l instanceof Tt;
      }
      function Ps(l, s) {
        Ni(l._readable._readableStreamController, s), _t(l, s);
      }
      function _t(l, s) {
        rt(l._transformStreamController), lt(l._writable._writableStreamController, s), qt(l);
      }
      function qt(l) {
        l._backpressure && wt(l, !1);
      }
      function wt(l, s) {
        l._backpressureChangePromise !== void 0 && l._backpressureChangePromise_resolve(), l._backpressureChangePromise = J(function(I) {
          l._backpressureChangePromise_resolve = I;
        }), l._backpressure = s;
      }
      var Si = (
        /** @class */
        function() {
          function l() {
            throw new TypeError("Illegal constructor");
          }
          return Object.defineProperty(l.prototype, "desiredSize", {
            /**
             * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.
             */
            get: function() {
              if (!zt(this))
                throw Rt("desiredSize");
              var s = this._controlledTransformStream._readable._readableStreamController;
              return ft(s);
            },
            enumerable: !1,
            configurable: !0
          }), l.prototype.enqueue = function(s) {
            if (s === void 0 && (s = void 0), !zt(this))
              throw Rt("enqueue");
            Bs(this, s);
          }, l.prototype.error = function(s) {
            if (s === void 0 && (s = void 0), !zt(this))
              throw Rt("error");
            Id(this, s);
          }, l.prototype.terminate = function() {
            if (!zt(this))
              throw Rt("terminate");
            Yd(this);
          }, l;
        }()
      );
      Object.defineProperties(Si.prototype, {
        enqueue: { enumerable: !0 },
        error: { enumerable: !0 },
        terminate: { enumerable: !0 },
        desiredSize: { enumerable: !0 }
      }), V(Si.prototype.enqueue, "enqueue"), V(Si.prototype.error, "error"), V(Si.prototype.terminate, "terminate"), typeof t.toStringTag == "symbol" && Object.defineProperty(Si.prototype, t.toStringTag, {
        value: "TransformStreamDefaultController",
        configurable: !0
      });
      function zt(l) {
        return !x(l) || !Object.prototype.hasOwnProperty.call(l, "_controlledTransformStream") ? !1 : l instanceof Si;
      }
      function Nd(l, s, I, E, _) {
        s._controlledTransformStream = l, l._transformStreamController = s, s._transformAlgorithm = I, s._flushAlgorithm = E, s._cancelAlgorithm = _, s._finishPromise = void 0, s._finishPromise_resolve = void 0, s._finishPromise_reject = void 0;
      }
      function Md(l, s) {
        var I = Object.create(Si.prototype), E, _, tl;
        s.transform !== void 0 ? E = function(Wl) {
          return s.transform(Wl, I);
        } : E = function(Wl) {
          try {
            return Bs(I, Wl), u(void 0);
          } catch (Tl) {
            return e(Tl);
          }
        }, s.flush !== void 0 ? _ = function() {
          return s.flush(I);
        } : _ = function() {
          return u(void 0);
        }, s.cancel !== void 0 ? tl = function(Wl) {
          return s.cancel(Wl);
        } : tl = function() {
          return u(void 0);
        }, Nd(l, I, E, _, tl);
      }
      function rt(l) {
        l._transformAlgorithm = void 0, l._flushAlgorithm = void 0, l._cancelAlgorithm = void 0;
      }
      function Bs(l, s) {
        var I = l._controlledTransformStream, E = I._readable._readableStreamController;
        if (!Bi(E))
          throw new TypeError("Readable side is not in a state that permits enqueue");
        try {
          Pi(E, s);
        } catch (tl) {
          throw _t(I, tl), I._readable._storedError;
        }
        var _ = Pc(E);
        _ !== I._backpressure && wt(I, !0);
      }
      function Id(l, s) {
        Ps(l._controlledTransformStream, s);
      }
      function fs(l, s) {
        var I = l._transformAlgorithm(s);
        return G(I, void 0, function(E) {
          throw Ps(l._controlledTransformStream, E), E;
        });
      }
      function Yd(l) {
        var s = l._controlledTransformStream, I = s._readable._readableStreamController;
        Oi(I);
        var E = new TypeError("TransformStream terminated");
        _t(s, E);
      }
      function Ld(l, s) {
        var I = l._transformStreamController;
        if (l._backpressure) {
          var E = l._backpressureChangePromise;
          return G(E, function() {
            var _ = l._writable, tl = _._state;
            if (tl === "erroring")
              throw _._storedError;
            return fs(I, s);
          });
        }
        return fs(I, s);
      }
      function Xd(l, s) {
        var I = l._transformStreamController;
        if (I._finishPromise !== void 0)
          return I._finishPromise;
        var E = l._readable;
        I._finishPromise = J(function(tl, Wl) {
          I._finishPromise_resolve = tl, I._finishPromise_reject = Wl;
        });
        var _ = I._cancelAlgorithm(s);
        return rt(I), d(_, function() {
          return E._state === "errored" ? fi(I, E._storedError) : (Ni(E._readableStreamController, s), $t(I)), null;
        }, function(tl) {
          return Ni(E._readableStreamController, tl), fi(I, tl), null;
        }), I._finishPromise;
      }
      function yd(l) {
        var s = l._transformStreamController;
        if (s._finishPromise !== void 0)
          return s._finishPromise;
        var I = l._readable;
        s._finishPromise = J(function(_, tl) {
          s._finishPromise_resolve = _, s._finishPromise_reject = tl;
        });
        var E = s._flushAlgorithm();
        return rt(s), d(E, function() {
          return I._state === "errored" ? fi(s, I._storedError) : (Oi(I._readableStreamController), $t(s)), null;
        }, function(_) {
          return Ni(I._readableStreamController, _), fi(s, _), null;
        }), s._finishPromise;
      }
      function od(l) {
        return wt(l, !1), l._backpressureChangePromise;
      }
      function Vd(l, s) {
        var I = l._transformStreamController;
        if (I._finishPromise !== void 0)
          return I._finishPromise;
        var E = l._writable;
        I._finishPromise = J(function(tl, Wl) {
          I._finishPromise_resolve = tl, I._finishPromise_reject = Wl;
        });
        var _ = I._cancelAlgorithm(s);
        return rt(I), d(_, function() {
          return E._state === "errored" ? fi(I, E._storedError) : (lt(E._writableStreamController, s), qt(l), $t(I)), null;
        }, function(tl) {
          return lt(E._writableStreamController, tl), qt(l), fi(I, tl), null;
        }), I._finishPromise;
      }
      function Rt(l) {
        return new TypeError("TransformStreamDefaultController.prototype.".concat(l, " can only be used on a TransformStreamDefaultController"));
      }
      function $t(l) {
        l._finishPromise_resolve !== void 0 && (l._finishPromise_resolve(), l._finishPromise_resolve = void 0, l._finishPromise_reject = void 0);
      }
      function fi(l, s) {
        l._finishPromise_reject !== void 0 && (r(l._finishPromise), l._finishPromise_reject(s), l._finishPromise_resolve = void 0, l._finishPromise_reject = void 0);
      }
      function As(l) {
        return new TypeError("TransformStream.prototype.".concat(l, " can only be used on a TransformStream"));
      }
      i.ByteLengthQueuingStrategy = Vt, i.CountQueuingStrategy = pt, i.ReadableByteStreamController = yi, i.ReadableStream = ai, i.ReadableStreamBYOBReader = wi, i.ReadableStreamBYOBRequest = mi, i.ReadableStreamDefaultController = Vi, i.ReadableStreamDefaultReader = Sl, i.TransformStream = Tt, i.TransformStreamDefaultController = Si, i.WritableStream = zi, i.WritableStreamDefaultController = Hi, i.WritableStreamDefaultWriter = oi;
    });
  }(ponyfill, ponyfill.exports)), ponyfill.exports;
}
const __viteBrowserExternal = {}, __viteBrowserExternal$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: __viteBrowserExternal
}, Symbol.toStringTag, { value: "Module" })), require$$7 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal$1);
(function(module, exports) {
  (function(c, i) {
    module.exports = i();
  })(globalThis, () => (
    /******/
    (() => {
      var __webpack_modules__ = [
        ,
        /* 1 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.VerbosityLevel = c.Util = c.UnknownErrorException = c.UnexpectedResponseException = c.UNSUPPORTED_FEATURES = c.TextRenderingMode = c.StreamType = c.RenderingIntentFlag = c.PermissionFlag = c.PasswordResponses = c.PasswordException = c.PageActionEventType = c.OPS = c.MissingPDFException = c.LINE_FACTOR = c.LINE_DESCENT_FACTOR = c.InvalidPDFException = c.ImageKind = c.IDENTITY_MATRIX = c.FormatError = c.FontType = c.FeatureTest = c.FONT_IDENTITY_MATRIX = c.DocumentActionEventType = c.CMapCompressionType = c.BaseException = c.AnnotationType = c.AnnotationStateModelType = c.AnnotationReviewState = c.AnnotationReplyType = c.AnnotationMode = c.AnnotationMarkedState = c.AnnotationFlag = c.AnnotationFieldFlag = c.AnnotationEditorType = c.AnnotationEditorPrefix = c.AnnotationEditorParamsType = c.AnnotationBorderStyleType = c.AnnotationActionEventType = c.AbortException = void 0, c.arrayByteLength = dl, c.arraysToBytes = el, c.assert = wl, c.bytesToString = $, c.createPromiseCapability = kl, c.createValidAbsoluteUrl = T, c.escapeString = Sl, c.getModificationDate = zl, c.getVerbosityLevel = k, c.info = q, c.isArrayBuffer = fl, c.isArrayEqual = Nl, c.isAscii = ol, c.objectFromMap = Gl, c.objectSize = ml, c.setVerbosityLevel = U, c.shadow = w, c.string32 = bl, c.stringToBytes = il, c.stringToPDFString = Al, c.stringToUTF16BEString = cl, c.stringToUTF8String = Il, c.unreachable = Ml, c.utf8StringToString = Jl, c.warn = al, i(2);
          const t = [1, 0, 0, 1, 0, 0];
          c.IDENTITY_MATRIX = t;
          const Z = [1e-3, 0, 0, 1e-3, 0, 0];
          c.FONT_IDENTITY_MATRIX = Z;
          const W = 1.35;
          c.LINE_FACTOR = W;
          const y = 0.35;
          c.LINE_DESCENT_FACTOR = y;
          const h = {
            ANY: 1,
            DISPLAY: 2,
            PRINT: 4,
            ANNOTATIONS_FORMS: 16,
            ANNOTATIONS_STORAGE: 32,
            ANNOTATIONS_DISABLE: 64,
            OPLIST: 256
          };
          c.RenderingIntentFlag = h;
          const p = {
            DISABLE: 0,
            ENABLE: 1,
            ENABLE_FORMS: 2,
            ENABLE_STORAGE: 3
          };
          c.AnnotationMode = p;
          const X = "pdfjs_internal_editor_";
          c.AnnotationEditorPrefix = X;
          const M = {
            DISABLE: -1,
            NONE: 0,
            FREETEXT: 3,
            INK: 15
          };
          c.AnnotationEditorType = M;
          const x = {
            FREETEXT_SIZE: 1,
            FREETEXT_COLOR: 2,
            FREETEXT_OPACITY: 3,
            INK_COLOR: 11,
            INK_THICKNESS: 12,
            INK_OPACITY: 13
          };
          c.AnnotationEditorParamsType = x;
          const n = {
            PRINT: 4,
            MODIFY_CONTENTS: 8,
            COPY: 16,
            MODIFY_ANNOTATIONS: 32,
            FILL_INTERACTIVE_FORMS: 256,
            COPY_FOR_ACCESSIBILITY: 512,
            ASSEMBLE: 1024,
            PRINT_HIGH_QUALITY: 2048
          };
          c.PermissionFlag = n;
          const V = {
            FILL: 0,
            STROKE: 1,
            FILL_STROKE: 2,
            INVISIBLE: 3,
            FILL_ADD_TO_PATH: 4,
            STROKE_ADD_TO_PATH: 5,
            FILL_STROKE_ADD_TO_PATH: 6,
            ADD_TO_PATH: 7,
            FILL_STROKE_MASK: 3,
            ADD_TO_PATH_FLAG: 4
          };
          c.TextRenderingMode = V;
          const S = {
            GRAYSCALE_1BPP: 1,
            RGB_24BPP: 2,
            RGBA_32BPP: 3
          };
          c.ImageKind = S;
          const o = {
            TEXT: 1,
            LINK: 2,
            FREETEXT: 3,
            LINE: 4,
            SQUARE: 5,
            CIRCLE: 6,
            POLYGON: 7,
            POLYLINE: 8,
            HIGHLIGHT: 9,
            UNDERLINE: 10,
            SQUIGGLY: 11,
            STRIKEOUT: 12,
            STAMP: 13,
            CARET: 14,
            INK: 15,
            POPUP: 16,
            FILEATTACHMENT: 17,
            SOUND: 18,
            MOVIE: 19,
            WIDGET: 20,
            SCREEN: 21,
            PRINTERMARK: 22,
            TRAPNET: 23,
            WATERMARK: 24,
            THREED: 25,
            REDACT: 26
          };
          c.AnnotationType = o;
          const R = {
            MARKED: "Marked",
            REVIEW: "Review"
          };
          c.AnnotationStateModelType = R;
          const J = {
            MARKED: "Marked",
            UNMARKED: "Unmarked"
          };
          c.AnnotationMarkedState = J;
          const u = {
            ACCEPTED: "Accepted",
            REJECTED: "Rejected",
            CANCELLED: "Cancelled",
            COMPLETED: "Completed",
            NONE: "None"
          };
          c.AnnotationReviewState = u;
          const e = {
            GROUP: "Group",
            REPLY: "R"
          };
          c.AnnotationReplyType = e;
          const m = {
            INVISIBLE: 1,
            HIDDEN: 2,
            PRINT: 4,
            NOZOOM: 8,
            NOROTATE: 16,
            NOVIEW: 32,
            READONLY: 64,
            LOCKED: 128,
            TOGGLENOVIEW: 256,
            LOCKEDCONTENTS: 512
          };
          c.AnnotationFlag = m;
          const d = {
            READONLY: 1,
            REQUIRED: 2,
            NOEXPORT: 4,
            MULTILINE: 4096,
            PASSWORD: 8192,
            NOTOGGLETOOFF: 16384,
            RADIO: 32768,
            PUSHBUTTON: 65536,
            COMBO: 131072,
            EDIT: 262144,
            SORT: 524288,
            FILESELECT: 1048576,
            MULTISELECT: 2097152,
            DONOTSPELLCHECK: 4194304,
            DONOTSCROLL: 8388608,
            COMB: 16777216,
            RICHTEXT: 33554432,
            RADIOSINUNISON: 33554432,
            COMMITONSELCHANGE: 67108864
          };
          c.AnnotationFieldFlag = d;
          const b = {
            SOLID: 1,
            DASHED: 2,
            BEVELED: 3,
            INSET: 4,
            UNDERLINE: 5
          };
          c.AnnotationBorderStyleType = b;
          const N = {
            E: "Mouse Enter",
            X: "Mouse Exit",
            D: "Mouse Down",
            U: "Mouse Up",
            Fo: "Focus",
            Bl: "Blur",
            PO: "PageOpen",
            PC: "PageClose",
            PV: "PageVisible",
            PI: "PageInvisible",
            K: "Keystroke",
            F: "Format",
            V: "Validate",
            C: "Calculate"
          };
          c.AnnotationActionEventType = N;
          const G = {
            WC: "WillClose",
            WS: "WillSave",
            DS: "DidSave",
            WP: "WillPrint",
            DP: "DidPrint"
          };
          c.DocumentActionEventType = G;
          const r = {
            O: "PageOpen",
            C: "PageClose"
          };
          c.PageActionEventType = r;
          const j = {
            UNKNOWN: "UNKNOWN",
            FLATE: "FLATE",
            LZW: "LZW",
            DCT: "DCT",
            JPX: "JPX",
            JBIG: "JBIG",
            A85: "A85",
            AHX: "AHX",
            CCF: "CCF",
            RLX: "RLX"
          };
          c.StreamType = j;
          const D = {
            UNKNOWN: "UNKNOWN",
            TYPE1: "TYPE1",
            TYPE1STANDARD: "TYPE1STANDARD",
            TYPE1C: "TYPE1C",
            CIDFONTTYPE0: "CIDFONTTYPE0",
            CIDFONTTYPE0C: "CIDFONTTYPE0C",
            TRUETYPE: "TRUETYPE",
            CIDFONTTYPE2: "CIDFONTTYPE2",
            TYPE3: "TYPE3",
            OPENTYPE: "OPENTYPE",
            TYPE0: "TYPE0",
            MMTYPE1: "MMTYPE1"
          };
          c.FontType = D;
          const f = {
            ERRORS: 0,
            WARNINGS: 1,
            INFOS: 5
          };
          c.VerbosityLevel = f;
          const P = {
            NONE: 0,
            BINARY: 1,
            STREAM: 2
          };
          c.CMapCompressionType = P;
          const B = {
            dependency: 1,
            setLineWidth: 2,
            setLineCap: 3,
            setLineJoin: 4,
            setMiterLimit: 5,
            setDash: 6,
            setRenderingIntent: 7,
            setFlatness: 8,
            setGState: 9,
            save: 10,
            restore: 11,
            transform: 12,
            moveTo: 13,
            lineTo: 14,
            curveTo: 15,
            curveTo2: 16,
            curveTo3: 17,
            closePath: 18,
            rectangle: 19,
            stroke: 20,
            closeStroke: 21,
            fill: 22,
            eoFill: 23,
            fillStroke: 24,
            eoFillStroke: 25,
            closeFillStroke: 26,
            closeEOFillStroke: 27,
            endPath: 28,
            clip: 29,
            eoClip: 30,
            beginText: 31,
            endText: 32,
            setCharSpacing: 33,
            setWordSpacing: 34,
            setHScale: 35,
            setLeading: 36,
            setFont: 37,
            setTextRenderingMode: 38,
            setTextRise: 39,
            moveText: 40,
            setLeadingMoveText: 41,
            setTextMatrix: 42,
            nextLine: 43,
            showText: 44,
            showSpacedText: 45,
            nextLineShowText: 46,
            nextLineSetSpacingShowText: 47,
            setCharWidth: 48,
            setCharWidthAndBounds: 49,
            setStrokeColorSpace: 50,
            setFillColorSpace: 51,
            setStrokeColor: 52,
            setStrokeColorN: 53,
            setFillColor: 54,
            setFillColorN: 55,
            setStrokeGray: 56,
            setFillGray: 57,
            setStrokeRGBColor: 58,
            setFillRGBColor: 59,
            setStrokeCMYKColor: 60,
            setFillCMYKColor: 61,
            shadingFill: 62,
            beginInlineImage: 63,
            beginImageData: 64,
            endInlineImage: 65,
            paintXObject: 66,
            markPoint: 67,
            markPointProps: 68,
            beginMarkedContent: 69,
            beginMarkedContentProps: 70,
            endMarkedContent: 71,
            beginCompat: 72,
            endCompat: 73,
            paintFormXObjectBegin: 74,
            paintFormXObjectEnd: 75,
            beginGroup: 76,
            endGroup: 77,
            beginAnnotations: 78,
            endAnnotations: 79,
            beginAnnotation: 80,
            endAnnotation: 81,
            paintJpegXObject: 82,
            paintImageMaskXObject: 83,
            paintImageMaskXObjectGroup: 84,
            paintImageXObject: 85,
            paintInlineImageXObject: 86,
            paintInlineImageXObjectGroup: 87,
            paintImageXObjectRepeat: 88,
            paintImageMaskXObjectRepeat: 89,
            paintSolidColorImageMask: 90,
            constructPath: 91
          };
          c.OPS = B;
          const A = {
            unknown: "unknown",
            forms: "forms",
            javaScript: "javaScript",
            signatures: "signatures",
            smask: "smask",
            shadingPattern: "shadingPattern",
            font: "font",
            errorTilingPattern: "errorTilingPattern",
            errorExtGState: "errorExtGState",
            errorXObject: "errorXObject",
            errorFontLoadType3: "errorFontLoadType3",
            errorFontState: "errorFontState",
            errorFontMissing: "errorFontMissing",
            errorFontTranslate: "errorFontTranslate",
            errorColorSpace: "errorColorSpace",
            errorOperatorList: "errorOperatorList",
            errorFontToUnicode: "errorFontToUnicode",
            errorFontLoadNative: "errorFontLoadNative",
            errorFontBuildPath: "errorFontBuildPath",
            errorFontGetPath: "errorFontGetPath",
            errorMarkedContent: "errorMarkedContent",
            errorContentSubStream: "errorContentSubStream"
          };
          c.UNSUPPORTED_FEATURES = A;
          const H = {
            NEED_PASSWORD: 1,
            INCORRECT_PASSWORD: 2
          };
          c.PasswordResponses = H;
          let O = f.WARNINGS;
          function U(nl) {
            Number.isInteger(nl) && (O = nl);
          }
          function k() {
            return O;
          }
          function q(nl) {
            O >= f.INFOS && console.log(`Info: ${nl}`);
          }
          function al(nl) {
            O >= f.WARNINGS && console.log(`Warning: ${nl}`);
          }
          function Ml(nl) {
            throw new Error(nl);
          }
          function wl(nl, ll) {
            nl || Ml(ll);
          }
          function Q(nl) {
            if (!nl)
              return !1;
            switch (nl.protocol) {
              case "http:":
              case "https:":
              case "ftp:":
              case "mailto:":
              case "tel:":
                return !0;
              default:
                return !1;
            }
          }
          function T(nl) {
            let ll = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, sl = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!nl)
              return null;
            try {
              if (sl && typeof nl == "string") {
                if (sl.addDefaultProtocol && nl.startsWith("www.")) {
                  const Cl = nl.match(/\./g);
                  Cl && Cl.length >= 2 && (nl = `http://${nl}`);
                }
                if (sl.tryConvertEncoding)
                  try {
                    nl = Il(nl);
                  } catch {
                  }
              }
              const hl = ll ? new URL(nl, ll) : new URL(nl);
              if (Q(hl))
                return hl;
            } catch {
            }
            return null;
          }
          function w(nl, ll, sl) {
            return Object.defineProperty(nl, ll, {
              value: sl,
              enumerable: !0,
              configurable: !0,
              writable: !1
            }), sl;
          }
          const g = function() {
            function ll(sl, hl) {
              this.constructor === ll && Ml("Cannot initialize BaseException."), this.message = sl, this.name = hl;
            }
            return ll.prototype = new Error(), ll.constructor = ll, ll;
          }();
          c.BaseException = g;
          class K extends g {
            constructor(ll, sl) {
              super(ll, "PasswordException"), this.code = sl;
            }
          }
          c.PasswordException = K;
          class a extends g {
            constructor(ll, sl) {
              super(ll, "UnknownErrorException"), this.details = sl;
            }
          }
          c.UnknownErrorException = a;
          class Y extends g {
            constructor(ll) {
              super(ll, "InvalidPDFException");
            }
          }
          c.InvalidPDFException = Y;
          class z extends g {
            constructor(ll) {
              super(ll, "MissingPDFException");
            }
          }
          c.MissingPDFException = z;
          class C extends g {
            constructor(ll, sl) {
              super(ll, "UnexpectedResponseException"), this.status = sl;
            }
          }
          c.UnexpectedResponseException = C;
          class F extends g {
            constructor(ll) {
              super(ll, "FormatError");
            }
          }
          c.FormatError = F;
          class v extends g {
            constructor(ll) {
              super(ll, "AbortException");
            }
          }
          c.AbortException = v;
          function $(nl) {
            (typeof nl != "object" || nl === null || nl.length === void 0) && Ml("Invalid argument for bytesToString");
            const ll = nl.length, sl = 8192;
            if (ll < sl)
              return String.fromCharCode.apply(null, nl);
            const hl = [];
            for (let Cl = 0; Cl < ll; Cl += sl) {
              const jl = Math.min(Cl + sl, ll), ul = nl.subarray(Cl, jl);
              hl.push(String.fromCharCode.apply(null, ul));
            }
            return hl.join("");
          }
          function il(nl) {
            typeof nl != "string" && Ml("Invalid argument for stringToBytes");
            const ll = nl.length, sl = new Uint8Array(ll);
            for (let hl = 0; hl < ll; ++hl)
              sl[hl] = nl.charCodeAt(hl) & 255;
            return sl;
          }
          function dl(nl) {
            if (nl.length !== void 0)
              return nl.length;
            if (nl.byteLength !== void 0)
              return nl.byteLength;
            Ml("Invalid argument for arrayByteLength");
          }
          function el(nl) {
            const ll = nl.length;
            if (ll === 1 && nl[0] instanceof Uint8Array)
              return nl[0];
            let sl = 0;
            for (let jl = 0; jl < ll; jl++)
              sl += dl(nl[jl]);
            let hl = 0;
            const Cl = new Uint8Array(sl);
            for (let jl = 0; jl < ll; jl++) {
              let ul = nl[jl];
              ul instanceof Uint8Array || (typeof ul == "string" ? ul = il(ul) : ul = new Uint8Array(ul));
              const Zl = ul.byteLength;
              Cl.set(ul, hl), hl += Zl;
            }
            return Cl;
          }
          function bl(nl) {
            return String.fromCharCode(nl >> 24 & 255, nl >> 16 & 255, nl >> 8 & 255, nl & 255);
          }
          function ml(nl) {
            return Object.keys(nl).length;
          }
          function Gl(nl) {
            const ll = /* @__PURE__ */ Object.create(null);
            for (const [sl, hl] of nl)
              ll[sl] = hl;
            return ll;
          }
          function Yl() {
            const nl = new Uint8Array(4);
            return nl[0] = 1, new Uint32Array(nl.buffer, 0, 1)[0] === 1;
          }
          function yl() {
            try {
              return new Function(""), !0;
            } catch {
              return !1;
            }
          }
          class Vl {
            static get isLittleEndian() {
              return w(this, "isLittleEndian", Yl());
            }
            static get isEvalSupported() {
              return w(this, "isEvalSupported", yl());
            }
            static get isOffscreenCanvasSupported() {
              return w(this, "isOffscreenCanvasSupported", typeof OffscreenCanvas < "u");
            }
          }
          c.FeatureTest = Vl;
          const Dl = [...Array(256).keys()].map((nl) => nl.toString(16).padStart(2, "0"));
          class Xl {
            static makeHexColor(ll, sl, hl) {
              return `#${Dl[ll]}${Dl[sl]}${Dl[hl]}`;
            }
            static scaleMinMax(ll, sl) {
              let hl;
              ll[0] ? (ll[0] < 0 && (hl = sl[0], sl[0] = sl[1], sl[1] = hl), sl[0] *= ll[0], sl[1] *= ll[0], ll[3] < 0 && (hl = sl[2], sl[2] = sl[3], sl[3] = hl), sl[2] *= ll[3], sl[3] *= ll[3]) : (hl = sl[0], sl[0] = sl[2], sl[2] = hl, hl = sl[1], sl[1] = sl[3], sl[3] = hl, ll[1] < 0 && (hl = sl[2], sl[2] = sl[3], sl[3] = hl), sl[2] *= ll[1], sl[3] *= ll[1], ll[2] < 0 && (hl = sl[0], sl[0] = sl[1], sl[1] = hl), sl[0] *= ll[2], sl[1] *= ll[2]), sl[0] += ll[4], sl[1] += ll[4], sl[2] += ll[5], sl[3] += ll[5];
            }
            static transform(ll, sl) {
              return [ll[0] * sl[0] + ll[2] * sl[1], ll[1] * sl[0] + ll[3] * sl[1], ll[0] * sl[2] + ll[2] * sl[3], ll[1] * sl[2] + ll[3] * sl[3], ll[0] * sl[4] + ll[2] * sl[5] + ll[4], ll[1] * sl[4] + ll[3] * sl[5] + ll[5]];
            }
            static applyTransform(ll, sl) {
              const hl = ll[0] * sl[0] + ll[1] * sl[2] + sl[4], Cl = ll[0] * sl[1] + ll[1] * sl[3] + sl[5];
              return [hl, Cl];
            }
            static applyInverseTransform(ll, sl) {
              const hl = sl[0] * sl[3] - sl[1] * sl[2], Cl = (ll[0] * sl[3] - ll[1] * sl[2] + sl[2] * sl[5] - sl[4] * sl[3]) / hl, jl = (-ll[0] * sl[1] + ll[1] * sl[0] + sl[4] * sl[1] - sl[5] * sl[0]) / hl;
              return [Cl, jl];
            }
            static getAxialAlignedBoundingBox(ll, sl) {
              const hl = Xl.applyTransform(ll, sl), Cl = Xl.applyTransform(ll.slice(2, 4), sl), jl = Xl.applyTransform([ll[0], ll[3]], sl), ul = Xl.applyTransform([ll[2], ll[1]], sl);
              return [Math.min(hl[0], Cl[0], jl[0], ul[0]), Math.min(hl[1], Cl[1], jl[1], ul[1]), Math.max(hl[0], Cl[0], jl[0], ul[0]), Math.max(hl[1], Cl[1], jl[1], ul[1])];
            }
            static inverseTransform(ll) {
              const sl = ll[0] * ll[3] - ll[1] * ll[2];
              return [ll[3] / sl, -ll[1] / sl, -ll[2] / sl, ll[0] / sl, (ll[2] * ll[5] - ll[4] * ll[3]) / sl, (ll[4] * ll[1] - ll[5] * ll[0]) / sl];
            }
            static apply3dTransform(ll, sl) {
              return [ll[0] * sl[0] + ll[1] * sl[1] + ll[2] * sl[2], ll[3] * sl[0] + ll[4] * sl[1] + ll[5] * sl[2], ll[6] * sl[0] + ll[7] * sl[1] + ll[8] * sl[2]];
            }
            static singularValueDecompose2dScale(ll) {
              const sl = [ll[0], ll[2], ll[1], ll[3]], hl = ll[0] * sl[0] + ll[1] * sl[2], Cl = ll[0] * sl[1] + ll[1] * sl[3], jl = ll[2] * sl[0] + ll[3] * sl[2], ul = ll[2] * sl[1] + ll[3] * sl[3], Zl = (hl + ul) / 2, Ll = Math.sqrt((hl + ul) ** 2 - 4 * (hl * ul - jl * Cl)) / 2, rl = Zl + Ll || 1, Fl = Zl - Ll || 1;
              return [Math.sqrt(rl), Math.sqrt(Fl)];
            }
            static normalizeRect(ll) {
              const sl = ll.slice(0);
              return ll[0] > ll[2] && (sl[0] = ll[2], sl[2] = ll[0]), ll[1] > ll[3] && (sl[1] = ll[3], sl[3] = ll[1]), sl;
            }
            static intersect(ll, sl) {
              const hl = Math.max(Math.min(ll[0], ll[2]), Math.min(sl[0], sl[2])), Cl = Math.min(Math.max(ll[0], ll[2]), Math.max(sl[0], sl[2]));
              if (hl > Cl)
                return null;
              const jl = Math.max(Math.min(ll[1], ll[3]), Math.min(sl[1], sl[3])), ul = Math.min(Math.max(ll[1], ll[3]), Math.max(sl[1], sl[3]));
              return jl > ul ? null : [hl, jl, Cl, ul];
            }
            static bezierBoundingBox(ll, sl, hl, Cl, jl, ul, Zl, Ll) {
              const rl = [], Fl = [[], []];
              let Kl, Ol, El, xl, Bl, si, Pl, ql;
              for (let li = 0; li < 2; ++li) {
                if (li === 0 ? (Ol = 6 * ll - 12 * hl + 6 * jl, Kl = -3 * ll + 9 * hl - 9 * jl + 3 * Zl, El = 3 * hl - 3 * ll) : (Ol = 6 * sl - 12 * Cl + 6 * ul, Kl = -3 * sl + 9 * Cl - 9 * ul + 3 * Ll, El = 3 * Cl - 3 * sl), Math.abs(Kl) < 1e-12) {
                  if (Math.abs(Ol) < 1e-12)
                    continue;
                  xl = -El / Ol, 0 < xl && xl < 1 && rl.push(xl);
                  continue;
                }
                Pl = Ol * Ol - 4 * El * Kl, ql = Math.sqrt(Pl), !(Pl < 0) && (Bl = (-Ol + ql) / (2 * Kl), 0 < Bl && Bl < 1 && rl.push(Bl), si = (-Ol - ql) / (2 * Kl), 0 < si && si < 1 && rl.push(si));
              }
              let ci = rl.length, $l;
              const Zi = ci;
              for (; ci--; )
                xl = rl[ci], $l = 1 - xl, Fl[0][ci] = $l * $l * $l * ll + 3 * $l * $l * xl * hl + 3 * $l * xl * xl * jl + xl * xl * xl * Zl, Fl[1][ci] = $l * $l * $l * sl + 3 * $l * $l * xl * Cl + 3 * $l * xl * xl * ul + xl * xl * xl * Ll;
              return Fl[0][Zi] = ll, Fl[1][Zi] = sl, Fl[0][Zi + 1] = Zl, Fl[1][Zi + 1] = Ll, Fl[0].length = Fl[1].length = Zi + 2, [Math.min(...Fl[0]), Math.min(...Fl[1]), Math.max(...Fl[0]), Math.max(...Fl[1])];
            }
          }
          c.Util = Xl;
          const Hl = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 728, 711, 710, 729, 733, 731, 730, 732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8226, 8224, 8225, 8230, 8212, 8211, 402, 8260, 8249, 8250, 8722, 8240, 8222, 8220, 8221, 8216, 8217, 8218, 8482, 64257, 64258, 321, 338, 352, 376, 381, 305, 322, 339, 353, 382, 0, 8364];
          function Al(nl) {
            if (nl[0] >= "ï") {
              let sl;
              if (nl[0] === "þ" && nl[1] === "ÿ" ? sl = "utf-16be" : nl[0] === "ÿ" && nl[1] === "þ" ? sl = "utf-16le" : nl[0] === "ï" && nl[1] === "»" && nl[2] === "¿" && (sl = "utf-8"), sl)
                try {
                  const hl = new TextDecoder(sl, {
                    fatal: !0
                  }), Cl = il(nl);
                  return hl.decode(Cl);
                } catch (hl) {
                  al(`stringToPDFString: "${hl}".`);
                }
            }
            const ll = [];
            for (let sl = 0, hl = nl.length; sl < hl; sl++) {
              const Cl = Hl[nl.charCodeAt(sl)];
              ll.push(Cl ? String.fromCharCode(Cl) : nl.charAt(sl));
            }
            return ll.join("");
          }
          function Sl(nl) {
            return nl.replace(/([()\\\n\r])/g, (ll) => ll === `
` ? "\\n" : ll === "\r" ? "\\r" : `\\${ll}`);
          }
          function ol(nl) {
            return /^[\x00-\x7F]*$/.test(nl);
          }
          function cl(nl) {
            const ll = ["þÿ"];
            for (let sl = 0, hl = nl.length; sl < hl; sl++) {
              const Cl = nl.charCodeAt(sl);
              ll.push(String.fromCharCode(Cl >> 8 & 255), String.fromCharCode(Cl & 255));
            }
            return ll.join("");
          }
          function Il(nl) {
            return decodeURIComponent(escape(nl));
          }
          function Jl(nl) {
            return unescape(encodeURIComponent(nl));
          }
          function fl(nl) {
            return typeof nl == "object" && nl !== null && nl.byteLength !== void 0;
          }
          function Nl(nl, ll) {
            if (nl.length !== ll.length)
              return !1;
            for (let sl = 0, hl = nl.length; sl < hl; sl++)
              if (nl[sl] !== ll[sl])
                return !1;
            return !0;
          }
          function zl() {
            let nl = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : /* @__PURE__ */ new Date();
            return [nl.getUTCFullYear().toString(), (nl.getUTCMonth() + 1).toString().padStart(2, "0"), nl.getUTCDate().toString().padStart(2, "0"), nl.getUTCHours().toString().padStart(2, "0"), nl.getUTCMinutes().toString().padStart(2, "0"), nl.getUTCSeconds().toString().padStart(2, "0")].join("");
          }
          function kl() {
            const nl = /* @__PURE__ */ Object.create(null);
            let ll = !1;
            return Object.defineProperty(nl, "settled", {
              get() {
                return ll;
              }
            }), nl.promise = new Promise(function(sl, hl) {
              nl.resolve = function(Cl) {
                ll = !0, sl(Cl);
              }, nl.reject = function(Cl) {
                ll = !0, hl(Cl);
              };
            }), nl;
          }
        },
        /* 2 */
        /***/
        (L, c, i) => {
          var t = i(3);
          globalThis._pdfjsCompatibilityChecked || (globalThis._pdfjsCompatibilityChecked = !0, function() {
            globalThis.btoa || !t.isNodeJS || (globalThis.btoa = function(W) {
              return Buffer.from(W, "binary").toString("base64");
            });
          }(), function() {
            globalThis.atob || !t.isNodeJS || (globalThis.atob = function(W) {
              return Buffer.from(W, "base64").toString("binary");
            });
          }(), function() {
            globalThis.DOMMatrix || !t.isNodeJS || (globalThis.DOMMatrix = requireDommatrix());
          }(), function() {
            globalThis.ReadableStream || !t.isNodeJS || (globalThis.ReadableStream = requirePonyfill().ReadableStream);
          }(), function() {
            Array.prototype.at || i(4);
          }(), function() {
            Uint8Array.prototype.at || i(76);
          }(), function() {
            globalThis.structuredClone || i(86);
          }());
        },
        /* 3 */
        /***/
        (L, c) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.isNodeJS = void 0;
          const i = typeof process == "object" && process + "" == "[object process]" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== "browser");
          c.isNodeJS = i;
        },
        /* 4 */
        /***/
        (L, c, i) => {
          i(5);
          var t = i(75);
          L.exports = t("Array", "at");
        },
        /* 5 */
        /***/
        (L, c, i) => {
          var t = i(6), Z = i(41), W = i(65), y = i(63), h = i(70);
          t({
            target: "Array",
            proto: !0
          }, {
            at: function(X) {
              var M = Z(this), x = W(M), n = y(X), V = n >= 0 ? n : x + n;
              return V < 0 || V >= x ? void 0 : M[V];
            }
          }), h("at");
        },
        /* 6 */
        /***/
        (L, c, i) => {
          var t = i(7), Z = i(8).f, W = i(45), y = i(49), h = i(39), p = i(57), X = i(69);
          L.exports = function(M, x) {
            var n = M.target, V = M.global, S = M.stat, o, R, J, u, e, m;
            if (V ? R = t : S ? R = t[n] || h(n, {}) : R = (t[n] || {}).prototype, R)
              for (J in x) {
                if (e = x[J], M.dontCallGetSet ? (m = Z(R, J), u = m && m.value) : u = R[J], o = X(V ? J : n + (S ? "." : "#") + J, M.forced), !o && u !== void 0) {
                  if (typeof e == typeof u)
                    continue;
                  p(e, u);
                }
                (M.sham || u && u.sham) && W(e, "sham", !0), y(R, J, e, M);
              }
          };
        },
        /* 7 */
        /***/
        (L) => {
          var c = function(i) {
            return i && i.Math == Math && i;
          };
          L.exports = c(typeof globalThis == "object" && globalThis) || c(typeof window == "object" && window) || c(typeof self == "object" && self) || c(typeof commonjsGlobal == "object" && commonjsGlobal) || /* @__PURE__ */ function() {
            return this;
          }() || Function("return this")();
        },
        /* 8 */
        /***/
        (L, c, i) => {
          var t = i(9), Z = i(11), W = i(13), y = i(14), h = i(15), p = i(20), X = i(40), M = i(43), x = Object.getOwnPropertyDescriptor;
          c.f = t ? x : function(V, S) {
            if (V = h(V), S = p(S), M)
              try {
                return x(V, S);
              } catch {
              }
            if (X(V, S))
              return y(!Z(W.f, V, S), V[S]);
          };
        },
        /* 9 */
        /***/
        (L, c, i) => {
          var t = i(10);
          L.exports = !t(function() {
            return Object.defineProperty({}, 1, {
              get: function() {
                return 7;
              }
            })[1] != 7;
          });
        },
        /* 10 */
        /***/
        (L) => {
          L.exports = function(c) {
            try {
              return !!c();
            } catch {
              return !0;
            }
          };
        },
        /* 11 */
        /***/
        (L, c, i) => {
          var t = i(12), Z = Function.prototype.call;
          L.exports = t ? Z.bind(Z) : function() {
            return Z.apply(Z, arguments);
          };
        },
        /* 12 */
        /***/
        (L, c, i) => {
          var t = i(10);
          L.exports = !t(function() {
            var Z = (function() {
            }).bind();
            return typeof Z != "function" || Z.hasOwnProperty("prototype");
          });
        },
        /* 13 */
        /***/
        (L, c) => {
          var i = {}.propertyIsEnumerable, t = Object.getOwnPropertyDescriptor, Z = t && !i.call({ 1: 2 }, 1);
          c.f = Z ? function(y) {
            var h = t(this, y);
            return !!h && h.enumerable;
          } : i;
        },
        /* 14 */
        /***/
        (L) => {
          L.exports = function(c, i) {
            return {
              enumerable: !(c & 1),
              configurable: !(c & 2),
              writable: !(c & 4),
              value: i
            };
          };
        },
        /* 15 */
        /***/
        (L, c, i) => {
          var t = i(16), Z = i(19);
          L.exports = function(W) {
            return t(Z(W));
          };
        },
        /* 16 */
        /***/
        (L, c, i) => {
          var t = i(17), Z = i(10), W = i(18), y = Object, h = t("".split);
          L.exports = Z(function() {
            return !y("z").propertyIsEnumerable(0);
          }) ? function(p) {
            return W(p) == "String" ? h(p, "") : y(p);
          } : y;
        },
        /* 17 */
        /***/
        (L, c, i) => {
          var t = i(12), Z = Function.prototype, W = Z.bind, y = Z.call, h = t && W.bind(y, y);
          L.exports = t ? function(p) {
            return p && h(p);
          } : function(p) {
            return p && function() {
              return y.apply(p, arguments);
            };
          };
        },
        /* 18 */
        /***/
        (L, c, i) => {
          var t = i(17), Z = t({}.toString), W = t("".slice);
          L.exports = function(y) {
            return W(Z(y), 8, -1);
          };
        },
        /* 19 */
        /***/
        (L) => {
          var c = TypeError;
          L.exports = function(i) {
            if (i == null)
              throw c("Can't call method on " + i);
            return i;
          };
        },
        /* 20 */
        /***/
        (L, c, i) => {
          var t = i(21), Z = i(24);
          L.exports = function(W) {
            var y = t(W, "string");
            return Z(y) ? y : y + "";
          };
        },
        /* 21 */
        /***/
        (L, c, i) => {
          var t = i(11), Z = i(22), W = i(24), y = i(31), h = i(34), p = i(35), X = TypeError, M = p("toPrimitive");
          L.exports = function(x, n) {
            if (!Z(x) || W(x))
              return x;
            var V = y(x, M), S;
            if (V) {
              if (n === void 0 && (n = "default"), S = t(V, x, n), !Z(S) || W(S))
                return S;
              throw X("Can't convert object to primitive value");
            }
            return n === void 0 && (n = "number"), h(x, n);
          };
        },
        /* 22 */
        /***/
        (L, c, i) => {
          var t = i(23);
          L.exports = function(Z) {
            return typeof Z == "object" ? Z !== null : t(Z);
          };
        },
        /* 23 */
        /***/
        (L) => {
          L.exports = function(c) {
            return typeof c == "function";
          };
        },
        /* 24 */
        /***/
        (L, c, i) => {
          var t = i(25), Z = i(23), W = i(26), y = i(27), h = Object;
          L.exports = y ? function(p) {
            return typeof p == "symbol";
          } : function(p) {
            var X = t("Symbol");
            return Z(X) && W(X.prototype, h(p));
          };
        },
        /* 25 */
        /***/
        (L, c, i) => {
          var t = i(7), Z = i(23), W = function(y) {
            return Z(y) ? y : void 0;
          };
          L.exports = function(y, h) {
            return arguments.length < 2 ? W(t[y]) : t[y] && t[y][h];
          };
        },
        /* 26 */
        /***/
        (L, c, i) => {
          var t = i(17);
          L.exports = t({}.isPrototypeOf);
        },
        /* 27 */
        /***/
        (L, c, i) => {
          var t = i(28);
          L.exports = t && !Symbol.sham && typeof Symbol.iterator == "symbol";
        },
        /* 28 */
        /***/
        (L, c, i) => {
          var t = i(29), Z = i(10);
          L.exports = !!Object.getOwnPropertySymbols && !Z(function() {
            var W = Symbol();
            return !String(W) || !(Object(W) instanceof Symbol) || !Symbol.sham && t && t < 41;
          });
        },
        /* 29 */
        /***/
        (L, c, i) => {
          var t = i(7), Z = i(30), W = t.process, y = t.Deno, h = W && W.versions || y && y.version, p = h && h.v8, X, M;
          p && (X = p.split("."), M = X[0] > 0 && X[0] < 4 ? 1 : +(X[0] + X[1])), !M && Z && (X = Z.match(/Edge\/(\d+)/), (!X || X[1] >= 74) && (X = Z.match(/Chrome\/(\d+)/), X && (M = +X[1]))), L.exports = M;
        },
        /* 30 */
        /***/
        (L, c, i) => {
          var t = i(25);
          L.exports = t("navigator", "userAgent") || "";
        },
        /* 31 */
        /***/
        (L, c, i) => {
          var t = i(32);
          L.exports = function(Z, W) {
            var y = Z[W];
            return y == null ? void 0 : t(y);
          };
        },
        /* 32 */
        /***/
        (L, c, i) => {
          var t = i(23), Z = i(33), W = TypeError;
          L.exports = function(y) {
            if (t(y))
              return y;
            throw W(Z(y) + " is not a function");
          };
        },
        /* 33 */
        /***/
        (L) => {
          var c = String;
          L.exports = function(i) {
            try {
              return c(i);
            } catch {
              return "Object";
            }
          };
        },
        /* 34 */
        /***/
        (L, c, i) => {
          var t = i(11), Z = i(23), W = i(22), y = TypeError;
          L.exports = function(h, p) {
            var X, M;
            if (p === "string" && Z(X = h.toString) && !W(M = t(X, h)) || Z(X = h.valueOf) && !W(M = t(X, h)) || p !== "string" && Z(X = h.toString) && !W(M = t(X, h)))
              return M;
            throw y("Can't convert object to primitive value");
          };
        },
        /* 35 */
        /***/
        (L, c, i) => {
          var t = i(7), Z = i(36), W = i(40), y = i(42), h = i(28), p = i(27), X = Z("wks"), M = t.Symbol, x = M && M.for, n = p ? M : M && M.withoutSetter || y;
          L.exports = function(V) {
            if (!W(X, V) || !(h || typeof X[V] == "string")) {
              var S = "Symbol." + V;
              h && W(M, V) ? X[V] = M[V] : p && x ? X[V] = x(S) : X[V] = n(S);
            }
            return X[V];
          };
        },
        /* 36 */
        /***/
        (L, c, i) => {
          var t = i(37), Z = i(38);
          (L.exports = function(W, y) {
            return Z[W] || (Z[W] = y !== void 0 ? y : {});
          })("versions", []).push({
            version: "3.24.1",
            mode: t ? "pure" : "global",
            copyright: "© 2014-2022 Denis Pushkarev (zloirock.ru)",
            license: "https://github.com/zloirock/core-js/blob/v3.24.1/LICENSE",
            source: "https://github.com/zloirock/core-js"
          });
        },
        /* 37 */
        /***/
        (L) => {
          L.exports = !1;
        },
        /* 38 */
        /***/
        (L, c, i) => {
          var t = i(7), Z = i(39), W = "__core-js_shared__", y = t[W] || Z(W, {});
          L.exports = y;
        },
        /* 39 */
        /***/
        (L, c, i) => {
          var t = i(7), Z = Object.defineProperty;
          L.exports = function(W, y) {
            try {
              Z(t, W, {
                value: y,
                configurable: !0,
                writable: !0
              });
            } catch {
              t[W] = y;
            }
            return y;
          };
        },
        /* 40 */
        /***/
        (L, c, i) => {
          var t = i(17), Z = i(41), W = t({}.hasOwnProperty);
          L.exports = Object.hasOwn || function(h, p) {
            return W(Z(h), p);
          };
        },
        /* 41 */
        /***/
        (L, c, i) => {
          var t = i(19), Z = Object;
          L.exports = function(W) {
            return Z(t(W));
          };
        },
        /* 42 */
        /***/
        (L, c, i) => {
          var t = i(17), Z = 0, W = Math.random(), y = t(1 .toString);
          L.exports = function(h) {
            return "Symbol(" + (h === void 0 ? "" : h) + ")_" + y(++Z + W, 36);
          };
        },
        /* 43 */
        /***/
        (L, c, i) => {
          var t = i(9), Z = i(10), W = i(44);
          L.exports = !t && !Z(function() {
            return Object.defineProperty(W("div"), "a", {
              get: function() {
                return 7;
              }
            }).a != 7;
          });
        },
        /* 44 */
        /***/
        (L, c, i) => {
          var t = i(7), Z = i(22), W = t.document, y = Z(W) && Z(W.createElement);
          L.exports = function(h) {
            return y ? W.createElement(h) : {};
          };
        },
        /* 45 */
        /***/
        (L, c, i) => {
          var t = i(9), Z = i(46), W = i(14);
          L.exports = t ? function(y, h, p) {
            return Z.f(y, h, W(1, p));
          } : function(y, h, p) {
            return y[h] = p, y;
          };
        },
        /* 46 */
        /***/
        (L, c, i) => {
          var t = i(9), Z = i(43), W = i(47), y = i(48), h = i(20), p = TypeError, X = Object.defineProperty, M = Object.getOwnPropertyDescriptor, x = "enumerable", n = "configurable", V = "writable";
          c.f = t ? W ? function(o, R, J) {
            if (y(o), R = h(R), y(J), typeof o == "function" && R === "prototype" && "value" in J && V in J && !J[V]) {
              var u = M(o, R);
              u && u[V] && (o[R] = J.value, J = {
                configurable: n in J ? J[n] : u[n],
                enumerable: x in J ? J[x] : u[x],
                writable: !1
              });
            }
            return X(o, R, J);
          } : X : function(o, R, J) {
            if (y(o), R = h(R), y(J), Z)
              try {
                return X(o, R, J);
              } catch {
              }
            if ("get" in J || "set" in J)
              throw p("Accessors not supported");
            return "value" in J && (o[R] = J.value), o;
          };
        },
        /* 47 */
        /***/
        (L, c, i) => {
          var t = i(9), Z = i(10);
          L.exports = t && Z(function() {
            return Object.defineProperty(function() {
            }, "prototype", {
              value: 42,
              writable: !1
            }).prototype != 42;
          });
        },
        /* 48 */
        /***/
        (L, c, i) => {
          var t = i(22), Z = String, W = TypeError;
          L.exports = function(y) {
            if (t(y))
              return y;
            throw W(Z(y) + " is not an object");
          };
        },
        /* 49 */
        /***/
        (L, c, i) => {
          var t = i(23), Z = i(46), W = i(50), y = i(39);
          L.exports = function(h, p, X, M) {
            M || (M = {});
            var x = M.enumerable, n = M.name !== void 0 ? M.name : p;
            if (t(X) && W(X, n, M), M.global)
              x ? h[p] = X : y(p, X);
            else {
              try {
                M.unsafe ? h[p] && (x = !0) : delete h[p];
              } catch {
              }
              x ? h[p] = X : Z.f(h, p, {
                value: X,
                enumerable: !1,
                configurable: !M.nonConfigurable,
                writable: !M.nonWritable
              });
            }
            return h;
          };
        },
        /* 50 */
        /***/
        (L, c, i) => {
          var t = i(10), Z = i(23), W = i(40), y = i(9), h = i(51).CONFIGURABLE, p = i(52), X = i(53), M = X.enforce, x = X.get, n = Object.defineProperty, V = y && !t(function() {
            return n(function() {
            }, "length", { value: 8 }).length !== 8;
          }), S = String(String).split("String"), o = L.exports = function(R, J, u) {
            String(J).slice(0, 7) === "Symbol(" && (J = "[" + String(J).replace(/^Symbol\(([^)]*)\)/, "$1") + "]"), u && u.getter && (J = "get " + J), u && u.setter && (J = "set " + J), (!W(R, "name") || h && R.name !== J) && (y ? n(R, "name", {
              value: J,
              configurable: !0
            }) : R.name = J), V && u && W(u, "arity") && R.length !== u.arity && n(R, "length", { value: u.arity });
            try {
              u && W(u, "constructor") && u.constructor ? y && n(R, "prototype", { writable: !1 }) : R.prototype && (R.prototype = void 0);
            } catch {
            }
            var e = M(R);
            return W(e, "source") || (e.source = S.join(typeof J == "string" ? J : "")), R;
          };
          Function.prototype.toString = o(function() {
            return Z(this) && x(this).source || p(this);
          }, "toString");
        },
        /* 51 */
        /***/
        (L, c, i) => {
          var t = i(9), Z = i(40), W = Function.prototype, y = t && Object.getOwnPropertyDescriptor, h = Z(W, "name"), p = h && (function() {
          }).name === "something", X = h && (!t || t && y(W, "name").configurable);
          L.exports = {
            EXISTS: h,
            PROPER: p,
            CONFIGURABLE: X
          };
        },
        /* 52 */
        /***/
        (L, c, i) => {
          var t = i(17), Z = i(23), W = i(38), y = t(Function.toString);
          Z(W.inspectSource) || (W.inspectSource = function(h) {
            return y(h);
          }), L.exports = W.inspectSource;
        },
        /* 53 */
        /***/
        (L, c, i) => {
          var t = i(54), Z = i(7), W = i(17), y = i(22), h = i(45), p = i(40), X = i(38), M = i(55), x = i(56), n = "Object already initialized", V = Z.TypeError, S = Z.WeakMap, o, R, J, u = function(r) {
            return J(r) ? R(r) : o(r, {});
          }, e = function(r) {
            return function(j) {
              var D;
              if (!y(j) || (D = R(j)).type !== r)
                throw V("Incompatible receiver, " + r + " required");
              return D;
            };
          };
          if (t || X.state) {
            var m = X.state || (X.state = new S()), d = W(m.get), b = W(m.has), N = W(m.set);
            o = function(r, j) {
              if (b(m, r))
                throw new V(n);
              return j.facade = r, N(m, r, j), j;
            }, R = function(r) {
              return d(m, r) || {};
            }, J = function(r) {
              return b(m, r);
            };
          } else {
            var G = M("state");
            x[G] = !0, o = function(r, j) {
              if (p(r, G))
                throw new V(n);
              return j.facade = r, h(r, G, j), j;
            }, R = function(r) {
              return p(r, G) ? r[G] : {};
            }, J = function(r) {
              return p(r, G);
            };
          }
          L.exports = {
            set: o,
            get: R,
            has: J,
            enforce: u,
            getterFor: e
          };
        },
        /* 54 */
        /***/
        (L, c, i) => {
          var t = i(7), Z = i(23), W = i(52), y = t.WeakMap;
          L.exports = Z(y) && /native code/.test(W(y));
        },
        /* 55 */
        /***/
        (L, c, i) => {
          var t = i(36), Z = i(42), W = t("keys");
          L.exports = function(y) {
            return W[y] || (W[y] = Z(y));
          };
        },
        /* 56 */
        /***/
        (L) => {
          L.exports = {};
        },
        /* 57 */
        /***/
        (L, c, i) => {
          var t = i(40), Z = i(58), W = i(8), y = i(46);
          L.exports = function(h, p, X) {
            for (var M = Z(p), x = y.f, n = W.f, V = 0; V < M.length; V++) {
              var S = M[V];
              !t(h, S) && !(X && t(X, S)) && x(h, S, n(p, S));
            }
          };
        },
        /* 58 */
        /***/
        (L, c, i) => {
          var t = i(25), Z = i(17), W = i(59), y = i(68), h = i(48), p = Z([].concat);
          L.exports = t("Reflect", "ownKeys") || function(M) {
            var x = W.f(h(M)), n = y.f;
            return n ? p(x, n(M)) : x;
          };
        },
        /* 59 */
        /***/
        (L, c, i) => {
          var t = i(60), Z = i(67), W = Z.concat("length", "prototype");
          c.f = Object.getOwnPropertyNames || function(h) {
            return t(h, W);
          };
        },
        /* 60 */
        /***/
        (L, c, i) => {
          var t = i(17), Z = i(40), W = i(15), y = i(61).indexOf, h = i(56), p = t([].push);
          L.exports = function(X, M) {
            var x = W(X), n = 0, V = [], S;
            for (S in x)
              !Z(h, S) && Z(x, S) && p(V, S);
            for (; M.length > n; )
              Z(x, S = M[n++]) && (~y(V, S) || p(V, S));
            return V;
          };
        },
        /* 61 */
        /***/
        (L, c, i) => {
          var t = i(15), Z = i(62), W = i(65), y = function(h) {
            return function(p, X, M) {
              var x = t(p), n = W(x), V = Z(M, n), S;
              if (h && X != X) {
                for (; n > V; )
                  if (S = x[V++], S != S)
                    return !0;
              } else
                for (; n > V; V++)
                  if ((h || V in x) && x[V] === X)
                    return h || V || 0;
              return !h && -1;
            };
          };
          L.exports = {
            includes: y(!0),
            indexOf: y(!1)
          };
        },
        /* 62 */
        /***/
        (L, c, i) => {
          var t = i(63), Z = Math.max, W = Math.min;
          L.exports = function(y, h) {
            var p = t(y);
            return p < 0 ? Z(p + h, 0) : W(p, h);
          };
        },
        /* 63 */
        /***/
        (L, c, i) => {
          var t = i(64);
          L.exports = function(Z) {
            var W = +Z;
            return W !== W || W === 0 ? 0 : t(W);
          };
        },
        /* 64 */
        /***/
        (L) => {
          var c = Math.ceil, i = Math.floor;
          L.exports = Math.trunc || function(Z) {
            var W = +Z;
            return (W > 0 ? i : c)(W);
          };
        },
        /* 65 */
        /***/
        (L, c, i) => {
          var t = i(66);
          L.exports = function(Z) {
            return t(Z.length);
          };
        },
        /* 66 */
        /***/
        (L, c, i) => {
          var t = i(63), Z = Math.min;
          L.exports = function(W) {
            return W > 0 ? Z(t(W), 9007199254740991) : 0;
          };
        },
        /* 67 */
        /***/
        (L) => {
          L.exports = [
            "constructor",
            "hasOwnProperty",
            "isPrototypeOf",
            "propertyIsEnumerable",
            "toLocaleString",
            "toString",
            "valueOf"
          ];
        },
        /* 68 */
        /***/
        (L, c) => {
          c.f = Object.getOwnPropertySymbols;
        },
        /* 69 */
        /***/
        (L, c, i) => {
          var t = i(10), Z = i(23), W = /#|\.prototype\./, y = function(x, n) {
            var V = p[h(x)];
            return V == M ? !0 : V == X ? !1 : Z(n) ? t(n) : !!n;
          }, h = y.normalize = function(x) {
            return String(x).replace(W, ".").toLowerCase();
          }, p = y.data = {}, X = y.NATIVE = "N", M = y.POLYFILL = "P";
          L.exports = y;
        },
        /* 70 */
        /***/
        (L, c, i) => {
          var t = i(35), Z = i(71), W = i(46).f, y = t("unscopables"), h = Array.prototype;
          h[y] == null && W(h, y, {
            configurable: !0,
            value: Z(null)
          }), L.exports = function(p) {
            h[y][p] = !0;
          };
        },
        /* 71 */
        /***/
        (L, c, i) => {
          var t = i(48), Z = i(72), W = i(67), y = i(56), h = i(74), p = i(44), X = i(55), M = ">", x = "<", n = "prototype", V = "script", S = X("IE_PROTO"), o = function() {
          }, R = function(d) {
            return x + V + M + d + x + "/" + V + M;
          }, J = function(d) {
            d.write(R("")), d.close();
            var b = d.parentWindow.Object;
            return d = null, b;
          }, u = function() {
            var d = p("iframe"), b = "java" + V + ":", N;
            return d.style.display = "none", h.appendChild(d), d.src = String(b), N = d.contentWindow.document, N.open(), N.write(R("document.F=Object")), N.close(), N.F;
          }, e, m = function() {
            try {
              e = new ActiveXObject("htmlfile");
            } catch {
            }
            m = typeof document < "u" ? document.domain && e ? J(e) : u() : J(e);
            for (var d = W.length; d--; )
              delete m[n][W[d]];
            return m();
          };
          y[S] = !0, L.exports = Object.create || function(b, N) {
            var G;
            return b !== null ? (o[n] = t(b), G = new o(), o[n] = null, G[S] = b) : G = m(), N === void 0 ? G : Z.f(G, N);
          };
        },
        /* 72 */
        /***/
        (L, c, i) => {
          var t = i(9), Z = i(47), W = i(46), y = i(48), h = i(15), p = i(73);
          c.f = t && !Z ? Object.defineProperties : function(M, x) {
            y(M);
            for (var n = h(x), V = p(x), S = V.length, o = 0, R; S > o; )
              W.f(M, R = V[o++], n[R]);
            return M;
          };
        },
        /* 73 */
        /***/
        (L, c, i) => {
          var t = i(60), Z = i(67);
          L.exports = Object.keys || function(y) {
            return t(y, Z);
          };
        },
        /* 74 */
        /***/
        (L, c, i) => {
          var t = i(25);
          L.exports = t("document", "documentElement");
        },
        /* 75 */
        /***/
        (L, c, i) => {
          var t = i(7), Z = i(17);
          L.exports = function(W, y) {
            return Z(t[W].prototype[y]);
          };
        },
        /* 76 */
        /***/
        (L, c, i) => {
          i(77);
        },
        /* 77 */
        /***/
        (L, c, i) => {
          var t = i(78), Z = i(65), W = i(63), y = t.aTypedArray, h = t.exportTypedArrayMethod;
          h("at", function(X) {
            var M = y(this), x = Z(M), n = W(X), V = n >= 0 ? n : x + n;
            return V < 0 || V >= x ? void 0 : M[V];
          });
        },
        /* 78 */
        /***/
        (L, c, i) => {
          var t = i(79), Z = i(9), W = i(7), y = i(23), h = i(22), p = i(40), X = i(80), M = i(33), x = i(45), n = i(49), V = i(46).f, S = i(26), o = i(82), R = i(84), J = i(35), u = i(42), e = i(53), m = e.enforce, d = e.get, b = W.Int8Array, N = b && b.prototype, G = W.Uint8ClampedArray, r = G && G.prototype, j = b && o(b), D = N && o(N), f = Object.prototype, P = W.TypeError, B = J("toStringTag"), A = u("TYPED_ARRAY_TAG"), H = "TypedArrayConstructor", O = t && !!R && X(W.opera) !== "Opera", U = !1, k, q, al, Ml = {
            Int8Array: 1,
            Uint8Array: 1,
            Uint8ClampedArray: 1,
            Int16Array: 2,
            Uint16Array: 2,
            Int32Array: 4,
            Uint32Array: 4,
            Float32Array: 4,
            Float64Array: 8
          }, wl = {
            BigInt64Array: 8,
            BigUint64Array: 8
          }, Q = function(C) {
            if (!h(C))
              return !1;
            var F = X(C);
            return F === "DataView" || p(Ml, F) || p(wl, F);
          }, T = function(z) {
            var C = o(z);
            if (h(C)) {
              var F = d(C);
              return F && p(F, H) ? F[H] : T(C);
            }
          }, w = function(z) {
            if (!h(z))
              return !1;
            var C = X(z);
            return p(Ml, C) || p(wl, C);
          }, g = function(z) {
            if (w(z))
              return z;
            throw P("Target is not a typed array");
          }, K = function(z) {
            if (y(z) && (!R || S(j, z)))
              return z;
            throw P(M(z) + " is not a typed array constructor");
          }, a = function(z, C, F, v) {
            if (Z) {
              if (F)
                for (var $ in Ml) {
                  var il = W[$];
                  if (il && p(il.prototype, z))
                    try {
                      delete il.prototype[z];
                    } catch {
                      try {
                        il.prototype[z] = C;
                      } catch {
                      }
                    }
                }
              (!D[z] || F) && n(D, z, F ? C : O && N[z] || C, v);
            }
          }, Y = function(z, C, F) {
            var v, $;
            if (Z) {
              if (R) {
                if (F) {
                  for (v in Ml)
                    if ($ = W[v], $ && p($, z))
                      try {
                        delete $[z];
                      } catch {
                      }
                }
                if (!j[z] || F)
                  try {
                    return n(j, z, F ? C : O && j[z] || C);
                  } catch {
                  }
                else
                  return;
              }
              for (v in Ml)
                $ = W[v], $ && (!$[z] || F) && n($, z, C);
            }
          };
          for (k in Ml)
            q = W[k], al = q && q.prototype, al ? m(al)[H] = q : O = !1;
          for (k in wl)
            q = W[k], al = q && q.prototype, al && (m(al)[H] = q);
          if ((!O || !y(j) || j === Function.prototype) && (j = function() {
            throw P("Incorrect invocation");
          }, O))
            for (k in Ml)
              W[k] && R(W[k], j);
          if ((!O || !D || D === f) && (D = j.prototype, O))
            for (k in Ml)
              W[k] && R(W[k].prototype, D);
          if (O && o(r) !== D && R(r, D), Z && !p(D, B)) {
            U = !0, V(D, B, {
              get: function() {
                return h(this) ? this[A] : void 0;
              }
            });
            for (k in Ml)
              W[k] && x(W[k], A, k);
          }
          L.exports = {
            NATIVE_ARRAY_BUFFER_VIEWS: O,
            TYPED_ARRAY_TAG: U && A,
            aTypedArray: g,
            aTypedArrayConstructor: K,
            exportTypedArrayMethod: a,
            exportTypedArrayStaticMethod: Y,
            getTypedArrayConstructor: T,
            isView: Q,
            isTypedArray: w,
            TypedArray: j,
            TypedArrayPrototype: D
          };
        },
        /* 79 */
        /***/
        (L) => {
          L.exports = typeof ArrayBuffer < "u" && typeof DataView < "u";
        },
        /* 80 */
        /***/
        (L, c, i) => {
          var t = i(81), Z = i(23), W = i(18), y = i(35), h = y("toStringTag"), p = Object, X = W(/* @__PURE__ */ function() {
            return arguments;
          }()) == "Arguments", M = function(x, n) {
            try {
              return x[n];
            } catch {
            }
          };
          L.exports = t ? W : function(x) {
            var n, V, S;
            return x === void 0 ? "Undefined" : x === null ? "Null" : typeof (V = M(n = p(x), h)) == "string" ? V : X ? W(n) : (S = W(n)) == "Object" && Z(n.callee) ? "Arguments" : S;
          };
        },
        /* 81 */
        /***/
        (L, c, i) => {
          var t = i(35), Z = t("toStringTag"), W = {};
          W[Z] = "z", L.exports = String(W) === "[object z]";
        },
        /* 82 */
        /***/
        (L, c, i) => {
          var t = i(40), Z = i(23), W = i(41), y = i(55), h = i(83), p = y("IE_PROTO"), X = Object, M = X.prototype;
          L.exports = h ? X.getPrototypeOf : function(x) {
            var n = W(x);
            if (t(n, p))
              return n[p];
            var V = n.constructor;
            return Z(V) && n instanceof V ? V.prototype : n instanceof X ? M : null;
          };
        },
        /* 83 */
        /***/
        (L, c, i) => {
          var t = i(10);
          L.exports = !t(function() {
            function Z() {
            }
            return Z.prototype.constructor = null, Object.getPrototypeOf(new Z()) !== Z.prototype;
          });
        },
        /* 84 */
        /***/
        (L, c, i) => {
          var t = i(17), Z = i(48), W = i(85);
          L.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
            var y = !1, h = {}, p;
            try {
              p = t(Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set), p(h, []), y = h instanceof Array;
            } catch {
            }
            return function(M, x) {
              return Z(M), W(x), y ? p(M, x) : M.__proto__ = x, M;
            };
          }() : void 0);
        },
        /* 85 */
        /***/
        (L, c, i) => {
          var t = i(23), Z = String, W = TypeError;
          L.exports = function(y) {
            if (typeof y == "object" || t(y))
              return y;
            throw W("Can't set " + Z(y) + " as a prototype");
          };
        },
        /* 86 */
        /***/
        (L, c, i) => {
          i(87), i(93), i(95), i(117), i(119);
          var t = i(128);
          L.exports = t.structuredClone;
        },
        /* 87 */
        /***/
        (L, c, i) => {
          var t = i(15), Z = i(70), W = i(88), y = i(53), h = i(46).f, p = i(89), X = i(37), M = i(9), x = "Array Iterator", n = y.set, V = y.getterFor(x);
          L.exports = p(Array, "Array", function(o, R) {
            n(this, {
              type: x,
              target: t(o),
              index: 0,
              kind: R
            });
          }, function() {
            var o = V(this), R = o.target, J = o.kind, u = o.index++;
            return !R || u >= R.length ? (o.target = void 0, {
              value: void 0,
              done: !0
            }) : J == "keys" ? {
              value: u,
              done: !1
            } : J == "values" ? {
              value: R[u],
              done: !1
            } : {
              value: [
                u,
                R[u]
              ],
              done: !1
            };
          }, "values");
          var S = W.Arguments = W.Array;
          if (Z("keys"), Z("values"), Z("entries"), !X && M && S.name !== "values")
            try {
              h(S, "name", { value: "values" });
            } catch {
            }
        },
        /* 88 */
        /***/
        (L) => {
          L.exports = {};
        },
        /* 89 */
        /***/
        (L, c, i) => {
          var t = i(6), Z = i(11), W = i(37), y = i(51), h = i(23), p = i(90), X = i(82), M = i(84), x = i(92), n = i(45), V = i(49), S = i(35), o = i(88), R = i(91), J = y.PROPER, u = y.CONFIGURABLE, e = R.IteratorPrototype, m = R.BUGGY_SAFARI_ITERATORS, d = S("iterator"), b = "keys", N = "values", G = "entries", r = function() {
            return this;
          };
          L.exports = function(j, D, f, P, B, A, H) {
            p(f, D, P);
            var O = function(g) {
              if (g === B && Ml)
                return Ml;
              if (!m && g in q)
                return q[g];
              switch (g) {
                case b:
                  return function() {
                    return new f(this, g);
                  };
                case N:
                  return function() {
                    return new f(this, g);
                  };
                case G:
                  return function() {
                    return new f(this, g);
                  };
              }
              return function() {
                return new f(this);
              };
            }, U = D + " Iterator", k = !1, q = j.prototype, al = q[d] || q["@@iterator"] || B && q[B], Ml = !m && al || O(B), wl = D == "Array" && q.entries || al, Q, T, w;
            if (wl && (Q = X(wl.call(new j())), Q !== Object.prototype && Q.next && (!W && X(Q) !== e && (M ? M(Q, e) : h(Q[d]) || V(Q, d, r)), x(Q, U, !0, !0), W && (o[U] = r))), J && B == N && al && al.name !== N && (!W && u ? n(q, "name", N) : (k = !0, Ml = function() {
              return Z(al, this);
            })), B)
              if (T = {
                values: O(N),
                keys: A ? Ml : O(b),
                entries: O(G)
              }, H)
                for (w in T)
                  (m || k || !(w in q)) && V(q, w, T[w]);
              else
                t({
                  target: D,
                  proto: !0,
                  forced: m || k
                }, T);
            return (!W || H) && q[d] !== Ml && V(q, d, Ml, { name: B }), o[D] = Ml, T;
          };
        },
        /* 90 */
        /***/
        (L, c, i) => {
          var t = i(91).IteratorPrototype, Z = i(71), W = i(14), y = i(92), h = i(88), p = function() {
            return this;
          };
          L.exports = function(X, M, x, n) {
            var V = M + " Iterator";
            return X.prototype = Z(t, { next: W(+!n, x) }), y(X, V, !1, !0), h[V] = p, X;
          };
        },
        /* 91 */
        /***/
        (L, c, i) => {
          var t = i(10), Z = i(23), W = i(71), y = i(82), h = i(49), p = i(35), X = i(37), M = p("iterator"), x = !1, n, V, S;
          [].keys && (S = [].keys(), "next" in S ? (V = y(y(S)), V !== Object.prototype && (n = V)) : x = !0);
          var o = n == null || t(function() {
            var R = {};
            return n[M].call(R) !== R;
          });
          o ? n = {} : X && (n = W(n)), Z(n[M]) || h(n, M, function() {
            return this;
          }), L.exports = {
            IteratorPrototype: n,
            BUGGY_SAFARI_ITERATORS: x
          };
        },
        /* 92 */
        /***/
        (L, c, i) => {
          var t = i(46).f, Z = i(40), W = i(35), y = W("toStringTag");
          L.exports = function(h, p, X) {
            h && !X && (h = h.prototype), h && !Z(h, y) && t(h, y, {
              configurable: !0,
              value: p
            });
          };
        },
        /* 93 */
        /***/
        (L, c, i) => {
          var t = i(81), Z = i(49), W = i(94);
          t || Z(Object.prototype, "toString", W, { unsafe: !0 });
        },
        /* 94 */
        /***/
        (L, c, i) => {
          var t = i(81), Z = i(80);
          L.exports = t ? {}.toString : function() {
            return "[object " + Z(this) + "]";
          };
        },
        /* 95 */
        /***/
        (L, c, i) => {
          i(96);
        },
        /* 96 */
        /***/
        (L, c, i) => {
          var t = i(97), Z = i(114);
          t("Map", function(W) {
            return function() {
              return W(this, arguments.length ? arguments[0] : void 0);
            };
          }, Z);
        },
        /* 97 */
        /***/
        (L, c, i) => {
          var t = i(6), Z = i(7), W = i(17), y = i(69), h = i(49), p = i(98), X = i(105), M = i(111), x = i(23), n = i(22), V = i(10), S = i(112), o = i(92), R = i(113);
          L.exports = function(J, u, e) {
            var m = J.indexOf("Map") !== -1, d = J.indexOf("Weak") !== -1, b = m ? "set" : "add", N = Z[J], G = N && N.prototype, r = N, j = {}, D = function(U) {
              var k = W(G[U]);
              h(G, U, U == "add" ? function(al) {
                return k(this, al === 0 ? 0 : al), this;
              } : U == "delete" ? function(q) {
                return d && !n(q) ? !1 : k(this, q === 0 ? 0 : q);
              } : U == "get" ? function(al) {
                return d && !n(al) ? void 0 : k(this, al === 0 ? 0 : al);
              } : U == "has" ? function(al) {
                return d && !n(al) ? !1 : k(this, al === 0 ? 0 : al);
              } : function(al, Ml) {
                return k(this, al === 0 ? 0 : al, Ml), this;
              });
            }, f = y(J, !x(N) || !(d || G.forEach && !V(function() {
              new N().entries().next();
            })));
            if (f)
              r = e.getConstructor(u, J, m, b), p.enable();
            else if (y(J, !0)) {
              var P = new r(), B = P[b](d ? {} : -0, 1) != P, A = V(function() {
                P.has(1);
              }), H = S(function(U) {
                new N(U);
              }), O = !d && V(function() {
                for (var U = new N(), k = 5; k--; )
                  U[b](k, k);
                return !U.has(-0);
              });
              H || (r = u(function(U, k) {
                M(U, G);
                var q = R(new N(), U, r);
                return k != null && X(k, q[b], {
                  that: q,
                  AS_ENTRIES: m
                }), q;
              }), r.prototype = G, G.constructor = r), (A || O) && (D("delete"), D("has"), m && D("get")), (O || B) && D(b), d && G.clear && delete G.clear;
            }
            return j[J] = r, t({
              global: !0,
              constructor: !0,
              forced: r != N
            }, j), o(r, J), d || e.setStrong(r, J, m), r;
          };
        },
        /* 98 */
        /***/
        (L, c, i) => {
          var t = i(6), Z = i(17), W = i(56), y = i(22), h = i(40), p = i(46).f, X = i(59), M = i(99), x = i(102), n = i(42), V = i(104), S = !1, o = n("meta"), R = 0, J = function(N) {
            p(N, o, {
              value: {
                objectID: "O" + R++,
                weakData: {}
              }
            });
          }, u = function(N, G) {
            if (!y(N))
              return typeof N == "symbol" ? N : (typeof N == "string" ? "S" : "P") + N;
            if (!h(N, o)) {
              if (!x(N))
                return "F";
              if (!G)
                return "E";
              J(N);
            }
            return N[o].objectID;
          }, e = function(N, G) {
            if (!h(N, o)) {
              if (!x(N))
                return !0;
              if (!G)
                return !1;
              J(N);
            }
            return N[o].weakData;
          }, m = function(N) {
            return V && S && x(N) && !h(N, o) && J(N), N;
          }, d = function() {
            b.enable = function() {
            }, S = !0;
            var N = X.f, G = Z([].splice), r = {};
            r[o] = 1, N(r).length && (X.f = function(j) {
              for (var D = N(j), f = 0, P = D.length; f < P; f++)
                if (D[f] === o) {
                  G(D, f, 1);
                  break;
                }
              return D;
            }, t({
              target: "Object",
              stat: !0,
              forced: !0
            }, { getOwnPropertyNames: M.f }));
          }, b = L.exports = {
            enable: d,
            fastKey: u,
            getWeakData: e,
            onFreeze: m
          };
          W[o] = !0;
        },
        /* 99 */
        /***/
        (L, c, i) => {
          var t = i(18), Z = i(15), W = i(59).f, y = i(100), h = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [], p = function(X) {
            try {
              return W(X);
            } catch {
              return y(h);
            }
          };
          L.exports.f = function(M) {
            return h && t(M) == "Window" ? p(M) : W(Z(M));
          };
        },
        /* 100 */
        /***/
        (L, c, i) => {
          var t = i(62), Z = i(65), W = i(101), y = Array, h = Math.max;
          L.exports = function(p, X, M) {
            for (var x = Z(p), n = t(X, x), V = t(M === void 0 ? x : M, x), S = y(h(V - n, 0)), o = 0; n < V; n++, o++)
              W(S, o, p[n]);
            return S.length = o, S;
          };
        },
        /* 101 */
        /***/
        (L, c, i) => {
          var t = i(20), Z = i(46), W = i(14);
          L.exports = function(y, h, p) {
            var X = t(h);
            X in y ? Z.f(y, X, W(0, p)) : y[X] = p;
          };
        },
        /* 102 */
        /***/
        (L, c, i) => {
          var t = i(10), Z = i(22), W = i(18), y = i(103), h = Object.isExtensible, p = t(function() {
          });
          L.exports = p || y ? function(M) {
            return !Z(M) || y && W(M) == "ArrayBuffer" ? !1 : h ? h(M) : !0;
          } : h;
        },
        /* 103 */
        /***/
        (L, c, i) => {
          var t = i(10);
          L.exports = t(function() {
            if (typeof ArrayBuffer == "function") {
              var Z = new ArrayBuffer(8);
              Object.isExtensible(Z) && Object.defineProperty(Z, "a", { value: 8 });
            }
          });
        },
        /* 104 */
        /***/
        (L, c, i) => {
          var t = i(10);
          L.exports = !t(function() {
            return Object.isExtensible(Object.preventExtensions({}));
          });
        },
        /* 105 */
        /***/
        (L, c, i) => {
          var t = i(106), Z = i(11), W = i(48), y = i(33), h = i(107), p = i(65), X = i(26), M = i(108), x = i(109), n = i(110), V = TypeError, S = function(R, J) {
            this.stopped = R, this.result = J;
          }, o = S.prototype;
          L.exports = function(R, J, u) {
            var e = u && u.that, m = !!(u && u.AS_ENTRIES), d = !!(u && u.IS_RECORD), b = !!(u && u.IS_ITERATOR), N = !!(u && u.INTERRUPTED), G = t(J, e), r, j, D, f, P, B, A, H = function(U) {
              return r && n(r, "normal", U), new S(!0, U);
            }, O = function(U) {
              return m ? (W(U), N ? G(U[0], U[1], H) : G(U[0], U[1])) : N ? G(U, H) : G(U);
            };
            if (d)
              r = R.iterator;
            else if (b)
              r = R;
            else {
              if (j = x(R), !j)
                throw V(y(R) + " is not iterable");
              if (h(j)) {
                for (D = 0, f = p(R); f > D; D++)
                  if (P = O(R[D]), P && X(o, P))
                    return P;
                return new S(!1);
              }
              r = M(R, j);
            }
            for (B = d ? R.next : r.next; !(A = Z(B, r)).done; ) {
              try {
                P = O(A.value);
              } catch (U) {
                n(r, "throw", U);
              }
              if (typeof P == "object" && P && X(o, P))
                return P;
            }
            return new S(!1);
          };
        },
        /* 106 */
        /***/
        (L, c, i) => {
          var t = i(17), Z = i(32), W = i(12), y = t(t.bind);
          L.exports = function(h, p) {
            return Z(h), p === void 0 ? h : W ? y(h, p) : function() {
              return h.apply(p, arguments);
            };
          };
        },
        /* 107 */
        /***/
        (L, c, i) => {
          var t = i(35), Z = i(88), W = t("iterator"), y = Array.prototype;
          L.exports = function(h) {
            return h !== void 0 && (Z.Array === h || y[W] === h);
          };
        },
        /* 108 */
        /***/
        (L, c, i) => {
          var t = i(11), Z = i(32), W = i(48), y = i(33), h = i(109), p = TypeError;
          L.exports = function(X, M) {
            var x = arguments.length < 2 ? h(X) : M;
            if (Z(x))
              return W(t(x, X));
            throw p(y(X) + " is not iterable");
          };
        },
        /* 109 */
        /***/
        (L, c, i) => {
          var t = i(80), Z = i(31), W = i(88), y = i(35), h = y("iterator");
          L.exports = function(p) {
            if (p != null)
              return Z(p, h) || Z(p, "@@iterator") || W[t(p)];
          };
        },
        /* 110 */
        /***/
        (L, c, i) => {
          var t = i(11), Z = i(48), W = i(31);
          L.exports = function(y, h, p) {
            var X, M;
            Z(y);
            try {
              if (X = W(y, "return"), !X) {
                if (h === "throw")
                  throw p;
                return p;
              }
              X = t(X, y);
            } catch (x) {
              M = !0, X = x;
            }
            if (h === "throw")
              throw p;
            if (M)
              throw X;
            return Z(X), p;
          };
        },
        /* 111 */
        /***/
        (L, c, i) => {
          var t = i(26), Z = TypeError;
          L.exports = function(W, y) {
            if (t(y, W))
              return W;
            throw Z("Incorrect invocation");
          };
        },
        /* 112 */
        /***/
        (L, c, i) => {
          var t = i(35), Z = t("iterator"), W = !1;
          try {
            var y = 0, h = {
              next: function() {
                return { done: !!y++ };
              },
              return: function() {
                W = !0;
              }
            };
            h[Z] = function() {
              return this;
            }, Array.from(h, function() {
              throw 2;
            });
          } catch {
          }
          L.exports = function(p, X) {
            if (!X && !W)
              return !1;
            var M = !1;
            try {
              var x = {};
              x[Z] = function() {
                return {
                  next: function() {
                    return { done: M = !0 };
                  }
                };
              }, p(x);
            } catch {
            }
            return M;
          };
        },
        /* 113 */
        /***/
        (L, c, i) => {
          var t = i(23), Z = i(22), W = i(84);
          L.exports = function(y, h, p) {
            var X, M;
            return W && t(X = h.constructor) && X !== p && Z(M = X.prototype) && M !== p.prototype && W(y, M), y;
          };
        },
        /* 114 */
        /***/
        (L, c, i) => {
          var t = i(46).f, Z = i(71), W = i(115), y = i(106), h = i(111), p = i(105), X = i(89), M = i(116), x = i(9), n = i(98).fastKey, V = i(53), S = V.set, o = V.getterFor;
          L.exports = {
            getConstructor: function(R, J, u, e) {
              var m = R(function(r, j) {
                h(r, d), S(r, {
                  type: J,
                  index: Z(null),
                  first: void 0,
                  last: void 0,
                  size: 0
                }), x || (r.size = 0), j != null && p(j, r[e], {
                  that: r,
                  AS_ENTRIES: u
                });
              }), d = m.prototype, b = o(J), N = function(r, j, D) {
                var f = b(r), P = G(r, j), B, A;
                return P ? P.value = D : (f.last = P = {
                  index: A = n(j, !0),
                  key: j,
                  value: D,
                  previous: B = f.last,
                  next: void 0,
                  removed: !1
                }, f.first || (f.first = P), B && (B.next = P), x ? f.size++ : r.size++, A !== "F" && (f.index[A] = P)), r;
              }, G = function(r, j) {
                var D = b(r), f = n(j), P;
                if (f !== "F")
                  return D.index[f];
                for (P = D.first; P; P = P.next)
                  if (P.key == j)
                    return P;
              };
              return W(d, {
                clear: function() {
                  for (var j = this, D = b(j), f = D.index, P = D.first; P; )
                    P.removed = !0, P.previous && (P.previous = P.previous.next = void 0), delete f[P.index], P = P.next;
                  D.first = D.last = void 0, x ? D.size = 0 : j.size = 0;
                },
                delete: function(r) {
                  var j = this, D = b(j), f = G(j, r);
                  if (f) {
                    var P = f.next, B = f.previous;
                    delete D.index[f.index], f.removed = !0, B && (B.next = P), P && (P.previous = B), D.first == f && (D.first = P), D.last == f && (D.last = B), x ? D.size-- : j.size--;
                  }
                  return !!f;
                },
                forEach: function(j) {
                  for (var D = b(this), f = y(j, arguments.length > 1 ? arguments[1] : void 0), P; P = P ? P.next : D.first; )
                    for (f(P.value, P.key, this); P && P.removed; )
                      P = P.previous;
                },
                has: function(j) {
                  return !!G(this, j);
                }
              }), W(d, u ? {
                get: function(j) {
                  var D = G(this, j);
                  return D && D.value;
                },
                set: function(j, D) {
                  return N(this, j === 0 ? 0 : j, D);
                }
              } : {
                add: function(j) {
                  return N(this, j = j === 0 ? 0 : j, j);
                }
              }), x && t(d, "size", {
                get: function() {
                  return b(this).size;
                }
              }), m;
            },
            setStrong: function(R, J, u) {
              var e = J + " Iterator", m = o(J), d = o(e);
              X(R, J, function(b, N) {
                S(this, {
                  type: e,
                  target: b,
                  state: m(b),
                  kind: N,
                  last: void 0
                });
              }, function() {
                for (var b = d(this), N = b.kind, G = b.last; G && G.removed; )
                  G = G.previous;
                return !b.target || !(b.last = G = G ? G.next : b.state.first) ? (b.target = void 0, {
                  value: void 0,
                  done: !0
                }) : N == "keys" ? {
                  value: G.key,
                  done: !1
                } : N == "values" ? {
                  value: G.value,
                  done: !1
                } : {
                  value: [
                    G.key,
                    G.value
                  ],
                  done: !1
                };
              }, u ? "entries" : "values", !u, !0), M(J);
            }
          };
        },
        /* 115 */
        /***/
        (L, c, i) => {
          var t = i(49);
          L.exports = function(Z, W, y) {
            for (var h in W)
              t(Z, h, W[h], y);
            return Z;
          };
        },
        /* 116 */
        /***/
        (L, c, i) => {
          var t = i(25), Z = i(46), W = i(35), y = i(9), h = W("species");
          L.exports = function(p) {
            var X = t(p), M = Z.f;
            y && X && !X[h] && M(X, h, {
              configurable: !0,
              get: function() {
                return this;
              }
            });
          };
        },
        /* 117 */
        /***/
        (L, c, i) => {
          i(118);
        },
        /* 118 */
        /***/
        (L, c, i) => {
          var t = i(97), Z = i(114);
          t("Set", function(W) {
            return function() {
              return W(this, arguments.length ? arguments[0] : void 0);
            };
          }, Z);
        },
        /* 119 */
        /***/
        (L, c, i) => {
          var t = i(37), Z = i(6), W = i(7), y = i(25), h = i(17), p = i(10), X = i(42), M = i(23), x = i(120), n = i(22), V = i(24), S = i(105), o = i(48), R = i(80), J = i(40), u = i(101), e = i(45), m = i(65), d = i(121), b = i(122), N = i(124), G = i(29), r = i(125), j = i(126), D = i(127), f = W.Object, P = W.Date, B = W.Error, A = W.EvalError, H = W.RangeError, O = W.ReferenceError, U = W.SyntaxError, k = W.TypeError, q = W.URIError, al = W.PerformanceMark, Ml = W.WebAssembly, wl = Ml && Ml.CompileError || B, Q = Ml && Ml.LinkError || B, T = Ml && Ml.RuntimeError || B, w = y("DOMException"), g = y("Set"), K = y("Map"), a = K.prototype, Y = h(a.has), z = h(a.get), C = h(a.set), F = h(g.prototype.add), v = y("Object", "keys"), $ = h([].push), il = h((!0).valueOf), dl = h(1 .valueOf), el = h("".valueOf), bl = h(P.prototype.getTime), ml = X("structuredClone"), Gl = "DataCloneError", Yl = "Transferring", yl = function(Nl) {
            return !p(function() {
              var zl = new W.Set([7]), kl = Nl(zl), nl = Nl(f(7));
              return kl == zl || !kl.has(7) || typeof nl != "object" || nl != 7;
            }) && Nl;
          }, Vl = function(Nl, zl) {
            return !p(function() {
              var kl = new zl(), nl = Nl({
                a: kl,
                b: kl
              });
              return !(nl && nl.a === nl.b && nl.a instanceof zl && nl.a.stack === kl.stack);
            });
          }, Dl = function(Nl) {
            return !p(function() {
              var zl = Nl(new W.AggregateError([1], ml, { cause: 3 }));
              return zl.name != "AggregateError" || zl.errors[0] != 1 || zl.message != ml || zl.cause != 3;
            });
          }, Xl = W.structuredClone, Hl = t || !Vl(Xl, B) || !Vl(Xl, w) || !Dl(Xl), Al = !Xl && yl(function(Nl) {
            return new al(ml, { detail: Nl }).detail;
          }), Sl = yl(Xl) || Al, ol = function(Nl) {
            throw new w("Uncloneable type: " + Nl, Gl);
          }, cl = function(Nl, zl) {
            throw new w((zl || "Cloning") + " of " + Nl + " cannot be properly polyfilled in this engine", Gl);
          }, Il = function(Nl, zl) {
            if (V(Nl) && ol("Symbol"), !n(Nl))
              return Nl;
            if (zl) {
              if (Y(zl, Nl))
                return z(zl, Nl);
            } else
              zl = new K();
            var kl = R(Nl), nl = !1, ll, sl, hl, Cl, jl, ul, Zl, Ll, rl, Fl;
            switch (kl) {
              case "Array":
                hl = [], nl = !0;
                break;
              case "Object":
                hl = {}, nl = !0;
                break;
              case "Map":
                hl = new K(), nl = !0;
                break;
              case "Set":
                hl = new g(), nl = !0;
                break;
              case "RegExp":
                hl = new RegExp(Nl.source, b(Nl));
                break;
              case "Error":
                switch (sl = Nl.name, sl) {
                  case "AggregateError":
                    hl = y("AggregateError")([]);
                    break;
                  case "EvalError":
                    hl = A();
                    break;
                  case "RangeError":
                    hl = H();
                    break;
                  case "ReferenceError":
                    hl = O();
                    break;
                  case "SyntaxError":
                    hl = U();
                    break;
                  case "TypeError":
                    hl = k();
                    break;
                  case "URIError":
                    hl = q();
                    break;
                  case "CompileError":
                    hl = wl();
                    break;
                  case "LinkError":
                    hl = Q();
                    break;
                  case "RuntimeError":
                    hl = T();
                    break;
                  default:
                    hl = B();
                }
                nl = !0;
                break;
              case "DOMException":
                hl = new w(Nl.message, Nl.name), nl = !0;
                break;
              case "DataView":
              case "Int8Array":
              case "Uint8Array":
              case "Uint8ClampedArray":
              case "Int16Array":
              case "Uint16Array":
              case "Int32Array":
              case "Uint32Array":
              case "Float32Array":
              case "Float64Array":
              case "BigInt64Array":
              case "BigUint64Array":
                ll = W[kl], n(ll) || cl(kl), hl = new ll(Il(Nl.buffer, zl), Nl.byteOffset, kl === "DataView" ? Nl.byteLength : Nl.length);
                break;
              case "DOMQuad":
                try {
                  hl = new DOMQuad(Il(Nl.p1, zl), Il(Nl.p2, zl), Il(Nl.p3, zl), Il(Nl.p4, zl));
                } catch {
                  Sl ? hl = Sl(Nl) : cl(kl);
                }
                break;
              case "FileList":
                if (ll = W.DataTransfer, x(ll)) {
                  for (Cl = new ll(), jl = 0, ul = m(Nl); jl < ul; jl++)
                    Cl.items.add(Il(Nl[jl], zl));
                  hl = Cl.files;
                } else Sl ? hl = Sl(Nl) : cl(kl);
                break;
              case "ImageData":
                try {
                  hl = new ImageData(Il(Nl.data, zl), Nl.width, Nl.height, { colorSpace: Nl.colorSpace });
                } catch {
                  Sl ? hl = Sl(Nl) : cl(kl);
                }
                break;
              default:
                if (Sl)
                  hl = Sl(Nl);
                else
                  switch (kl) {
                    case "BigInt":
                      hl = f(Nl.valueOf());
                      break;
                    case "Boolean":
                      hl = f(il(Nl));
                      break;
                    case "Number":
                      hl = f(dl(Nl));
                      break;
                    case "String":
                      hl = f(el(Nl));
                      break;
                    case "Date":
                      hl = new P(bl(Nl));
                      break;
                    case "ArrayBuffer":
                      ll = W.DataView, !ll && typeof Nl.slice != "function" && cl(kl);
                      try {
                        if (typeof Nl.slice == "function")
                          hl = Nl.slice(0);
                        else
                          for (ul = Nl.byteLength, hl = new ArrayBuffer(ul), rl = new ll(Nl), Fl = new ll(hl), jl = 0; jl < ul; jl++)
                            Fl.setUint8(jl, rl.getUint8(jl));
                      } catch {
                        throw new w("ArrayBuffer is detached", Gl);
                      }
                      break;
                    case "SharedArrayBuffer":
                      hl = Nl;
                      break;
                    case "Blob":
                      try {
                        hl = Nl.slice(0, Nl.size, Nl.type);
                      } catch {
                        cl(kl);
                      }
                      break;
                    case "DOMPoint":
                    case "DOMPointReadOnly":
                      ll = W[kl];
                      try {
                        hl = ll.fromPoint ? ll.fromPoint(Nl) : new ll(Nl.x, Nl.y, Nl.z, Nl.w);
                      } catch {
                        cl(kl);
                      }
                      break;
                    case "DOMRect":
                    case "DOMRectReadOnly":
                      ll = W[kl];
                      try {
                        hl = ll.fromRect ? ll.fromRect(Nl) : new ll(Nl.x, Nl.y, Nl.width, Nl.height);
                      } catch {
                        cl(kl);
                      }
                      break;
                    case "DOMMatrix":
                    case "DOMMatrixReadOnly":
                      ll = W[kl];
                      try {
                        hl = ll.fromMatrix ? ll.fromMatrix(Nl) : new ll(Nl);
                      } catch {
                        cl(kl);
                      }
                      break;
                    case "AudioData":
                    case "VideoFrame":
                      M(Nl.clone) || cl(kl);
                      try {
                        hl = Nl.clone();
                      } catch {
                        ol(kl);
                      }
                      break;
                    case "File":
                      try {
                        hl = new File([Nl], Nl.name, Nl);
                      } catch {
                        cl(kl);
                      }
                      break;
                    case "CryptoKey":
                    case "GPUCompilationMessage":
                    case "GPUCompilationInfo":
                    case "ImageBitmap":
                    case "RTCCertificate":
                    case "WebAssembly.Module":
                      cl(kl);
                    default:
                      ol(kl);
                  }
            }
            if (C(zl, Nl, hl), nl)
              switch (kl) {
                case "Array":
                case "Object":
                  for (Zl = v(Nl), jl = 0, ul = m(Zl); jl < ul; jl++)
                    Ll = Zl[jl], u(hl, Ll, Il(Nl[Ll], zl));
                  break;
                case "Map":
                  Nl.forEach(function(Kl, Ol) {
                    C(hl, Il(Ol, zl), Il(Kl, zl));
                  });
                  break;
                case "Set":
                  Nl.forEach(function(Kl) {
                    F(hl, Il(Kl, zl));
                  });
                  break;
                case "Error":
                  e(hl, "message", Il(Nl.message, zl)), J(Nl, "cause") && e(hl, "cause", Il(Nl.cause, zl)), sl == "AggregateError" && (hl.errors = Il(Nl.errors, zl));
                case "DOMException":
                  N && e(hl, "stack", Il(Nl.stack, zl));
              }
            return hl;
          }, Jl = Xl && !p(function() {
            if (j && G > 92 || D && G > 94 || r && G > 97)
              return !1;
            var Nl = new ArrayBuffer(8), zl = Xl(Nl, { transfer: [Nl] });
            return Nl.byteLength != 0 || zl.byteLength != 8;
          }), fl = function(Nl, zl) {
            if (!n(Nl))
              throw k("Transfer option cannot be converted to a sequence");
            var kl = [];
            S(Nl, function(rl) {
              $(kl, o(rl));
            });
            var nl = 0, ll = m(kl), sl, hl, Cl, jl, ul, Zl, Ll;
            if (Jl)
              for (jl = Xl(kl, { transfer: kl }); nl < ll; )
                C(zl, kl[nl], jl[nl++]);
            else
              for (; nl < ll; ) {
                if (sl = kl[nl++], Y(zl, sl))
                  throw new w("Duplicate transferable", Gl);
                switch (hl = R(sl), hl) {
                  case "ImageBitmap":
                    Cl = W.OffscreenCanvas, x(Cl) || cl(hl, Yl);
                    try {
                      Zl = new Cl(sl.width, sl.height), Ll = Zl.getContext("bitmaprenderer"), Ll.transferFromImageBitmap(sl), ul = Zl.transferToImageBitmap();
                    } catch {
                    }
                    break;
                  case "AudioData":
                  case "VideoFrame":
                    (!M(sl.clone) || !M(sl.close)) && cl(hl, Yl);
                    try {
                      ul = sl.clone(), sl.close();
                    } catch {
                    }
                    break;
                  case "ArrayBuffer":
                  case "MessagePort":
                  case "OffscreenCanvas":
                  case "ReadableStream":
                  case "TransformStream":
                  case "WritableStream":
                    cl(hl, Yl);
                }
                if (ul === void 0)
                  throw new w("This object cannot be transferred: " + hl, Gl);
                C(zl, sl, ul);
              }
          };
          Z({
            global: !0,
            enumerable: !0,
            sham: !Jl,
            forced: Hl
          }, {
            structuredClone: function(zl) {
              var kl = d(arguments.length, 1) > 1 && arguments[1] != null ? o(arguments[1]) : void 0, nl = kl ? kl.transfer : void 0, ll;
              return nl !== void 0 && (ll = new K(), fl(nl, ll)), Il(zl, ll);
            }
          });
        },
        /* 120 */
        /***/
        (L, c, i) => {
          var t = i(17), Z = i(10), W = i(23), y = i(80), h = i(25), p = i(52), X = function() {
          }, M = [], x = h("Reflect", "construct"), n = /^\s*(?:class|function)\b/, V = t(n.exec), S = !n.exec(X), o = function(u) {
            if (!W(u))
              return !1;
            try {
              return x(X, M, u), !0;
            } catch {
              return !1;
            }
          }, R = function(u) {
            if (!W(u))
              return !1;
            switch (y(u)) {
              case "AsyncFunction":
              case "GeneratorFunction":
              case "AsyncGeneratorFunction":
                return !1;
            }
            try {
              return S || !!V(n, p(u));
            } catch {
              return !0;
            }
          };
          R.sham = !0, L.exports = !x || Z(function() {
            var J;
            return o(o.call) || !o(Object) || !o(function() {
              J = !0;
            }) || J;
          }) ? R : o;
        },
        /* 121 */
        /***/
        (L) => {
          var c = TypeError;
          L.exports = function(i, t) {
            if (i < t)
              throw c("Not enough arguments");
            return i;
          };
        },
        /* 122 */
        /***/
        (L, c, i) => {
          var t = i(11), Z = i(40), W = i(26), y = i(123), h = RegExp.prototype;
          L.exports = function(p) {
            var X = p.flags;
            return X === void 0 && !("flags" in h) && !Z(p, "flags") && W(h, p) ? t(y, p) : X;
          };
        },
        /* 123 */
        /***/
        (L, c, i) => {
          var t = i(48);
          L.exports = function() {
            var Z = t(this), W = "";
            return Z.hasIndices && (W += "d"), Z.global && (W += "g"), Z.ignoreCase && (W += "i"), Z.multiline && (W += "m"), Z.dotAll && (W += "s"), Z.unicode && (W += "u"), Z.unicodeSets && (W += "v"), Z.sticky && (W += "y"), W;
          };
        },
        /* 124 */
        /***/
        (L, c, i) => {
          var t = i(10), Z = i(14);
          L.exports = !t(function() {
            var W = Error("a");
            return "stack" in W ? (Object.defineProperty(W, "stack", Z(1, 7)), W.stack !== 7) : !0;
          });
        },
        /* 125 */
        /***/
        (L, c, i) => {
          var t = i(126), Z = i(127);
          L.exports = !t && !Z && typeof window == "object" && typeof document == "object";
        },
        /* 126 */
        /***/
        (L) => {
          L.exports = typeof Deno == "object" && Deno && typeof Deno.version == "object";
        },
        /* 127 */
        /***/
        (L, c, i) => {
          var t = i(18), Z = i(7);
          L.exports = t(Z.process) == "process";
        },
        /* 128 */
        /***/
        (L, c, i) => {
          var t = i(7);
          L.exports = t;
        },
        /* 129 */
        /***/
        (__unused_webpack_module, exports, __w_pdfjs_require__) => {
          Object.defineProperty(exports, "__esModule", {
            value: !0
          }), exports.build = exports.RenderTask = exports.PDFWorkerUtil = exports.PDFWorker = exports.PDFPageProxy = exports.PDFDocumentProxy = exports.PDFDocumentLoadingTask = exports.PDFDataRangeTransport = exports.LoopbackPort = exports.DefaultStandardFontDataFactory = exports.DefaultCanvasFactory = exports.DefaultCMapReaderFactory = void 0, exports.getDocument = getDocument, exports.setPDFNetworkStreamFactory = setPDFNetworkStreamFactory, exports.version = void 0;
          var _util = __w_pdfjs_require__(1), _annotation_storage = __w_pdfjs_require__(130), _display_utils = __w_pdfjs_require__(133), _font_loader = __w_pdfjs_require__(136), _canvas = __w_pdfjs_require__(137), _worker_options = __w_pdfjs_require__(140), _is_node = __w_pdfjs_require__(3), _message_handler = __w_pdfjs_require__(141), _metadata = __w_pdfjs_require__(142), _optional_content_config = __w_pdfjs_require__(143), _transport_stream = __w_pdfjs_require__(144), _xfa_text = __w_pdfjs_require__(145);
          function _classPrivateMethodInitSpec(L, c) {
            _checkPrivateRedeclaration(L, c), c.add(L);
          }
          function _classPrivateMethodGet(L, c, i) {
            if (!c.has(L))
              throw new TypeError("attempted to get private field on non-instance");
            return i;
          }
          function _classPrivateFieldInitSpec(L, c, i) {
            _checkPrivateRedeclaration(L, c), c.set(L, i);
          }
          function _checkPrivateRedeclaration(L, c) {
            if (c.has(L))
              throw new TypeError("Cannot initialize the same private elements twice on an object");
          }
          function _classPrivateFieldSet(L, c, i) {
            var t = _classExtractFieldDescriptor(L, c, "set");
            return _classApplyDescriptorSet(L, t, i), i;
          }
          function _classPrivateFieldGet(L, c) {
            var i = _classExtractFieldDescriptor(L, c, "get");
            return _classApplyDescriptorGet(L, i);
          }
          function _classExtractFieldDescriptor(L, c, i) {
            if (!c.has(L))
              throw new TypeError("attempted to " + i + " private field on non-instance");
            return c.get(L);
          }
          function _classStaticPrivateFieldSpecSet(L, c, i, t) {
            return _classCheckPrivateStaticAccess(L, c), _classCheckPrivateStaticFieldDescriptor(i, "set"), _classApplyDescriptorSet(L, i, t), t;
          }
          function _classApplyDescriptorSet(L, c, i) {
            if (c.set)
              c.set.call(L, i);
            else {
              if (!c.writable)
                throw new TypeError("attempted to set read only private field");
              c.value = i;
            }
          }
          function _classStaticPrivateFieldSpecGet(L, c, i) {
            return _classCheckPrivateStaticAccess(L, c), _classCheckPrivateStaticFieldDescriptor(i, "get"), _classApplyDescriptorGet(L, i);
          }
          function _classCheckPrivateStaticFieldDescriptor(L, c) {
            if (L === void 0)
              throw new TypeError("attempted to " + c + " private static field before its declaration");
          }
          function _classCheckPrivateStaticAccess(L, c) {
            if (L !== c)
              throw new TypeError("Private static access of wrong provenance");
          }
          function _classApplyDescriptorGet(L, c) {
            return c.get ? c.get.call(L) : c.value;
          }
          const DEFAULT_RANGE_CHUNK_SIZE = 65536, RENDERING_CANCELLED_TIMEOUT = 100;
          let DefaultCanvasFactory = _display_utils.DOMCanvasFactory;
          exports.DefaultCanvasFactory = DefaultCanvasFactory;
          let DefaultCMapReaderFactory = _display_utils.DOMCMapReaderFactory;
          exports.DefaultCMapReaderFactory = DefaultCMapReaderFactory;
          let DefaultStandardFontDataFactory = _display_utils.DOMStandardFontDataFactory;
          if (exports.DefaultStandardFontDataFactory = DefaultStandardFontDataFactory, _is_node.isNodeJS) {
            const {
              NodeCanvasFactory: L,
              NodeCMapReaderFactory: c,
              NodeStandardFontDataFactory: i
            } = __w_pdfjs_require__(146);
            exports.DefaultCanvasFactory = DefaultCanvasFactory = L, exports.DefaultCMapReaderFactory = DefaultCMapReaderFactory = c, exports.DefaultStandardFontDataFactory = DefaultStandardFontDataFactory = i;
          }
          let createPDFNetworkStream;
          function setPDFNetworkStreamFactory(L) {
            createPDFNetworkStream = L;
          }
          function getDocument(L) {
            const c = new PDFDocumentLoadingTask();
            let i;
            if (typeof L == "string" || L instanceof URL)
              i = {
                url: L
              };
            else if ((0, _util.isArrayBuffer)(L))
              i = {
                data: L
              };
            else if (L instanceof PDFDataRangeTransport)
              i = {
                range: L
              };
            else {
              if (typeof L != "object")
                throw new Error("Invalid parameter in getDocument, need either string, URL, TypedArray, or parameter object.");
              if (!L.url && !L.data && !L.range)
                throw new Error("Invalid parameter object: need either .data, .range or .url");
              i = L;
            }
            const t = /* @__PURE__ */ Object.create(null);
            let Z = null, W = null;
            for (const h in i) {
              const p = i[h];
              switch (h) {
                case "url":
                  if (typeof window < "u")
                    try {
                      t[h] = new URL(p, window.location).href;
                      continue;
                    } catch (X) {
                      (0, _util.warn)(`Cannot create valid URL: "${X}".`);
                    }
                  else if (typeof p == "string" || p instanceof URL) {
                    t[h] = p.toString();
                    continue;
                  }
                  throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.");
                case "range":
                  Z = p;
                  continue;
                case "worker":
                  W = p;
                  continue;
                case "data":
                  if (_is_node.isNodeJS && typeof Buffer < "u" && p instanceof Buffer)
                    t[h] = new Uint8Array(p);
                  else {
                    if (p instanceof Uint8Array)
                      break;
                    if (typeof p == "string")
                      t[h] = (0, _util.stringToBytes)(p);
                    else if (typeof p == "object" && p !== null && !isNaN(p.length))
                      t[h] = new Uint8Array(p);
                    else if ((0, _util.isArrayBuffer)(p))
                      t[h] = new Uint8Array(p);
                    else
                      throw new Error("Invalid PDF binary data: either TypedArray, string, or array-like object is expected in the data property.");
                  }
                  continue;
              }
              t[h] = p;
            }
            if (t.CMapReaderFactory = t.CMapReaderFactory || DefaultCMapReaderFactory, t.StandardFontDataFactory = t.StandardFontDataFactory || DefaultStandardFontDataFactory, t.ignoreErrors = t.stopAtErrors !== !0, t.fontExtraProperties = t.fontExtraProperties === !0, t.pdfBug = t.pdfBug === !0, t.enableXfa = t.enableXfa === !0, (!Number.isInteger(t.rangeChunkSize) || t.rangeChunkSize < 1) && (t.rangeChunkSize = DEFAULT_RANGE_CHUNK_SIZE), (typeof t.docBaseUrl != "string" || (0, _display_utils.isDataScheme)(t.docBaseUrl)) && (t.docBaseUrl = null), (!Number.isInteger(t.maxImageSize) || t.maxImageSize < -1) && (t.maxImageSize = -1), typeof t.cMapUrl != "string" && (t.cMapUrl = null), typeof t.standardFontDataUrl != "string" && (t.standardFontDataUrl = null), typeof t.useWorkerFetch != "boolean" && (t.useWorkerFetch = t.CMapReaderFactory === _display_utils.DOMCMapReaderFactory && t.StandardFontDataFactory === _display_utils.DOMStandardFontDataFactory), typeof t.isEvalSupported != "boolean" && (t.isEvalSupported = !0), typeof t.disableFontFace != "boolean" && (t.disableFontFace = _is_node.isNodeJS), typeof t.useSystemFonts != "boolean" && (t.useSystemFonts = !_is_node.isNodeJS && !t.disableFontFace), (typeof t.ownerDocument != "object" || t.ownerDocument === null) && (t.ownerDocument = globalThis.document), typeof t.disableRange != "boolean" && (t.disableRange = !1), typeof t.disableStream != "boolean" && (t.disableStream = !1), typeof t.disableAutoFetch != "boolean" && (t.disableAutoFetch = !1), (0, _util.setVerbosityLevel)(t.verbosity), !W) {
              const h = {
                verbosity: t.verbosity,
                port: _worker_options.GlobalWorkerOptions.workerPort
              };
              W = h.port ? PDFWorker.fromPort(h) : new PDFWorker(h), c._worker = W;
            }
            const y = c.docId;
            return W.promise.then(function() {
              if (c.destroyed)
                throw new Error("Loading aborted");
              const h = _fetchDocument(W, t, Z, y), p = new Promise(function(X) {
                let M;
                Z ? M = new _transport_stream.PDFDataTransportStream({
                  length: t.length,
                  initialData: t.initialData,
                  progressiveDone: t.progressiveDone,
                  contentDispositionFilename: t.contentDispositionFilename,
                  disableRange: t.disableRange,
                  disableStream: t.disableStream
                }, Z) : t.data || (M = createPDFNetworkStream({
                  url: t.url,
                  length: t.length,
                  httpHeaders: t.httpHeaders,
                  withCredentials: t.withCredentials,
                  rangeChunkSize: t.rangeChunkSize,
                  disableRange: t.disableRange,
                  disableStream: t.disableStream
                })), X(M);
              });
              return Promise.all([h, p]).then(function(X) {
                let [M, x] = X;
                if (c.destroyed)
                  throw new Error("Loading aborted");
                const n = new _message_handler.MessageHandler(y, M, W.port), V = new WorkerTransport(n, c, x, t);
                c._transport = V, n.send("Ready", null);
              });
            }).catch(c._capability.reject), c;
          }
          async function _fetchDocument(L, c, i, t) {
            if (L.destroyed)
              throw new Error("Worker was destroyed");
            i && (c.length = i.length, c.initialData = i.initialData, c.progressiveDone = i.progressiveDone, c.contentDispositionFilename = i.contentDispositionFilename);
            const Z = await L.messageHandler.sendWithPromise("GetDocRequest", {
              docId: t,
              apiVersion: "2.16.105",
              source: {
                data: c.data,
                url: c.url,
                password: c.password,
                disableAutoFetch: c.disableAutoFetch,
                rangeChunkSize: c.rangeChunkSize,
                length: c.length
              },
              maxImageSize: c.maxImageSize,
              disableFontFace: c.disableFontFace,
              docBaseUrl: c.docBaseUrl,
              ignoreErrors: c.ignoreErrors,
              isEvalSupported: c.isEvalSupported,
              fontExtraProperties: c.fontExtraProperties,
              enableXfa: c.enableXfa,
              useSystemFonts: c.useSystemFonts,
              cMapUrl: c.useWorkerFetch ? c.cMapUrl : null,
              standardFontDataUrl: c.useWorkerFetch ? c.standardFontDataUrl : null
            });
            if (c.data && (c.data = null), L.destroyed)
              throw new Error("Worker was destroyed");
            return Z;
          }
          class PDFDocumentLoadingTask {
            constructor() {
              var c, i;
              this._capability = (0, _util.createPromiseCapability)(), this._transport = null, this._worker = null, this.docId = `d${_classStaticPrivateFieldSpecSet(PDFDocumentLoadingTask, PDFDocumentLoadingTask, _docId, (c = _classStaticPrivateFieldSpecGet(PDFDocumentLoadingTask, PDFDocumentLoadingTask, _docId), i = c++, c)), i}`, this.destroyed = !1, this.onPassword = null, this.onProgress = null, this.onUnsupportedFeature = null;
            }
            get promise() {
              return this._capability.promise;
            }
            async destroy() {
              var c;
              this.destroyed = !0, await ((c = this._transport) === null || c === void 0 ? void 0 : c.destroy()), this._transport = null, this._worker && (this._worker.destroy(), this._worker = null);
            }
          }
          exports.PDFDocumentLoadingTask = PDFDocumentLoadingTask;
          var _docId = {
            writable: !0,
            value: 0
          };
          class PDFDataRangeTransport {
            constructor(c, i) {
              let t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, Z = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
              this.length = c, this.initialData = i, this.progressiveDone = t, this.contentDispositionFilename = Z, this._rangeListeners = [], this._progressListeners = [], this._progressiveReadListeners = [], this._progressiveDoneListeners = [], this._readyCapability = (0, _util.createPromiseCapability)();
            }
            addRangeListener(c) {
              this._rangeListeners.push(c);
            }
            addProgressListener(c) {
              this._progressListeners.push(c);
            }
            addProgressiveReadListener(c) {
              this._progressiveReadListeners.push(c);
            }
            addProgressiveDoneListener(c) {
              this._progressiveDoneListeners.push(c);
            }
            onDataRange(c, i) {
              for (const t of this._rangeListeners)
                t(c, i);
            }
            onDataProgress(c, i) {
              this._readyCapability.promise.then(() => {
                for (const t of this._progressListeners)
                  t(c, i);
              });
            }
            onDataProgressiveRead(c) {
              this._readyCapability.promise.then(() => {
                for (const i of this._progressiveReadListeners)
                  i(c);
              });
            }
            onDataProgressiveDone() {
              this._readyCapability.promise.then(() => {
                for (const c of this._progressiveDoneListeners)
                  c();
              });
            }
            transportReady() {
              this._readyCapability.resolve();
            }
            requestDataRange(c, i) {
              (0, _util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange");
            }
            abort() {
            }
          }
          exports.PDFDataRangeTransport = PDFDataRangeTransport;
          class PDFDocumentProxy {
            constructor(c, i) {
              this._pdfInfo = c, this._transport = i, Object.defineProperty(this, "fingerprint", {
                get() {
                  return (0, _display_utils.deprecated)("`PDFDocumentProxy.fingerprint`, please use `PDFDocumentProxy.fingerprints` instead."), this.fingerprints[0];
                }
              }), Object.defineProperty(this, "getStats", {
                value: async () => ((0, _display_utils.deprecated)("`PDFDocumentProxy.getStats`, please use the `PDFDocumentProxy.stats`-getter instead."), this.stats || {
                  streamTypes: {},
                  fontTypes: {}
                })
              });
            }
            get annotationStorage() {
              return this._transport.annotationStorage;
            }
            get numPages() {
              return this._pdfInfo.numPages;
            }
            get fingerprints() {
              return this._pdfInfo.fingerprints;
            }
            get stats() {
              return this._transport.stats;
            }
            get isPureXfa() {
              return !!this._transport._htmlForXfa;
            }
            get allXfaHtml() {
              return this._transport._htmlForXfa;
            }
            getPage(c) {
              return this._transport.getPage(c);
            }
            getPageIndex(c) {
              return this._transport.getPageIndex(c);
            }
            getDestinations() {
              return this._transport.getDestinations();
            }
            getDestination(c) {
              return this._transport.getDestination(c);
            }
            getPageLabels() {
              return this._transport.getPageLabels();
            }
            getPageLayout() {
              return this._transport.getPageLayout();
            }
            getPageMode() {
              return this._transport.getPageMode();
            }
            getViewerPreferences() {
              return this._transport.getViewerPreferences();
            }
            getOpenAction() {
              return this._transport.getOpenAction();
            }
            getAttachments() {
              return this._transport.getAttachments();
            }
            getJavaScript() {
              return this._transport.getJavaScript();
            }
            getJSActions() {
              return this._transport.getDocJSActions();
            }
            getOutline() {
              return this._transport.getOutline();
            }
            getOptionalContentConfig() {
              return this._transport.getOptionalContentConfig();
            }
            getPermissions() {
              return this._transport.getPermissions();
            }
            getMetadata() {
              return this._transport.getMetadata();
            }
            getMarkInfo() {
              return this._transport.getMarkInfo();
            }
            getData() {
              return this._transport.getData();
            }
            getDownloadInfo() {
              return this._transport.downloadInfoCapability.promise;
            }
            cleanup() {
              let c = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
              return this._transport.startCleanup(c || this.isPureXfa);
            }
            destroy() {
              return this.loadingTask.destroy();
            }
            get loadingParams() {
              return this._transport.loadingParams;
            }
            get loadingTask() {
              return this._transport.loadingTask;
            }
            saveDocument() {
              return this._transport.annotationStorage.size <= 0 && (0, _display_utils.deprecated)("saveDocument called while `annotationStorage` is empty, please use the getData-method instead."), this._transport.saveDocument();
            }
            getFieldObjects() {
              return this._transport.getFieldObjects();
            }
            hasJSActions() {
              return this._transport.hasJSActions();
            }
            getCalculationOrderIds() {
              return this._transport.getCalculationOrderIds();
            }
          }
          exports.PDFDocumentProxy = PDFDocumentProxy;
          class PDFPageProxy {
            constructor(c, i, t, Z) {
              let W = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !1;
              this._pageIndex = c, this._pageInfo = i, this._ownerDocument = Z, this._transport = t, this._stats = W ? new _display_utils.StatTimer() : null, this._pdfBug = W, this.commonObjs = t.commonObjs, this.objs = new PDFObjects(), this._bitmaps = /* @__PURE__ */ new Set(), this.cleanupAfterRender = !1, this.pendingCleanup = !1, this._intentStates = /* @__PURE__ */ new Map(), this._annotationPromises = /* @__PURE__ */ new Map(), this.destroyed = !1;
            }
            get pageNumber() {
              return this._pageIndex + 1;
            }
            get rotate() {
              return this._pageInfo.rotate;
            }
            get ref() {
              return this._pageInfo.ref;
            }
            get userUnit() {
              return this._pageInfo.userUnit;
            }
            get view() {
              return this._pageInfo.view;
            }
            getViewport() {
              let {
                scale: c,
                rotation: i = this.rotate,
                offsetX: t = 0,
                offsetY: Z = 0,
                dontFlip: W = !1
              } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              return new _display_utils.PageViewport({
                viewBox: this.view,
                scale: c,
                rotation: i,
                offsetX: t,
                offsetY: Z,
                dontFlip: W
              });
            }
            getAnnotations() {
              let {
                intent: c = "display"
              } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              const i = this._transport.getRenderingIntent(c);
              let t = this._annotationPromises.get(i.cacheKey);
              return t || (t = this._transport.getAnnotations(this._pageIndex, i.renderingIntent), this._annotationPromises.set(i.cacheKey, t), t = t.then((Z) => {
                for (const W of Z)
                  W.titleObj !== void 0 && Object.defineProperty(W, "title", {
                    get() {
                      return (0, _display_utils.deprecated)("`title`-property on annotation, please use `titleObj` instead."), W.titleObj.str;
                    }
                  }), W.contentsObj !== void 0 && Object.defineProperty(W, "contents", {
                    get() {
                      return (0, _display_utils.deprecated)("`contents`-property on annotation, please use `contentsObj` instead."), W.contentsObj.str;
                    }
                  });
                return Z;
              })), t;
            }
            getJSActions() {
              return this._jsActionsPromise || (this._jsActionsPromise = this._transport.getPageJSActions(this._pageIndex));
            }
            async getXfa() {
              var c;
              return ((c = this._transport._htmlForXfa) === null || c === void 0 ? void 0 : c.children[this._pageIndex]) || null;
            }
            render(c) {
              var i, t, Z;
              let {
                canvasContext: W,
                viewport: y,
                intent: h = "display",
                annotationMode: p = _util.AnnotationMode.ENABLE,
                transform: X = null,
                imageLayer: M = null,
                canvasFactory: x = null,
                background: n = null,
                optionalContentConfigPromise: V = null,
                annotationCanvasMap: S = null,
                pageColors: o = null,
                printAnnotationStorage: R = null
              } = c;
              ((i = arguments[0]) === null || i === void 0 ? void 0 : i.renderInteractiveForms) !== void 0 && ((0, _display_utils.deprecated)("render no longer accepts the `renderInteractiveForms`-option, please use the `annotationMode`-option instead."), arguments[0].renderInteractiveForms === !0 && p === _util.AnnotationMode.ENABLE && (p = _util.AnnotationMode.ENABLE_FORMS)), ((t = arguments[0]) === null || t === void 0 ? void 0 : t.includeAnnotationStorage) !== void 0 && ((0, _display_utils.deprecated)("render no longer accepts the `includeAnnotationStorage`-option, please use the `annotationMode`-option instead."), arguments[0].includeAnnotationStorage === !0 && p === _util.AnnotationMode.ENABLE && (p = _util.AnnotationMode.ENABLE_STORAGE)), this._stats && this._stats.time("Overall");
              const J = this._transport.getRenderingIntent(h, p, R);
              this.pendingCleanup = !1, V || (V = this._transport.getOptionalContentConfig());
              let u = this._intentStates.get(J.cacheKey);
              u || (u = /* @__PURE__ */ Object.create(null), this._intentStates.set(J.cacheKey, u)), u.streamReaderCancelTimeout && (clearTimeout(u.streamReaderCancelTimeout), u.streamReaderCancelTimeout = null);
              const e = x || new DefaultCanvasFactory({
                ownerDocument: this._ownerDocument
              }), m = !!(J.renderingIntent & _util.RenderingIntentFlag.PRINT);
              u.displayReadyCapability || (u.displayReadyCapability = (0, _util.createPromiseCapability)(), u.operatorList = {
                fnArray: [],
                argsArray: [],
                lastChunk: !1,
                separateAnnots: null
              }, this._stats && this._stats.time("Page Request"), this._pumpOperatorList(J));
              const d = (G) => {
                u.renderTasks.delete(b), (this.cleanupAfterRender || m) && (this.pendingCleanup = !0), this._tryCleanup(), G ? (b.capability.reject(G), this._abortOperatorList({
                  intentState: u,
                  reason: G instanceof Error ? G : new Error(G)
                })) : b.capability.resolve(), this._stats && (this._stats.timeEnd("Rendering"), this._stats.timeEnd("Overall"));
              }, b = new InternalRenderTask({
                callback: d,
                params: {
                  canvasContext: W,
                  viewport: y,
                  transform: X,
                  imageLayer: M,
                  background: n
                },
                objs: this.objs,
                commonObjs: this.commonObjs,
                annotationCanvasMap: S,
                operatorList: u.operatorList,
                pageIndex: this._pageIndex,
                canvasFactory: e,
                useRequestAnimationFrame: !m,
                pdfBug: this._pdfBug,
                pageColors: o
              });
              ((Z = u).renderTasks || (Z.renderTasks = /* @__PURE__ */ new Set())).add(b);
              const N = b.task;
              return Promise.all([u.displayReadyCapability.promise, V]).then((G) => {
                let [r, j] = G;
                if (this.pendingCleanup) {
                  d();
                  return;
                }
                this._stats && this._stats.time("Rendering"), b.initializeGraphics({
                  transparency: r,
                  optionalContentConfig: j
                }), b.operatorListChanged();
              }).catch(d), N;
            }
            getOperatorList() {
              let {
                intent: c = "display",
                annotationMode: i = _util.AnnotationMode.ENABLE,
                printAnnotationStorage: t = null
              } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              function Z() {
                y.operatorList.lastChunk && (y.opListReadCapability.resolve(y.operatorList), y.renderTasks.delete(h));
              }
              const W = this._transport.getRenderingIntent(c, i, t, !0);
              let y = this._intentStates.get(W.cacheKey);
              y || (y = /* @__PURE__ */ Object.create(null), this._intentStates.set(W.cacheKey, y));
              let h;
              if (!y.opListReadCapability) {
                var p;
                h = /* @__PURE__ */ Object.create(null), h.operatorListChanged = Z, y.opListReadCapability = (0, _util.createPromiseCapability)(), ((p = y).renderTasks || (p.renderTasks = /* @__PURE__ */ new Set())).add(h), y.operatorList = {
                  fnArray: [],
                  argsArray: [],
                  lastChunk: !1,
                  separateAnnots: null
                }, this._stats && this._stats.time("Page Request"), this._pumpOperatorList(W);
              }
              return y.opListReadCapability.promise;
            }
            streamTextContent() {
              let {
                disableCombineTextItems: c = !1,
                includeMarkedContent: i = !1
              } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              return this._transport.messageHandler.sendWithStream("GetTextContent", {
                pageIndex: this._pageIndex,
                combineTextItems: c !== !0,
                includeMarkedContent: i === !0
              }, {
                highWaterMark: 100,
                size(Z) {
                  return Z.items.length;
                }
              });
            }
            getTextContent() {
              let c = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              if (this._transport._htmlForXfa)
                return this.getXfa().then((t) => _xfa_text.XfaText.textContent(t));
              const i = this.streamTextContent(c);
              return new Promise(function(t, Z) {
                function W() {
                  y.read().then(function(p) {
                    let {
                      value: X,
                      done: M
                    } = p;
                    if (M) {
                      t(h);
                      return;
                    }
                    Object.assign(h.styles, X.styles), h.items.push(...X.items), W();
                  }, Z);
                }
                const y = i.getReader(), h = {
                  items: [],
                  styles: /* @__PURE__ */ Object.create(null)
                };
                W();
              });
            }
            getStructTree() {
              return this._structTreePromise || (this._structTreePromise = this._transport.getStructTree(this._pageIndex));
            }
            _destroy() {
              this.destroyed = !0;
              const c = [];
              for (const i of this._intentStates.values())
                if (this._abortOperatorList({
                  intentState: i,
                  reason: new Error("Page was destroyed."),
                  force: !0
                }), !i.opListReadCapability)
                  for (const t of i.renderTasks)
                    c.push(t.completed), t.cancel();
              this.objs.clear();
              for (const i of this._bitmaps)
                i.close();
              return this._bitmaps.clear(), this._annotationPromises.clear(), this._jsActionsPromise = null, this._structTreePromise = null, this.pendingCleanup = !1, Promise.all(c);
            }
            cleanup() {
              let c = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
              return this.pendingCleanup = !0, this._tryCleanup(c);
            }
            _tryCleanup() {
              let c = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
              if (!this.pendingCleanup)
                return !1;
              for (const {
                renderTasks: i,
                operatorList: t
              } of this._intentStates.values())
                if (i.size > 0 || !t.lastChunk)
                  return !1;
              this._intentStates.clear(), this.objs.clear(), this._annotationPromises.clear(), this._jsActionsPromise = null, this._structTreePromise = null, c && this._stats && (this._stats = new _display_utils.StatTimer());
              for (const i of this._bitmaps)
                i.close();
              return this._bitmaps.clear(), this.pendingCleanup = !1, !0;
            }
            _startRenderPage(c, i) {
              const t = this._intentStates.get(i);
              t && (this._stats && this._stats.timeEnd("Page Request"), t.displayReadyCapability && t.displayReadyCapability.resolve(c));
            }
            _renderPageChunk(c, i) {
              for (let t = 0, Z = c.length; t < Z; t++)
                i.operatorList.fnArray.push(c.fnArray[t]), i.operatorList.argsArray.push(c.argsArray[t]);
              i.operatorList.lastChunk = c.lastChunk, i.operatorList.separateAnnots = c.separateAnnots;
              for (const t of i.renderTasks)
                t.operatorListChanged();
              c.lastChunk && this._tryCleanup();
            }
            _pumpOperatorList(c) {
              let {
                renderingIntent: i,
                cacheKey: t,
                annotationStorageMap: Z
              } = c;
              const y = this._transport.messageHandler.sendWithStream("GetOperatorList", {
                pageIndex: this._pageIndex,
                intent: i,
                cacheKey: t,
                annotationStorage: Z
              }).getReader(), h = this._intentStates.get(t);
              h.streamReader = y;
              const p = () => {
                y.read().then((X) => {
                  let {
                    value: M,
                    done: x
                  } = X;
                  if (x) {
                    h.streamReader = null;
                    return;
                  }
                  this._transport.destroyed || (this._renderPageChunk(M, h), p());
                }, (X) => {
                  if (h.streamReader = null, !this._transport.destroyed) {
                    if (h.operatorList) {
                      h.operatorList.lastChunk = !0;
                      for (const M of h.renderTasks)
                        M.operatorListChanged();
                      this._tryCleanup();
                    }
                    if (h.displayReadyCapability)
                      h.displayReadyCapability.reject(X);
                    else if (h.opListReadCapability)
                      h.opListReadCapability.reject(X);
                    else
                      throw X;
                  }
                });
              };
              p();
            }
            _abortOperatorList(c) {
              let {
                intentState: i,
                reason: t,
                force: Z = !1
              } = c;
              if (i.streamReader) {
                if (!Z) {
                  if (i.renderTasks.size > 0)
                    return;
                  if (t instanceof _display_utils.RenderingCancelledException) {
                    i.streamReaderCancelTimeout = setTimeout(() => {
                      this._abortOperatorList({
                        intentState: i,
                        reason: t,
                        force: !0
                      }), i.streamReaderCancelTimeout = null;
                    }, RENDERING_CANCELLED_TIMEOUT);
                    return;
                  }
                }
                if (i.streamReader.cancel(new _util.AbortException(t.message)).catch(() => {
                }), i.streamReader = null, !this._transport.destroyed) {
                  for (const [W, y] of this._intentStates)
                    if (y === i) {
                      this._intentStates.delete(W);
                      break;
                    }
                  this.cleanup();
                }
              }
            }
            get stats() {
              return this._stats;
            }
          }
          exports.PDFPageProxy = PDFPageProxy;
          class LoopbackPort {
            constructor() {
              this._listeners = [], this._deferred = Promise.resolve();
            }
            postMessage(c, i) {
              const t = {
                data: structuredClone(c, i)
              };
              this._deferred.then(() => {
                for (const Z of this._listeners)
                  Z.call(this, t);
              });
            }
            addEventListener(c, i) {
              this._listeners.push(i);
            }
            removeEventListener(c, i) {
              const t = this._listeners.indexOf(i);
              this._listeners.splice(t, 1);
            }
            terminate() {
              this._listeners.length = 0;
            }
          }
          exports.LoopbackPort = LoopbackPort;
          const PDFWorkerUtil = {
            isWorkerDisabled: !1,
            fallbackWorkerSrc: null,
            fakeWorkerId: 0
          };
          exports.PDFWorkerUtil = PDFWorkerUtil;
          {
            if (_is_node.isNodeJS && typeof commonjsRequire == "function")
              PDFWorkerUtil.isWorkerDisabled = !0, PDFWorkerUtil.fallbackWorkerSrc = "./pdf.worker.js";
            else if (typeof document == "object") {
              var _document, _document$currentScri;
              const L = (_document = document) === null || _document === void 0 || (_document$currentScri = _document.currentScript) === null || _document$currentScri === void 0 ? void 0 : _document$currentScri.src;
              L && (PDFWorkerUtil.fallbackWorkerSrc = L.replace(/(\.(?:min\.)?js)(\?.*)?$/i, ".worker$1$2"));
            }
            PDFWorkerUtil.isSameOrigin = function(L, c) {
              let i;
              try {
                if (i = new URL(L), !i.origin || i.origin === "null")
                  return !1;
              } catch {
                return !1;
              }
              const t = new URL(c, i);
              return i.origin === t.origin;
            }, PDFWorkerUtil.createCDNWrapper = function(L) {
              const c = `importScripts("${L}");`;
              return URL.createObjectURL(new Blob([c]));
            };
          }
          class PDFWorker {
            constructor() {
              let {
                name: L = null,
                port: c = null,
                verbosity: i = (0, _util.getVerbosityLevel)()
              } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              if (c && _classStaticPrivateFieldSpecGet(PDFWorker, PDFWorker, _workerPorts).has(c))
                throw new Error("Cannot use more than one PDFWorker per port.");
              if (this.name = L, this.destroyed = !1, this.verbosity = i, this._readyCapability = (0, _util.createPromiseCapability)(), this._port = null, this._webWorker = null, this._messageHandler = null, c) {
                _classStaticPrivateFieldSpecGet(PDFWorker, PDFWorker, _workerPorts).set(c, this), this._initializeFromPort(c);
                return;
              }
              this._initialize();
            }
            get promise() {
              return this._readyCapability.promise;
            }
            get port() {
              return this._port;
            }
            get messageHandler() {
              return this._messageHandler;
            }
            _initializeFromPort(L) {
              this._port = L, this._messageHandler = new _message_handler.MessageHandler("main", "worker", L), this._messageHandler.on("ready", function() {
              }), this._readyCapability.resolve();
            }
            _initialize() {
              if (!PDFWorkerUtil.isWorkerDisabled && !PDFWorker._mainThreadWorkerMessageHandler) {
                let {
                  workerSrc: L
                } = PDFWorker;
                try {
                  PDFWorkerUtil.isSameOrigin(window.location.href, L) || (L = PDFWorkerUtil.createCDNWrapper(new URL(L, window.location).href));
                  const c = new Worker(L), i = new _message_handler.MessageHandler("main", "worker", c), t = () => {
                    c.removeEventListener("error", Z), i.destroy(), c.terminate(), this.destroyed ? this._readyCapability.reject(new Error("Worker was destroyed")) : this._setupFakeWorker();
                  }, Z = () => {
                    this._webWorker || t();
                  };
                  c.addEventListener("error", Z), i.on("test", (y) => {
                    if (c.removeEventListener("error", Z), this.destroyed) {
                      t();
                      return;
                    }
                    y ? (this._messageHandler = i, this._port = c, this._webWorker = c, this._readyCapability.resolve(), i.send("configure", {
                      verbosity: this.verbosity
                    })) : (this._setupFakeWorker(), i.destroy(), c.terminate());
                  }), i.on("ready", (y) => {
                    if (c.removeEventListener("error", Z), this.destroyed) {
                      t();
                      return;
                    }
                    try {
                      W();
                    } catch {
                      this._setupFakeWorker();
                    }
                  });
                  const W = () => {
                    const y = new Uint8Array();
                    i.send("test", y, [y.buffer]);
                  };
                  W();
                  return;
                } catch {
                  (0, _util.info)("The worker has been disabled.");
                }
              }
              this._setupFakeWorker();
            }
            _setupFakeWorker() {
              PDFWorkerUtil.isWorkerDisabled || ((0, _util.warn)("Setting up fake worker."), PDFWorkerUtil.isWorkerDisabled = !0), PDFWorker._setupFakeWorkerGlobal.then((L) => {
                if (this.destroyed) {
                  this._readyCapability.reject(new Error("Worker was destroyed"));
                  return;
                }
                const c = new LoopbackPort();
                this._port = c;
                const i = `fake${PDFWorkerUtil.fakeWorkerId++}`, t = new _message_handler.MessageHandler(i + "_worker", i, c);
                L.setup(t, c);
                const Z = new _message_handler.MessageHandler(i, i + "_worker", c);
                this._messageHandler = Z, this._readyCapability.resolve(), Z.send("configure", {
                  verbosity: this.verbosity
                });
              }).catch((L) => {
                this._readyCapability.reject(new Error(`Setting up fake worker failed: "${L.message}".`));
              });
            }
            destroy() {
              this.destroyed = !0, this._webWorker && (this._webWorker.terminate(), this._webWorker = null), _classStaticPrivateFieldSpecGet(PDFWorker, PDFWorker, _workerPorts).delete(this._port), this._port = null, this._messageHandler && (this._messageHandler.destroy(), this._messageHandler = null);
            }
            static fromPort(L) {
              if (!(L != null && L.port))
                throw new Error("PDFWorker.fromPort - invalid method signature.");
              return _classStaticPrivateFieldSpecGet(this, PDFWorker, _workerPorts).has(L.port) ? _classStaticPrivateFieldSpecGet(this, PDFWorker, _workerPorts).get(L.port) : new PDFWorker(L);
            }
            static get workerSrc() {
              if (_worker_options.GlobalWorkerOptions.workerSrc)
                return _worker_options.GlobalWorkerOptions.workerSrc;
              if (PDFWorkerUtil.fallbackWorkerSrc !== null)
                return _is_node.isNodeJS || (0, _display_utils.deprecated)('No "GlobalWorkerOptions.workerSrc" specified.'), PDFWorkerUtil.fallbackWorkerSrc;
              throw new Error('No "GlobalWorkerOptions.workerSrc" specified.');
            }
            static get _mainThreadWorkerMessageHandler() {
              try {
                var L;
                return ((L = globalThis.pdfjsWorker) === null || L === void 0 ? void 0 : L.WorkerMessageHandler) || null;
              } catch {
                return null;
              }
            }
            static get _setupFakeWorkerGlobal() {
              const loader = async () => {
                const mainWorkerMessageHandler = this._mainThreadWorkerMessageHandler;
                if (mainWorkerMessageHandler)
                  return mainWorkerMessageHandler;
                if (_is_node.isNodeJS && typeof commonjsRequire == "function") {
                  const worker = eval("require")(this.workerSrc);
                  return worker.WorkerMessageHandler;
                }
                return await (0, _display_utils.loadScript)(this.workerSrc), window.pdfjsWorker.WorkerMessageHandler;
              };
              return (0, _util.shadow)(this, "_setupFakeWorkerGlobal", loader());
            }
          }
          exports.PDFWorker = PDFWorker;
          var _workerPorts = {
            value: /* @__PURE__ */ new WeakMap()
          };
          PDFWorker.getWorkerSrc = function() {
            return (0, _display_utils.deprecated)("`PDFWorker.getWorkerSrc()`, please use `PDFWorker.workerSrc` instead."), this.workerSrc;
          };
          var _docStats = /* @__PURE__ */ new WeakMap(), _pageCache = /* @__PURE__ */ new WeakMap(), _pagePromises = /* @__PURE__ */ new WeakMap(), _metadataPromise = /* @__PURE__ */ new WeakMap();
          class WorkerTransport {
            constructor(c, i, t, Z) {
              _classPrivateFieldInitSpec(this, _docStats, {
                writable: !0,
                value: null
              }), _classPrivateFieldInitSpec(this, _pageCache, {
                writable: !0,
                value: /* @__PURE__ */ new Map()
              }), _classPrivateFieldInitSpec(this, _pagePromises, {
                writable: !0,
                value: /* @__PURE__ */ new Map()
              }), _classPrivateFieldInitSpec(this, _metadataPromise, {
                writable: !0,
                value: null
              }), this.messageHandler = c, this.loadingTask = i, this.commonObjs = new PDFObjects(), this.fontLoader = new _font_loader.FontLoader({
                docId: i.docId,
                onUnsupportedFeature: this._onUnsupportedFeature.bind(this),
                ownerDocument: Z.ownerDocument,
                styleElement: Z.styleElement
              }), this._params = Z, Z.useWorkerFetch || (this.CMapReaderFactory = new Z.CMapReaderFactory({
                baseUrl: Z.cMapUrl,
                isCompressed: Z.cMapPacked
              }), this.StandardFontDataFactory = new Z.StandardFontDataFactory({
                baseUrl: Z.standardFontDataUrl
              })), this.destroyed = !1, this.destroyCapability = null, this._passwordCapability = null, this._networkStream = t, this._fullReader = null, this._lastProgress = null, this.downloadInfoCapability = (0, _util.createPromiseCapability)(), this.setupMessageHandler();
            }
            get annotationStorage() {
              return (0, _util.shadow)(this, "annotationStorage", new _annotation_storage.AnnotationStorage());
            }
            get stats() {
              return _classPrivateFieldGet(this, _docStats);
            }
            getRenderingIntent(c) {
              let i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _util.AnnotationMode.ENABLE, t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null, Z = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1, W = _util.RenderingIntentFlag.DISPLAY, y = null;
              switch (c) {
                case "any":
                  W = _util.RenderingIntentFlag.ANY;
                  break;
                case "display":
                  break;
                case "print":
                  W = _util.RenderingIntentFlag.PRINT;
                  break;
                default:
                  (0, _util.warn)(`getRenderingIntent - invalid intent: ${c}`);
              }
              switch (i) {
                case _util.AnnotationMode.DISABLE:
                  W += _util.RenderingIntentFlag.ANNOTATIONS_DISABLE;
                  break;
                case _util.AnnotationMode.ENABLE:
                  break;
                case _util.AnnotationMode.ENABLE_FORMS:
                  W += _util.RenderingIntentFlag.ANNOTATIONS_FORMS;
                  break;
                case _util.AnnotationMode.ENABLE_STORAGE:
                  W += _util.RenderingIntentFlag.ANNOTATIONS_STORAGE, y = (W & _util.RenderingIntentFlag.PRINT && t instanceof _annotation_storage.PrintAnnotationStorage ? t : this.annotationStorage).serializable;
                  break;
                default:
                  (0, _util.warn)(`getRenderingIntent - invalid annotationMode: ${i}`);
              }
              return Z && (W += _util.RenderingIntentFlag.OPLIST), {
                renderingIntent: W,
                cacheKey: `${W}_${_annotation_storage.AnnotationStorage.getHash(y)}`,
                annotationStorageMap: y
              };
            }
            destroy() {
              if (this.destroyCapability)
                return this.destroyCapability.promise;
              this.destroyed = !0, this.destroyCapability = (0, _util.createPromiseCapability)(), this._passwordCapability && this._passwordCapability.reject(new Error("Worker was destroyed during onPassword callback"));
              const c = [];
              for (const t of _classPrivateFieldGet(this, _pageCache).values())
                c.push(t._destroy());
              _classPrivateFieldGet(this, _pageCache).clear(), _classPrivateFieldGet(this, _pagePromises).clear(), this.hasOwnProperty("annotationStorage") && this.annotationStorage.resetModified();
              const i = this.messageHandler.sendWithPromise("Terminate", null);
              return c.push(i), Promise.all(c).then(() => {
                this.commonObjs.clear(), this.fontLoader.clear(), _classPrivateFieldSet(this, _metadataPromise, null), this._getFieldObjectsPromise = null, this._hasJSActionsPromise = null, this._networkStream && this._networkStream.cancelAllRequests(new _util.AbortException("Worker was terminated.")), this.messageHandler && (this.messageHandler.destroy(), this.messageHandler = null), this.destroyCapability.resolve();
              }, this.destroyCapability.reject), this.destroyCapability.promise;
            }
            setupMessageHandler() {
              const {
                messageHandler: c,
                loadingTask: i
              } = this;
              c.on("GetReader", (t, Z) => {
                (0, _util.assert)(this._networkStream, "GetReader - no `IPDFStream` instance available."), this._fullReader = this._networkStream.getFullReader(), this._fullReader.onProgress = (W) => {
                  this._lastProgress = {
                    loaded: W.loaded,
                    total: W.total
                  };
                }, Z.onPull = () => {
                  this._fullReader.read().then(function(W) {
                    let {
                      value: y,
                      done: h
                    } = W;
                    if (h) {
                      Z.close();
                      return;
                    }
                    (0, _util.assert)((0, _util.isArrayBuffer)(y), "GetReader - expected an ArrayBuffer."), Z.enqueue(new Uint8Array(y), 1, [y]);
                  }).catch((W) => {
                    Z.error(W);
                  });
                }, Z.onCancel = (W) => {
                  this._fullReader.cancel(W), Z.ready.catch((y) => {
                    if (!this.destroyed)
                      throw y;
                  });
                };
              }), c.on("ReaderHeadersReady", (t) => {
                const Z = (0, _util.createPromiseCapability)(), W = this._fullReader;
                return W.headersReady.then(() => {
                  if (!W.isStreamingSupported || !W.isRangeSupported) {
                    if (this._lastProgress) {
                      var y;
                      (y = i.onProgress) === null || y === void 0 || y.call(i, this._lastProgress);
                    }
                    W.onProgress = (h) => {
                      var p;
                      (p = i.onProgress) === null || p === void 0 || p.call(i, {
                        loaded: h.loaded,
                        total: h.total
                      });
                    };
                  }
                  Z.resolve({
                    isStreamingSupported: W.isStreamingSupported,
                    isRangeSupported: W.isRangeSupported,
                    contentLength: W.contentLength
                  });
                }, Z.reject), Z.promise;
              }), c.on("GetRangeReader", (t, Z) => {
                (0, _util.assert)(this._networkStream, "GetRangeReader - no `IPDFStream` instance available.");
                const W = this._networkStream.getRangeReader(t.begin, t.end);
                if (!W) {
                  Z.close();
                  return;
                }
                Z.onPull = () => {
                  W.read().then(function(y) {
                    let {
                      value: h,
                      done: p
                    } = y;
                    if (p) {
                      Z.close();
                      return;
                    }
                    (0, _util.assert)((0, _util.isArrayBuffer)(h), "GetRangeReader - expected an ArrayBuffer."), Z.enqueue(new Uint8Array(h), 1, [h]);
                  }).catch((y) => {
                    Z.error(y);
                  });
                }, Z.onCancel = (y) => {
                  W.cancel(y), Z.ready.catch((h) => {
                    if (!this.destroyed)
                      throw h;
                  });
                };
              }), c.on("GetDoc", (t) => {
                let {
                  pdfInfo: Z
                } = t;
                this._numPages = Z.numPages, this._htmlForXfa = Z.htmlForXfa, delete Z.htmlForXfa, i._capability.resolve(new PDFDocumentProxy(Z, this));
              }), c.on("DocException", function(t) {
                let Z;
                switch (t.name) {
                  case "PasswordException":
                    Z = new _util.PasswordException(t.message, t.code);
                    break;
                  case "InvalidPDFException":
                    Z = new _util.InvalidPDFException(t.message);
                    break;
                  case "MissingPDFException":
                    Z = new _util.MissingPDFException(t.message);
                    break;
                  case "UnexpectedResponseException":
                    Z = new _util.UnexpectedResponseException(t.message, t.status);
                    break;
                  case "UnknownErrorException":
                    Z = new _util.UnknownErrorException(t.message, t.details);
                    break;
                  default:
                    (0, _util.unreachable)("DocException - expected a valid Error.");
                }
                i._capability.reject(Z);
              }), c.on("PasswordRequest", (t) => {
                if (this._passwordCapability = (0, _util.createPromiseCapability)(), i.onPassword) {
                  const Z = (W) => {
                    W instanceof Error ? this._passwordCapability.reject(W) : this._passwordCapability.resolve({
                      password: W
                    });
                  };
                  try {
                    i.onPassword(Z, t.code);
                  } catch (W) {
                    this._passwordCapability.reject(W);
                  }
                } else
                  this._passwordCapability.reject(new _util.PasswordException(t.message, t.code));
                return this._passwordCapability.promise;
              }), c.on("DataLoaded", (t) => {
                var Z;
                (Z = i.onProgress) === null || Z === void 0 || Z.call(i, {
                  loaded: t.length,
                  total: t.length
                }), this.downloadInfoCapability.resolve(t);
              }), c.on("StartRenderPage", (t) => {
                if (this.destroyed)
                  return;
                _classPrivateFieldGet(this, _pageCache).get(t.pageIndex)._startRenderPage(t.transparency, t.cacheKey);
              }), c.on("commonobj", (t) => {
                var Z;
                let [W, y, h] = t;
                if (!this.destroyed && !this.commonObjs.has(W))
                  switch (y) {
                    case "Font":
                      const p = this._params;
                      if ("error" in h) {
                        const x = h.error;
                        (0, _util.warn)(`Error during font loading: ${x}`), this.commonObjs.resolve(W, x);
                        break;
                      }
                      let X = null;
                      p.pdfBug && (Z = globalThis.FontInspector) !== null && Z !== void 0 && Z.enabled && (X = {
                        registerFont(x, n) {
                          globalThis.FontInspector.fontAdded(x, n);
                        }
                      });
                      const M = new _font_loader.FontFaceObject(h, {
                        isEvalSupported: p.isEvalSupported,
                        disableFontFace: p.disableFontFace,
                        ignoreErrors: p.ignoreErrors,
                        onUnsupportedFeature: this._onUnsupportedFeature.bind(this),
                        fontRegistry: X
                      });
                      this.fontLoader.bind(M).catch((x) => c.sendWithPromise("FontFallback", {
                        id: W
                      })).finally(() => {
                        !p.fontExtraProperties && M.data && (M.data = null), this.commonObjs.resolve(W, M);
                      });
                      break;
                    case "FontPath":
                    case "Image":
                      this.commonObjs.resolve(W, h);
                      break;
                    default:
                      throw new Error(`Got unknown common object type ${y}`);
                  }
              }), c.on("obj", (t) => {
                let [Z, W, y, h] = t;
                if (this.destroyed)
                  return;
                const p = _classPrivateFieldGet(this, _pageCache).get(W);
                if (!p.objs.has(Z))
                  switch (y) {
                    case "Image":
                      p.objs.resolve(Z, h);
                      const M = 8e6;
                      if (h) {
                        let x;
                        if (h.bitmap) {
                          const {
                            bitmap: n,
                            width: V,
                            height: S
                          } = h;
                          x = V * S * 4, p._bitmaps.add(n);
                        } else {
                          var X;
                          x = ((X = h.data) === null || X === void 0 ? void 0 : X.length) || 0;
                        }
                        x > M && (p.cleanupAfterRender = !0);
                      }
                      break;
                    case "Pattern":
                      p.objs.resolve(Z, h);
                      break;
                    default:
                      throw new Error(`Got unknown object type ${y}`);
                  }
              }), c.on("DocProgress", (t) => {
                var Z;
                this.destroyed || (Z = i.onProgress) === null || Z === void 0 || Z.call(i, {
                  loaded: t.loaded,
                  total: t.total
                });
              }), c.on("DocStats", (t) => {
                this.destroyed || _classPrivateFieldSet(this, _docStats, Object.freeze({
                  streamTypes: Object.freeze(t.streamTypes),
                  fontTypes: Object.freeze(t.fontTypes)
                }));
              }), c.on("UnsupportedFeature", this._onUnsupportedFeature.bind(this)), c.on("FetchBuiltInCMap", (t) => this.destroyed ? Promise.reject(new Error("Worker was destroyed.")) : this.CMapReaderFactory ? this.CMapReaderFactory.fetch(t) : Promise.reject(new Error("CMapReaderFactory not initialized, see the `useWorkerFetch` parameter."))), c.on("FetchStandardFontData", (t) => this.destroyed ? Promise.reject(new Error("Worker was destroyed.")) : this.StandardFontDataFactory ? this.StandardFontDataFactory.fetch(t) : Promise.reject(new Error("StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.")));
            }
            _onUnsupportedFeature(c) {
              var i, t;
              let {
                featureId: Z
              } = c;
              this.destroyed || (i = (t = this.loadingTask).onUnsupportedFeature) === null || i === void 0 || i.call(t, Z);
            }
            getData() {
              return this.messageHandler.sendWithPromise("GetData", null);
            }
            getPage(c) {
              if (!Number.isInteger(c) || c <= 0 || c > this._numPages)
                return Promise.reject(new Error("Invalid page request."));
              const i = c - 1, t = _classPrivateFieldGet(this, _pagePromises).get(i);
              if (t)
                return t;
              const Z = this.messageHandler.sendWithPromise("GetPage", {
                pageIndex: i
              }).then((W) => {
                if (this.destroyed)
                  throw new Error("Transport destroyed");
                const y = new PDFPageProxy(i, W, this, this._params.ownerDocument, this._params.pdfBug);
                return _classPrivateFieldGet(this, _pageCache).set(i, y), y;
              });
              return _classPrivateFieldGet(this, _pagePromises).set(i, Z), Z;
            }
            getPageIndex(c) {
              return typeof c != "object" || c === null || !Number.isInteger(c.num) || c.num < 0 || !Number.isInteger(c.gen) || c.gen < 0 ? Promise.reject(new Error("Invalid pageIndex request.")) : this.messageHandler.sendWithPromise("GetPageIndex", {
                num: c.num,
                gen: c.gen
              });
            }
            getAnnotations(c, i) {
              return this.messageHandler.sendWithPromise("GetAnnotations", {
                pageIndex: c,
                intent: i
              });
            }
            saveDocument() {
              var c, i;
              return this.messageHandler.sendWithPromise("SaveDocument", {
                isPureXfa: !!this._htmlForXfa,
                numPages: this._numPages,
                annotationStorage: this.annotationStorage.serializable,
                filename: (c = (i = this._fullReader) === null || i === void 0 ? void 0 : i.filename) !== null && c !== void 0 ? c : null
              }).finally(() => {
                this.annotationStorage.resetModified();
              });
            }
            getFieldObjects() {
              return this._getFieldObjectsPromise || (this._getFieldObjectsPromise = this.messageHandler.sendWithPromise("GetFieldObjects", null));
            }
            hasJSActions() {
              return this._hasJSActionsPromise || (this._hasJSActionsPromise = this.messageHandler.sendWithPromise("HasJSActions", null));
            }
            getCalculationOrderIds() {
              return this.messageHandler.sendWithPromise("GetCalculationOrderIds", null);
            }
            getDestinations() {
              return this.messageHandler.sendWithPromise("GetDestinations", null);
            }
            getDestination(c) {
              return typeof c != "string" ? Promise.reject(new Error("Invalid destination request.")) : this.messageHandler.sendWithPromise("GetDestination", {
                id: c
              });
            }
            getPageLabels() {
              return this.messageHandler.sendWithPromise("GetPageLabels", null);
            }
            getPageLayout() {
              return this.messageHandler.sendWithPromise("GetPageLayout", null);
            }
            getPageMode() {
              return this.messageHandler.sendWithPromise("GetPageMode", null);
            }
            getViewerPreferences() {
              return this.messageHandler.sendWithPromise("GetViewerPreferences", null);
            }
            getOpenAction() {
              return this.messageHandler.sendWithPromise("GetOpenAction", null);
            }
            getAttachments() {
              return this.messageHandler.sendWithPromise("GetAttachments", null);
            }
            getJavaScript() {
              return this.messageHandler.sendWithPromise("GetJavaScript", null);
            }
            getDocJSActions() {
              return this.messageHandler.sendWithPromise("GetDocJSActions", null);
            }
            getPageJSActions(c) {
              return this.messageHandler.sendWithPromise("GetPageJSActions", {
                pageIndex: c
              });
            }
            getStructTree(c) {
              return this.messageHandler.sendWithPromise("GetStructTree", {
                pageIndex: c
              });
            }
            getOutline() {
              return this.messageHandler.sendWithPromise("GetOutline", null);
            }
            getOptionalContentConfig() {
              return this.messageHandler.sendWithPromise("GetOptionalContentConfig", null).then((c) => new _optional_content_config.OptionalContentConfig(c));
            }
            getPermissions() {
              return this.messageHandler.sendWithPromise("GetPermissions", null);
            }
            getMetadata() {
              return _classPrivateFieldGet(this, _metadataPromise) || _classPrivateFieldSet(this, _metadataPromise, this.messageHandler.sendWithPromise("GetMetadata", null).then((c) => {
                var i, t, Z, W;
                return {
                  info: c[0],
                  metadata: c[1] ? new _metadata.Metadata(c[1]) : null,
                  contentDispositionFilename: (i = (t = this._fullReader) === null || t === void 0 ? void 0 : t.filename) !== null && i !== void 0 ? i : null,
                  contentLength: (Z = (W = this._fullReader) === null || W === void 0 ? void 0 : W.contentLength) !== null && Z !== void 0 ? Z : null
                };
              }));
            }
            getMarkInfo() {
              return this.messageHandler.sendWithPromise("GetMarkInfo", null);
            }
            async startCleanup() {
              let c = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
              if (await this.messageHandler.sendWithPromise("Cleanup", null), !this.destroyed) {
                for (const i of _classPrivateFieldGet(this, _pageCache).values())
                  if (!i.cleanup())
                    throw new Error(`startCleanup: Page ${i.pageNumber} is currently rendering.`);
                this.commonObjs.clear(), c || this.fontLoader.clear(), _classPrivateFieldSet(this, _metadataPromise, null), this._getFieldObjectsPromise = null, this._hasJSActionsPromise = null;
              }
            }
            get loadingParams() {
              const c = this._params;
              return (0, _util.shadow)(this, "loadingParams", {
                disableAutoFetch: c.disableAutoFetch,
                enableXfa: c.enableXfa
              });
            }
          }
          var _objs = /* @__PURE__ */ new WeakMap(), _ensureObj = /* @__PURE__ */ new WeakSet();
          class PDFObjects {
            constructor() {
              _classPrivateMethodInitSpec(this, _ensureObj), _classPrivateFieldInitSpec(this, _objs, {
                writable: !0,
                value: /* @__PURE__ */ Object.create(null)
              });
            }
            get(c) {
              let i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              if (i) {
                const Z = _classPrivateMethodGet(this, _ensureObj, _ensureObj2).call(this, c);
                return Z.capability.promise.then(() => i(Z.data)), null;
              }
              const t = _classPrivateFieldGet(this, _objs)[c];
              if (!(t != null && t.capability.settled))
                throw new Error(`Requesting object that isn't resolved yet ${c}.`);
              return t.data;
            }
            has(c) {
              const i = _classPrivateFieldGet(this, _objs)[c];
              return (i == null ? void 0 : i.capability.settled) || !1;
            }
            resolve(c) {
              let i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              const t = _classPrivateMethodGet(this, _ensureObj, _ensureObj2).call(this, c);
              t.data = i, t.capability.resolve();
            }
            clear() {
              _classPrivateFieldSet(this, _objs, /* @__PURE__ */ Object.create(null));
            }
          }
          function _ensureObj2(L) {
            const c = _classPrivateFieldGet(this, _objs)[L];
            return c || (_classPrivateFieldGet(this, _objs)[L] = {
              capability: (0, _util.createPromiseCapability)(),
              data: null
            });
          }
          var _internalRenderTask = /* @__PURE__ */ new WeakMap();
          class RenderTask {
            constructor(c) {
              _classPrivateFieldInitSpec(this, _internalRenderTask, {
                writable: !0,
                value: null
              }), _classPrivateFieldSet(this, _internalRenderTask, c), this.onContinue = null;
            }
            get promise() {
              return _classPrivateFieldGet(this, _internalRenderTask).capability.promise;
            }
            cancel() {
              _classPrivateFieldGet(this, _internalRenderTask).cancel();
            }
            get separateAnnots() {
              const {
                separateAnnots: c
              } = _classPrivateFieldGet(this, _internalRenderTask).operatorList;
              if (!c)
                return !1;
              const {
                annotationCanvasMap: i
              } = _classPrivateFieldGet(this, _internalRenderTask);
              return c.form || c.canvas && (i == null ? void 0 : i.size) > 0;
            }
          }
          exports.RenderTask = RenderTask;
          class InternalRenderTask {
            constructor(c) {
              let {
                callback: i,
                params: t,
                objs: Z,
                commonObjs: W,
                annotationCanvasMap: y,
                operatorList: h,
                pageIndex: p,
                canvasFactory: X,
                useRequestAnimationFrame: M = !1,
                pdfBug: x = !1,
                pageColors: n = null
              } = c;
              this.callback = i, this.params = t, this.objs = Z, this.commonObjs = W, this.annotationCanvasMap = y, this.operatorListIdx = null, this.operatorList = h, this._pageIndex = p, this.canvasFactory = X, this._pdfBug = x, this.pageColors = n, this.running = !1, this.graphicsReadyCallback = null, this.graphicsReady = !1, this._useRequestAnimationFrame = M === !0 && typeof window < "u", this.cancelled = !1, this.capability = (0, _util.createPromiseCapability)(), this.task = new RenderTask(this), this._cancelBound = this.cancel.bind(this), this._continueBound = this._continue.bind(this), this._scheduleNextBound = this._scheduleNext.bind(this), this._nextBound = this._next.bind(this), this._canvas = t.canvasContext.canvas;
            }
            get completed() {
              return this.capability.promise.catch(function() {
              });
            }
            initializeGraphics(c) {
              var i;
              let {
                transparency: t = !1,
                optionalContentConfig: Z
              } = c;
              if (this.cancelled)
                return;
              if (this._canvas) {
                if (_classStaticPrivateFieldSpecGet(InternalRenderTask, InternalRenderTask, _canvasInUse).has(this._canvas))
                  throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");
                _classStaticPrivateFieldSpecGet(InternalRenderTask, InternalRenderTask, _canvasInUse).add(this._canvas);
              }
              this._pdfBug && (i = globalThis.StepperManager) !== null && i !== void 0 && i.enabled && (this.stepper = globalThis.StepperManager.create(this._pageIndex), this.stepper.init(this.operatorList), this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint());
              const {
                canvasContext: W,
                viewport: y,
                transform: h,
                imageLayer: p,
                background: X
              } = this.params;
              this.gfx = new _canvas.CanvasGraphics(W, this.commonObjs, this.objs, this.canvasFactory, p, Z, this.annotationCanvasMap, this.pageColors), this.gfx.beginDrawing({
                transform: h,
                viewport: y,
                transparency: t,
                background: X
              }), this.operatorListIdx = 0, this.graphicsReady = !0, this.graphicsReadyCallback && this.graphicsReadyCallback();
            }
            cancel() {
              let c = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
              this.running = !1, this.cancelled = !0, this.gfx && this.gfx.endDrawing(), this._canvas && _classStaticPrivateFieldSpecGet(InternalRenderTask, InternalRenderTask, _canvasInUse).delete(this._canvas), this.callback(c || new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex + 1}`, "canvas"));
            }
            operatorListChanged() {
              if (!this.graphicsReady) {
                this.graphicsReadyCallback || (this.graphicsReadyCallback = this._continueBound);
                return;
              }
              this.stepper && this.stepper.updateOperatorList(this.operatorList), !this.running && this._continue();
            }
            _continue() {
              this.running = !0, !this.cancelled && (this.task.onContinue ? this.task.onContinue(this._scheduleNextBound) : this._scheduleNext());
            }
            _scheduleNext() {
              this._useRequestAnimationFrame ? window.requestAnimationFrame(() => {
                this._nextBound().catch(this._cancelBound);
              }) : Promise.resolve().then(this._nextBound).catch(this._cancelBound);
            }
            async _next() {
              this.cancelled || (this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper), this.operatorListIdx === this.operatorList.argsArray.length && (this.running = !1, this.operatorList.lastChunk && (this.gfx.endDrawing(), this._canvas && _classStaticPrivateFieldSpecGet(InternalRenderTask, InternalRenderTask, _canvasInUse).delete(this._canvas), this.callback())));
            }
          }
          var _canvasInUse = {
            value: /* @__PURE__ */ new WeakSet()
          };
          const version = "2.16.105";
          exports.version = version;
          const build = "172ccdbe5";
          exports.build = build;
        },
        /* 130 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.PrintAnnotationStorage = c.AnnotationStorage = void 0;
          var t = i(1), Z = i(131), W = i(135);
          function y(m, d, b) {
            V(m, d), d.set(m, b);
          }
          function h(m, d) {
            var b = M(m, d, "get");
            return p(m, b);
          }
          function p(m, d) {
            return d.get ? d.get.call(m) : d.value;
          }
          function X(m, d, b) {
            var N = M(m, d, "set");
            return x(m, N, b), b;
          }
          function M(m, d, b) {
            if (!d.has(m))
              throw new TypeError("attempted to " + b + " private field on non-instance");
            return d.get(m);
          }
          function x(m, d, b) {
            if (d.set)
              d.set.call(m, b);
            else {
              if (!d.writable)
                throw new TypeError("attempted to set read only private field");
              d.value = b;
            }
          }
          function n(m, d) {
            V(m, d), d.add(m);
          }
          function V(m, d) {
            if (d.has(m))
              throw new TypeError("Cannot initialize the same private elements twice on an object");
          }
          function S(m, d, b) {
            if (!d.has(m))
              throw new TypeError("attempted to get private field on non-instance");
            return b;
          }
          var o = /* @__PURE__ */ new WeakSet();
          class R {
            constructor() {
              n(this, o), this._storage = /* @__PURE__ */ new Map(), this._modified = !1, this.onSetModified = null, this.onResetModified = null, this.onAnnotationEditor = null;
            }
            getValue(d, b) {
              const N = this._storage.get(d);
              return N === void 0 ? b : Object.assign(b, N);
            }
            getRawValue(d) {
              return this._storage.get(d);
            }
            remove(d) {
              if (this._storage.delete(d), this._storage.size === 0 && this.resetModified(), typeof this.onAnnotationEditor == "function") {
                for (const b of this._storage.values())
                  if (b instanceof Z.AnnotationEditor)
                    return;
                this.onAnnotationEditor(null);
              }
            }
            setValue(d, b) {
              const N = this._storage.get(d);
              let G = !1;
              if (N !== void 0)
                for (const [r, j] of Object.entries(b))
                  N[r] !== j && (G = !0, N[r] = j);
              else
                G = !0, this._storage.set(d, b);
              G && S(this, o, J).call(this), b instanceof Z.AnnotationEditor && typeof this.onAnnotationEditor == "function" && this.onAnnotationEditor(b.constructor._type);
            }
            has(d) {
              return this._storage.has(d);
            }
            getAll() {
              return this._storage.size > 0 ? (0, t.objectFromMap)(this._storage) : null;
            }
            get size() {
              return this._storage.size;
            }
            resetModified() {
              this._modified && (this._modified = !1, typeof this.onResetModified == "function" && this.onResetModified());
            }
            get print() {
              return new e(this);
            }
            get serializable() {
              if (this._storage.size === 0)
                return null;
              const d = /* @__PURE__ */ new Map();
              for (const [b, N] of this._storage) {
                const G = N instanceof Z.AnnotationEditor ? N.serialize() : N;
                G && d.set(b, G);
              }
              return d;
            }
            static getHash(d) {
              if (!d)
                return "";
              const b = new W.MurmurHash3_64();
              for (const [N, G] of d)
                b.update(`${N}:${JSON.stringify(G)}`);
              return b.hexdigest();
            }
          }
          c.AnnotationStorage = R;
          function J() {
            this._modified || (this._modified = !0, typeof this.onSetModified == "function" && this.onSetModified());
          }
          var u = /* @__PURE__ */ new WeakMap();
          class e extends R {
            constructor(d) {
              super(), y(this, u, {
                writable: !0,
                value: null
              }), X(this, u, structuredClone(d.serializable));
            }
            get print() {
              (0, t.unreachable)("Should not call PrintAnnotationStorage.print");
            }
            get serializable() {
              return h(this, u);
            }
          }
          c.PrintAnnotationStorage = e;
        },
        /* 131 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.AnnotationEditor = void 0;
          var t = i(132), Z = i(1);
          function W(m, d, b) {
            return d in m ? Object.defineProperty(m, d, { value: b, enumerable: !0, configurable: !0, writable: !0 }) : m[d] = b, m;
          }
          function y(m, d, b) {
            h(m, d), d.set(m, b);
          }
          function h(m, d) {
            if (d.has(m))
              throw new TypeError("Cannot initialize the same private elements twice on an object");
          }
          function p(m, d, b) {
            var N = x(m, d, "set");
            return X(m, N, b), b;
          }
          function X(m, d, b) {
            if (d.set)
              d.set.call(m, b);
            else {
              if (!d.writable)
                throw new TypeError("attempted to set read only private field");
              d.value = b;
            }
          }
          function M(m, d) {
            var b = x(m, d, "get");
            return n(m, b);
          }
          function x(m, d, b) {
            if (!d.has(m))
              throw new TypeError("attempted to " + b + " private field on non-instance");
            return d.get(m);
          }
          function n(m, d) {
            return d.get ? d.get.call(m) : d.value;
          }
          var V = /* @__PURE__ */ new WeakMap(), S = /* @__PURE__ */ new WeakMap(), o = /* @__PURE__ */ new WeakMap(), R = /* @__PURE__ */ new WeakMap(), J = /* @__PURE__ */ new WeakMap(), u = /* @__PURE__ */ new WeakMap();
          class e {
            constructor(d) {
              y(this, V, {
                writable: !0,
                value: this.focusin.bind(this)
              }), y(this, S, {
                writable: !0,
                value: this.focusout.bind(this)
              }), y(this, o, {
                writable: !0,
                value: !1
              }), y(this, R, {
                writable: !0,
                value: !1
              }), y(this, J, {
                writable: !0,
                value: !1
              }), y(this, u, {
                writable: !0,
                value: e._zIndex++
              }), this.constructor === e && (0, Z.unreachable)("Cannot initialize AnnotationEditor."), this.parent = d.parent, this.id = d.id, this.width = this.height = null, this.pageIndex = d.parent.pageIndex, this.name = d.name, this.div = null;
              const [b, N] = this.parent.viewportBaseDimensions;
              this.x = d.x / b, this.y = d.y / N, this.rotation = this.parent.viewport.rotation, this.isAttachedToDOM = !1;
            }
            static get _defaultLineColor() {
              return (0, Z.shadow)(this, "_defaultLineColor", this._colorManager.getHexCode("CanvasText"));
            }
            setInBackground() {
              this.div.style.zIndex = 0;
            }
            setInForeground() {
              this.div.style.zIndex = M(this, u);
            }
            focusin(d) {
              M(this, o) ? p(this, o, !1) : this.parent.setSelected(this);
            }
            focusout(d) {
              if (!this.isAttachedToDOM)
                return;
              const b = d.relatedTarget;
              b != null && b.closest(`#${this.id}`) || (d.preventDefault(), this.parent.isMultipleSelection || this.commitOrRemove());
            }
            commitOrRemove() {
              this.isEmpty() ? this.remove() : this.commit();
            }
            commit() {
              this.parent.addToAnnotationStorage(this);
            }
            dragstart(d) {
              const b = this.parent.div.getBoundingClientRect();
              this.startX = d.clientX - b.x, this.startY = d.clientY - b.y, d.dataTransfer.setData("text/plain", this.id), d.dataTransfer.effectAllowed = "move";
            }
            setAt(d, b, N, G) {
              const [r, j] = this.parent.viewportBaseDimensions;
              [N, G] = this.screenToPageTranslation(N, G), this.x = (d + N) / r, this.y = (b + G) / j, this.div.style.left = `${100 * this.x}%`, this.div.style.top = `${100 * this.y}%`;
            }
            translate(d, b) {
              const [N, G] = this.parent.viewportBaseDimensions;
              [d, b] = this.screenToPageTranslation(d, b), this.x += d / N, this.y += b / G, this.div.style.left = `${100 * this.x}%`, this.div.style.top = `${100 * this.y}%`;
            }
            screenToPageTranslation(d, b) {
              const {
                rotation: N
              } = this.parent.viewport;
              switch (N) {
                case 90:
                  return [b, -d];
                case 180:
                  return [-d, -b];
                case 270:
                  return [-b, d];
                default:
                  return [d, b];
              }
            }
            setDims(d, b) {
              const [N, G] = this.parent.viewportBaseDimensions;
              this.div.style.width = `${100 * d / N}%`, this.div.style.height = `${100 * b / G}%`;
            }
            getInitialTranslation() {
              return [0, 0];
            }
            render() {
              this.div = document.createElement("div"), this.div.setAttribute("data-editor-rotation", (360 - this.rotation) % 360), this.div.className = this.name, this.div.setAttribute("id", this.id), this.div.setAttribute("tabIndex", 0), this.setInForeground(), this.div.addEventListener("focusin", M(this, V)), this.div.addEventListener("focusout", M(this, S));
              const [d, b] = this.getInitialTranslation();
              return this.translate(d, b), (0, t.bindEvents)(this, this.div, ["dragstart", "pointerdown"]), this.div;
            }
            pointerdown(d) {
              const b = t.KeyboardManager.platform.isMac;
              if (d.button !== 0 || d.ctrlKey && b) {
                d.preventDefault();
                return;
              }
              d.ctrlKey && !b || d.shiftKey || d.metaKey && b ? this.parent.toggleSelected(this) : this.parent.setSelected(this), p(this, o, !0);
            }
            getRect(d, b) {
              const [N, G] = this.parent.viewportBaseDimensions, [r, j] = this.parent.pageDimensions, D = r * d / N, f = j * b / G, P = this.x * r, B = this.y * j, A = this.width * r, H = this.height * j;
              switch (this.rotation) {
                case 0:
                  return [P + D, j - B - f - H, P + D + A, j - B - f];
                case 90:
                  return [P + f, j - B + D, P + f + H, j - B + D + A];
                case 180:
                  return [P - D - A, j - B + f, P - D, j - B + f + H];
                case 270:
                  return [P - f - H, j - B - D - A, P - f, j - B - D];
                default:
                  throw new Error("Invalid rotation");
              }
            }
            getRectInCurrentCoords(d, b) {
              const [N, G, r, j] = d, D = r - N, f = j - G;
              switch (this.rotation) {
                case 0:
                  return [N, b - j, D, f];
                case 90:
                  return [N, b - G, f, D];
                case 180:
                  return [r, b - G, D, f];
                case 270:
                  return [r, b - j, f, D];
                default:
                  throw new Error("Invalid rotation");
              }
            }
            onceAdded() {
            }
            isEmpty() {
              return !1;
            }
            enableEditMode() {
              p(this, J, !0);
            }
            disableEditMode() {
              p(this, J, !1);
            }
            isInEditMode() {
              return M(this, J);
            }
            shouldGetKeyboardEvents() {
              return !1;
            }
            needsToBeRebuilt() {
              return this.div && !this.isAttachedToDOM;
            }
            rebuild() {
              var d;
              (d = this.div) === null || d === void 0 || d.addEventListener("focusin", M(this, V));
            }
            serialize() {
              (0, Z.unreachable)("An editor must be serializable");
            }
            static deserialize(d, b) {
              const N = new this.prototype.constructor({
                parent: b,
                id: b.getNextId()
              });
              N.rotation = d.rotation;
              const [G, r] = b.pageDimensions, [j, D, f, P] = N.getRectInCurrentCoords(d.rect, r);
              return N.x = j / G, N.y = D / r, N.width = f / G, N.height = P / r, N;
            }
            remove() {
              this.div.removeEventListener("focusin", M(this, V)), this.div.removeEventListener("focusout", M(this, S)), this.isEmpty() || this.commit(), this.parent.remove(this);
            }
            select() {
              var d;
              (d = this.div) === null || d === void 0 || d.classList.add("selectedEditor");
            }
            unselect() {
              var d;
              (d = this.div) === null || d === void 0 || d.classList.remove("selectedEditor");
            }
            updateParams(d, b) {
            }
            disableEditing() {
            }
            enableEditing() {
            }
            get propertiesToUpdate() {
              return {};
            }
            get contentDiv() {
              return this.div;
            }
            get isEditing() {
              return M(this, R);
            }
            set isEditing(d) {
              p(this, R, d), d ? (this.parent.setSelected(this), this.parent.setActiveEditor(this)) : this.parent.setActiveEditor(null);
            }
          }
          c.AnnotationEditor = e, W(e, "_colorManager", new t.ColorManager()), W(e, "_zIndex", 1);
        },
        /* 132 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.KeyboardManager = c.CommandManager = c.ColorManager = c.AnnotationEditorUIManager = void 0, c.bindEvents = o, c.opacityToHex = R;
          var t = i(1), Z = i(133);
          function W(ol, cl, Il) {
            return cl in ol ? Object.defineProperty(ol, cl, { value: Il, enumerable: !0, configurable: !0, writable: !0 }) : ol[cl] = Il, ol;
          }
          function y(ol, cl) {
            X(ol, cl), cl.add(ol);
          }
          function h(ol, cl, Il) {
            if (!cl.has(ol))
              throw new TypeError("attempted to get private field on non-instance");
            return Il;
          }
          function p(ol, cl, Il) {
            X(ol, cl), cl.set(ol, Il);
          }
          function X(ol, cl) {
            if (cl.has(ol))
              throw new TypeError("Cannot initialize the same private elements twice on an object");
          }
          function M(ol, cl, Il) {
            var Jl = V(ol, cl, "set");
            return x(ol, Jl, Il), Il;
          }
          function x(ol, cl, Il) {
            if (cl.set)
              cl.set.call(ol, Il);
            else {
              if (!cl.writable)
                throw new TypeError("attempted to set read only private field");
              cl.value = Il;
            }
          }
          function n(ol, cl) {
            var Il = V(ol, cl, "get");
            return S(ol, Il);
          }
          function V(ol, cl, Il) {
            if (!cl.has(ol))
              throw new TypeError("attempted to " + Il + " private field on non-instance");
            return cl.get(ol);
          }
          function S(ol, cl) {
            return cl.get ? cl.get.call(ol) : cl.value;
          }
          function o(ol, cl, Il) {
            for (const Jl of Il)
              cl.addEventListener(Jl, ol[Jl].bind(ol));
          }
          function R(ol) {
            return Math.round(Math.min(255, Math.max(1, 255 * ol))).toString(16).padStart(2, "0");
          }
          var J = /* @__PURE__ */ new WeakMap();
          class u {
            constructor() {
              p(this, J, {
                writable: !0,
                value: 0
              });
            }
            getId() {
              var cl, Il;
              return `${t.AnnotationEditorPrefix}${M(this, J, (cl = n(this, J), Il = cl++, cl)), Il}`;
            }
          }
          var e = /* @__PURE__ */ new WeakMap(), m = /* @__PURE__ */ new WeakMap(), d = /* @__PURE__ */ new WeakMap(), b = /* @__PURE__ */ new WeakMap();
          class N {
            constructor() {
              let cl = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 128;
              p(this, e, {
                writable: !0,
                value: []
              }), p(this, m, {
                writable: !0,
                value: !1
              }), p(this, d, {
                writable: !0,
                value: void 0
              }), p(this, b, {
                writable: !0,
                value: -1
              }), M(this, d, cl);
            }
            add(cl) {
              let {
                cmd: Il,
                undo: Jl,
                mustExec: fl,
                type: Nl = NaN,
                overwriteIfSameType: zl = !1,
                keepUndo: kl = !1
              } = cl;
              if (fl && Il(), n(this, m))
                return;
              const nl = {
                cmd: Il,
                undo: Jl,
                type: Nl
              };
              if (n(this, b) === -1) {
                n(this, e).length > 0 && (n(this, e).length = 0), M(this, b, 0), n(this, e).push(nl);
                return;
              }
              if (zl && n(this, e)[n(this, b)].type === Nl) {
                kl && (nl.undo = n(this, e)[n(this, b)].undo), n(this, e)[n(this, b)] = nl;
                return;
              }
              const ll = n(this, b) + 1;
              ll === n(this, d) ? n(this, e).splice(0, 1) : (M(this, b, ll), ll < n(this, e).length && n(this, e).splice(ll)), n(this, e).push(nl);
            }
            undo() {
              n(this, b) !== -1 && (M(this, m, !0), n(this, e)[n(this, b)].undo(), M(this, m, !1), M(this, b, n(this, b) - 1));
            }
            redo() {
              n(this, b) < n(this, e).length - 1 && (M(this, b, n(this, b) + 1), M(this, m, !0), n(this, e)[n(this, b)].cmd(), M(this, m, !1));
            }
            hasSomethingToUndo() {
              return n(this, b) !== -1;
            }
            hasSomethingToRedo() {
              return n(this, b) < n(this, e).length - 1;
            }
            destroy() {
              M(this, e, null);
            }
          }
          c.CommandManager = N;
          var G = /* @__PURE__ */ new WeakSet();
          class r {
            constructor(cl) {
              y(this, G), this.buffer = [], this.callbacks = /* @__PURE__ */ new Map(), this.allKeys = /* @__PURE__ */ new Set();
              const Il = r.platform.isMac;
              for (const [Jl, fl] of cl)
                for (const Nl of Jl) {
                  const zl = Nl.startsWith("mac+");
                  Il && zl ? (this.callbacks.set(Nl.slice(4), fl), this.allKeys.add(Nl.split("+").at(-1))) : !Il && !zl && (this.callbacks.set(Nl, fl), this.allKeys.add(Nl.split("+").at(-1)));
                }
            }
            static get platform() {
              const cl = typeof navigator < "u" ? navigator.platform : "";
              return (0, t.shadow)(this, "platform", {
                isWin: cl.includes("Win"),
                isMac: cl.includes("Mac")
              });
            }
            exec(cl, Il) {
              if (!this.allKeys.has(Il.key))
                return;
              const Jl = this.callbacks.get(h(this, G, j).call(this, Il));
              Jl && (Jl.bind(cl)(), Il.stopPropagation(), Il.preventDefault());
            }
          }
          c.KeyboardManager = r;
          function j(ol) {
            ol.altKey && this.buffer.push("alt"), ol.ctrlKey && this.buffer.push("ctrl"), ol.metaKey && this.buffer.push("meta"), ol.shiftKey && this.buffer.push("shift"), this.buffer.push(ol.key);
            const cl = this.buffer.join("+");
            return this.buffer.length = 0, cl;
          }
          var D = /* @__PURE__ */ new WeakMap();
          class f {
            constructor() {
              p(this, D, {
                writable: !0,
                value: null
              });
            }
            copy(cl) {
              cl && (Array.isArray(cl) ? M(this, D, cl.map((Il) => Il.serialize())) : M(this, D, [cl.serialize()]), M(this, D, n(this, D).filter((Il) => !!Il)), n(this, D).length === 0 && M(this, D, null));
            }
            paste() {
              return n(this, D);
            }
            isEmpty() {
              return n(this, D) === null;
            }
            destroy() {
              M(this, D, null);
            }
          }
          class P {
            get _colors() {
              const cl = /* @__PURE__ */ new Map([["CanvasText", null], ["Canvas", null]]);
              return (0, Z.getColorValues)(cl), (0, t.shadow)(this, "_colors", cl);
            }
            convert(cl) {
              const Il = (0, Z.getRGB)(cl);
              if (!window.matchMedia("(forced-colors: active)").matches)
                return Il;
              for (const [Jl, fl] of this._colors)
                if (fl.every((Nl, zl) => Nl === Il[zl]))
                  return P._colorsMapping.get(Jl);
              return Il;
            }
            getHexCode(cl) {
              const Il = this._colors.get(cl);
              return Il ? t.Util.makeHexColor(...Il) : cl;
            }
          }
          c.ColorManager = P, W(P, "_colorsMapping", /* @__PURE__ */ new Map([["CanvasText", [0, 0, 0]], ["Canvas", [255, 255, 255]]]));
          var B = /* @__PURE__ */ new WeakMap(), A = /* @__PURE__ */ new WeakMap(), H = /* @__PURE__ */ new WeakMap(), O = /* @__PURE__ */ new WeakMap(), U = /* @__PURE__ */ new WeakMap(), k = /* @__PURE__ */ new WeakMap(), q = /* @__PURE__ */ new WeakMap(), al = /* @__PURE__ */ new WeakMap(), Ml = /* @__PURE__ */ new WeakMap(), wl = /* @__PURE__ */ new WeakMap(), Q = /* @__PURE__ */ new WeakMap(), T = /* @__PURE__ */ new WeakMap(), w = /* @__PURE__ */ new WeakMap(), g = /* @__PURE__ */ new WeakMap(), K = /* @__PURE__ */ new WeakMap(), a = /* @__PURE__ */ new WeakMap(), Y = /* @__PURE__ */ new WeakMap(), z = /* @__PURE__ */ new WeakSet(), C = /* @__PURE__ */ new WeakSet(), F = /* @__PURE__ */ new WeakSet(), v = /* @__PURE__ */ new WeakSet(), $ = /* @__PURE__ */ new WeakSet(), il = /* @__PURE__ */ new WeakSet(), dl = /* @__PURE__ */ new WeakSet(), el = /* @__PURE__ */ new WeakSet(), bl = /* @__PURE__ */ new WeakSet();
          class ml {
            constructor(cl, Il) {
              y(this, bl), y(this, el), y(this, dl), y(this, il), y(this, $), y(this, v), y(this, F), y(this, C), y(this, z), p(this, B, {
                writable: !0,
                value: null
              }), p(this, A, {
                writable: !0,
                value: /* @__PURE__ */ new Map()
              }), p(this, H, {
                writable: !0,
                value: /* @__PURE__ */ new Map()
              }), p(this, O, {
                writable: !0,
                value: new f()
              }), p(this, U, {
                writable: !0,
                value: new N()
              }), p(this, k, {
                writable: !0,
                value: 0
              }), p(this, q, {
                writable: !0,
                value: null
              }), p(this, al, {
                writable: !0,
                value: null
              }), p(this, Ml, {
                writable: !0,
                value: new u()
              }), p(this, wl, {
                writable: !0,
                value: !1
              }), p(this, Q, {
                writable: !0,
                value: t.AnnotationEditorType.NONE
              }), p(this, T, {
                writable: !0,
                value: /* @__PURE__ */ new Set()
              }), p(this, w, {
                writable: !0,
                value: this.keydown.bind(this)
              }), p(this, g, {
                writable: !0,
                value: this.onEditingAction.bind(this)
              }), p(this, K, {
                writable: !0,
                value: this.onPageChanging.bind(this)
              }), p(this, a, {
                writable: !0,
                value: {
                  isEditing: !1,
                  isEmpty: !0,
                  hasEmptyClipboard: !0,
                  hasSomethingToUndo: !1,
                  hasSomethingToRedo: !1,
                  hasSelectedEditor: !1
                }
              }), p(this, Y, {
                writable: !0,
                value: null
              }), M(this, Y, cl), M(this, al, Il), n(this, al)._on("editingaction", n(this, g)), n(this, al)._on("pagechanging", n(this, K));
            }
            destroy() {
              h(this, C, Yl).call(this), n(this, al)._off("editingaction", n(this, g)), n(this, al)._off("pagechanging", n(this, K));
              for (const cl of n(this, H).values())
                cl.destroy();
              n(this, H).clear(), n(this, A).clear(), M(this, B, null), n(this, T).clear(), n(this, O).destroy(), n(this, U).destroy();
            }
            onPageChanging(cl) {
              let {
                pageNumber: Il
              } = cl;
              M(this, k, Il - 1);
            }
            focusMainContainer() {
              n(this, Y).focus();
            }
            keydown(cl) {
              var Il;
              (Il = this.getActive()) !== null && Il !== void 0 && Il.shouldGetKeyboardEvents() || ml._keyboardManager.exec(this, cl);
            }
            onEditingAction(cl) {
              ["undo", "redo", "cut", "copy", "paste", "delete", "selectAll"].includes(cl.name) && this[cl.name]();
            }
            setEditingState(cl) {
              cl ? (h(this, z, Gl).call(this), h(this, F, yl).call(this, {
                isEditing: n(this, Q) !== t.AnnotationEditorType.NONE,
                isEmpty: h(this, el, Al).call(this),
                hasSomethingToUndo: n(this, U).hasSomethingToUndo(),
                hasSomethingToRedo: n(this, U).hasSomethingToRedo(),
                hasSelectedEditor: !1,
                hasEmptyClipboard: n(this, O).isEmpty()
              })) : (h(this, C, Yl).call(this), h(this, F, yl).call(this, {
                isEditing: !1
              }));
            }
            registerEditorTypes(cl) {
              M(this, q, cl);
              for (const Il of n(this, q))
                h(this, v, Vl).call(this, Il.defaultPropertiesToUpdate);
            }
            getId() {
              return n(this, Ml).getId();
            }
            addLayer(cl) {
              n(this, H).set(cl.pageIndex, cl), n(this, wl) ? cl.enable() : cl.disable();
            }
            removeLayer(cl) {
              n(this, H).delete(cl.pageIndex);
            }
            updateMode(cl) {
              if (M(this, Q, cl), cl === t.AnnotationEditorType.NONE)
                this.setEditingState(!1), h(this, il, Xl).call(this);
              else {
                this.setEditingState(!0), h(this, $, Dl).call(this);
                for (const Il of n(this, H).values())
                  Il.updateMode(cl);
              }
            }
            updateToolbar(cl) {
              cl !== n(this, Q) && n(this, al).dispatch("switchannotationeditormode", {
                source: this,
                mode: cl
              });
            }
            updateParams(cl, Il) {
              for (const Jl of n(this, T))
                Jl.updateParams(cl, Il);
              for (const Jl of n(this, q))
                Jl.updateDefaultParams(cl, Il);
            }
            getEditors(cl) {
              const Il = [];
              for (const Jl of n(this, A).values())
                Jl.pageIndex === cl && Il.push(Jl);
              return Il;
            }
            getEditor(cl) {
              return n(this, A).get(cl);
            }
            addEditor(cl) {
              n(this, A).set(cl.id, cl);
            }
            removeEditor(cl) {
              n(this, A).delete(cl.id), this.unselect(cl);
            }
            setActiveEditor(cl) {
              n(this, B) !== cl && (M(this, B, cl), cl && h(this, v, Vl).call(this, cl.propertiesToUpdate));
            }
            toggleSelected(cl) {
              if (n(this, T).has(cl)) {
                n(this, T).delete(cl), cl.unselect(), h(this, F, yl).call(this, {
                  hasSelectedEditor: this.hasSelection
                });
                return;
              }
              n(this, T).add(cl), cl.select(), h(this, v, Vl).call(this, cl.propertiesToUpdate), h(this, F, yl).call(this, {
                hasSelectedEditor: !0
              });
            }
            setSelected(cl) {
              for (const Il of n(this, T))
                Il !== cl && Il.unselect();
              n(this, T).clear(), n(this, T).add(cl), cl.select(), h(this, v, Vl).call(this, cl.propertiesToUpdate), h(this, F, yl).call(this, {
                hasSelectedEditor: !0
              });
            }
            isSelected(cl) {
              return n(this, T).has(cl);
            }
            unselect(cl) {
              cl.unselect(), n(this, T).delete(cl), h(this, F, yl).call(this, {
                hasSelectedEditor: this.hasSelection
              });
            }
            get hasSelection() {
              return n(this, T).size !== 0;
            }
            undo() {
              n(this, U).undo(), h(this, F, yl).call(this, {
                hasSomethingToUndo: n(this, U).hasSomethingToUndo(),
                hasSomethingToRedo: !0,
                isEmpty: h(this, el, Al).call(this)
              });
            }
            redo() {
              n(this, U).redo(), h(this, F, yl).call(this, {
                hasSomethingToUndo: !0,
                hasSomethingToRedo: n(this, U).hasSomethingToRedo(),
                isEmpty: h(this, el, Al).call(this)
              });
            }
            addCommands(cl) {
              n(this, U).add(cl), h(this, F, yl).call(this, {
                hasSomethingToUndo: !0,
                hasSomethingToRedo: !1,
                isEmpty: h(this, el, Al).call(this)
              });
            }
            delete() {
              if (n(this, B) && n(this, B).commitOrRemove(), !this.hasSelection)
                return;
              const cl = [...n(this, T)], Il = () => {
                for (const fl of cl)
                  fl.remove();
              }, Jl = () => {
                for (const fl of cl)
                  h(this, dl, Hl).call(this, fl);
              };
              this.addCommands({
                cmd: Il,
                undo: Jl,
                mustExec: !0
              });
            }
            copy() {
              if (n(this, B) && n(this, B).commitOrRemove(), this.hasSelection) {
                const cl = [];
                for (const Il of n(this, T))
                  Il.isEmpty() || cl.push(Il);
                if (cl.length === 0)
                  return;
                n(this, O).copy(cl), h(this, F, yl).call(this, {
                  hasEmptyClipboard: !1
                });
              }
            }
            cut() {
              this.copy(), this.delete();
            }
            paste() {
              if (n(this, O).isEmpty())
                return;
              this.unselectAll();
              const cl = n(this, H).get(n(this, k)), Il = n(this, O).paste().map((Nl) => cl.deserialize(Nl)), Jl = () => {
                for (const Nl of Il)
                  h(this, dl, Hl).call(this, Nl);
                h(this, bl, Sl).call(this, Il);
              }, fl = () => {
                for (const Nl of Il)
                  Nl.remove();
              };
              this.addCommands({
                cmd: Jl,
                undo: fl,
                mustExec: !0
              });
            }
            selectAll() {
              for (const cl of n(this, T))
                cl.commit();
              h(this, bl, Sl).call(this, n(this, A).values());
            }
            unselectAll() {
              if (n(this, B)) {
                n(this, B).commitOrRemove();
                return;
              }
              if (h(this, bl, Sl).size !== 0) {
                for (const cl of n(this, T))
                  cl.unselect();
                n(this, T).clear(), h(this, F, yl).call(this, {
                  hasSelectedEditor: !1
                });
              }
            }
            isActive(cl) {
              return n(this, B) === cl;
            }
            getActive() {
              return n(this, B);
            }
            getMode() {
              return n(this, Q);
            }
          }
          c.AnnotationEditorUIManager = ml;
          function Gl() {
            n(this, Y).addEventListener("keydown", n(this, w));
          }
          function Yl() {
            n(this, Y).removeEventListener("keydown", n(this, w));
          }
          function yl(ol) {
            Object.entries(ol).some((Il) => {
              let [Jl, fl] = Il;
              return n(this, a)[Jl] !== fl;
            }) && n(this, al).dispatch("annotationeditorstateschanged", {
              source: this,
              details: Object.assign(n(this, a), ol)
            });
          }
          function Vl(ol) {
            n(this, al).dispatch("annotationeditorparamschanged", {
              source: this,
              details: ol
            });
          }
          function Dl() {
            if (!n(this, wl)) {
              M(this, wl, !0);
              for (const ol of n(this, H).values())
                ol.enable();
            }
          }
          function Xl() {
            if (this.unselectAll(), n(this, wl)) {
              M(this, wl, !1);
              for (const ol of n(this, H).values())
                ol.disable();
            }
          }
          function Hl(ol) {
            const cl = n(this, H).get(ol.pageIndex);
            cl ? cl.addOrRebuild(ol) : this.addEditor(ol);
          }
          function Al() {
            if (n(this, A).size === 0)
              return !0;
            if (n(this, A).size === 1)
              for (const ol of n(this, A).values())
                return ol.isEmpty();
            return !1;
          }
          function Sl(ol) {
            n(this, T).clear();
            for (const cl of ol)
              cl.isEmpty() || (n(this, T).add(cl), cl.select());
            h(this, F, yl).call(this, {
              hasSelectedEditor: !0
            });
          }
          W(ml, "_keyboardManager", new r([[["ctrl+a", "mac+meta+a"], ml.prototype.selectAll], [["ctrl+c", "mac+meta+c"], ml.prototype.copy], [["ctrl+v", "mac+meta+v"], ml.prototype.paste], [["ctrl+x", "mac+meta+x"], ml.prototype.cut], [["ctrl+z", "mac+meta+z"], ml.prototype.undo], [["ctrl+y", "ctrl+shift+Z", "mac+meta+shift+Z"], ml.prototype.redo], [["Backspace", "alt+Backspace", "ctrl+Backspace", "shift+Backspace", "mac+Backspace", "mac+alt+Backspace", "mac+ctrl+Backspace", "Delete", "ctrl+Delete", "shift+Delete"], ml.prototype.delete], [["Escape", "mac+Escape"], ml.prototype.unselectAll]]));
        },
        /* 133 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.StatTimer = c.RenderingCancelledException = c.PixelsPerInch = c.PageViewport = c.PDFDateString = c.DOMStandardFontDataFactory = c.DOMSVGFactory = c.DOMCanvasFactory = c.DOMCMapReaderFactory = c.AnnotationPrefix = void 0, c.deprecated = N, c.getColorValues = f, c.getCurrentTransform = P, c.getCurrentTransformInverse = B, c.getFilenameFromUrl = u, c.getPdfFilenameFromUrl = e, c.getRGB = D, c.getXfaPageViewport = j, c.isDataScheme = R, c.isPdfFile = J, c.isValidFetchUrl = d, c.loadScript = b;
          var t = i(134), Z = i(1);
          function W(A, H, O) {
            return H in A ? Object.defineProperty(A, H, { value: O, enumerable: !0, configurable: !0, writable: !0 }) : A[H] = O, A;
          }
          const y = "http://www.w3.org/2000/svg", h = "pdfjs_internal_id_";
          c.AnnotationPrefix = h;
          class p {
          }
          c.PixelsPerInch = p, W(p, "CSS", 96), W(p, "PDF", 72), W(p, "PDF_TO_CSS_UNITS", p.CSS / p.PDF);
          class X extends t.BaseCanvasFactory {
            constructor() {
              let {
                ownerDocument: H = globalThis.document
              } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              super(), this._document = H;
            }
            _createCanvas(H, O) {
              const U = this._document.createElement("canvas");
              return U.width = H, U.height = O, U;
            }
          }
          c.DOMCanvasFactory = X;
          async function M(A) {
            let H = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
            if (d(A, document.baseURI)) {
              const O = await fetch(A);
              if (!O.ok)
                throw new Error(O.statusText);
              return H ? new Uint8Array(await O.arrayBuffer()) : (0, Z.stringToBytes)(await O.text());
            }
            return new Promise((O, U) => {
              const k = new XMLHttpRequest();
              k.open("GET", A, !0), H && (k.responseType = "arraybuffer"), k.onreadystatechange = () => {
                if (k.readyState === XMLHttpRequest.DONE) {
                  if (k.status === 200 || k.status === 0) {
                    let q;
                    if (H && k.response ? q = new Uint8Array(k.response) : !H && k.responseText && (q = (0, Z.stringToBytes)(k.responseText)), q) {
                      O(q);
                      return;
                    }
                  }
                  U(new Error(k.statusText));
                }
              }, k.send(null);
            });
          }
          class x extends t.BaseCMapReaderFactory {
            _fetchData(H, O) {
              return M(H, this.isCompressed).then((U) => ({
                cMapData: U,
                compressionType: O
              }));
            }
          }
          c.DOMCMapReaderFactory = x;
          class n extends t.BaseStandardFontDataFactory {
            _fetchData(H) {
              return M(H, !0);
            }
          }
          c.DOMStandardFontDataFactory = n;
          class V extends t.BaseSVGFactory {
            _createSVG(H) {
              return document.createElementNS(y, H);
            }
          }
          c.DOMSVGFactory = V;
          class S {
            constructor(H) {
              let {
                viewBox: O,
                scale: U,
                rotation: k,
                offsetX: q = 0,
                offsetY: al = 0,
                dontFlip: Ml = !1
              } = H;
              this.viewBox = O, this.scale = U, this.rotation = k, this.offsetX = q, this.offsetY = al;
              const wl = (O[2] + O[0]) / 2, Q = (O[3] + O[1]) / 2;
              let T, w, g, K;
              switch (k %= 360, k < 0 && (k += 360), k) {
                case 180:
                  T = -1, w = 0, g = 0, K = 1;
                  break;
                case 90:
                  T = 0, w = 1, g = 1, K = 0;
                  break;
                case 270:
                  T = 0, w = -1, g = -1, K = 0;
                  break;
                case 0:
                  T = 1, w = 0, g = 0, K = -1;
                  break;
                default:
                  throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.");
              }
              Ml && (g = -g, K = -K);
              let a, Y, z, C;
              T === 0 ? (a = Math.abs(Q - O[1]) * U + q, Y = Math.abs(wl - O[0]) * U + al, z = Math.abs(O[3] - O[1]) * U, C = Math.abs(O[2] - O[0]) * U) : (a = Math.abs(wl - O[0]) * U + q, Y = Math.abs(Q - O[1]) * U + al, z = Math.abs(O[2] - O[0]) * U, C = Math.abs(O[3] - O[1]) * U), this.transform = [T * U, w * U, g * U, K * U, a - T * U * wl - g * U * Q, Y - w * U * wl - K * U * Q], this.width = z, this.height = C;
            }
            clone() {
              let {
                scale: H = this.scale,
                rotation: O = this.rotation,
                offsetX: U = this.offsetX,
                offsetY: k = this.offsetY,
                dontFlip: q = !1
              } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              return new S({
                viewBox: this.viewBox.slice(),
                scale: H,
                rotation: O,
                offsetX: U,
                offsetY: k,
                dontFlip: q
              });
            }
            convertToViewportPoint(H, O) {
              return Z.Util.applyTransform([H, O], this.transform);
            }
            convertToViewportRectangle(H) {
              const O = Z.Util.applyTransform([H[0], H[1]], this.transform), U = Z.Util.applyTransform([H[2], H[3]], this.transform);
              return [O[0], O[1], U[0], U[1]];
            }
            convertToPdfPoint(H, O) {
              return Z.Util.applyInverseTransform([H, O], this.transform);
            }
          }
          c.PageViewport = S;
          class o extends Z.BaseException {
            constructor(H, O) {
              super(H, "RenderingCancelledException"), this.type = O;
            }
          }
          c.RenderingCancelledException = o;
          function R(A) {
            const H = A.length;
            let O = 0;
            for (; O < H && A[O].trim() === ""; )
              O++;
            return A.substring(O, O + 5).toLowerCase() === "data:";
          }
          function J(A) {
            return typeof A == "string" && /\.pdf$/i.test(A);
          }
          function u(A) {
            const H = A.indexOf("#"), O = A.indexOf("?"), U = Math.min(H > 0 ? H : A.length, O > 0 ? O : A.length);
            return A.substring(A.lastIndexOf("/", U) + 1, U);
          }
          function e(A) {
            let H = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "document.pdf";
            if (typeof A != "string")
              return H;
            if (R(A))
              return (0, Z.warn)('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.'), H;
            const O = /^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/, U = /[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i, k = O.exec(A);
            let q = U.exec(k[1]) || U.exec(k[2]) || U.exec(k[3]);
            if (q && (q = q[0], q.includes("%")))
              try {
                q = U.exec(decodeURIComponent(q))[0];
              } catch {
              }
            return q || H;
          }
          class m {
            constructor() {
              this.started = /* @__PURE__ */ Object.create(null), this.times = [];
            }
            time(H) {
              H in this.started && (0, Z.warn)(`Timer is already running for ${H}`), this.started[H] = Date.now();
            }
            timeEnd(H) {
              H in this.started || (0, Z.warn)(`Timer has not been started for ${H}`), this.times.push({
                name: H,
                start: this.started[H],
                end: Date.now()
              }), delete this.started[H];
            }
            toString() {
              const H = [];
              let O = 0;
              for (const U of this.times) {
                const k = U.name;
                k.length > O && (O = k.length);
              }
              for (const U of this.times) {
                const k = U.end - U.start;
                H.push(`${U.name.padEnd(O)} ${k}ms
`);
              }
              return H.join("");
            }
          }
          c.StatTimer = m;
          function d(A, H) {
            try {
              const {
                protocol: O
              } = H ? new URL(A, H) : new URL(A);
              return O === "http:" || O === "https:";
            } catch {
              return !1;
            }
          }
          function b(A) {
            let H = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
            return new Promise((O, U) => {
              const k = document.createElement("script");
              k.src = A, k.onload = function(q) {
                H && k.remove(), O(q);
              }, k.onerror = function() {
                U(new Error(`Cannot load script at: ${k.src}`));
              }, (document.head || document.documentElement).append(k);
            });
          }
          function N(A) {
            console.log("Deprecated API usage: " + A);
          }
          let G;
          class r {
            static toDateObject(H) {
              if (!H || typeof H != "string")
                return null;
              G || (G = new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?"));
              const O = G.exec(H);
              if (!O)
                return null;
              const U = parseInt(O[1], 10);
              let k = parseInt(O[2], 10);
              k = k >= 1 && k <= 12 ? k - 1 : 0;
              let q = parseInt(O[3], 10);
              q = q >= 1 && q <= 31 ? q : 1;
              let al = parseInt(O[4], 10);
              al = al >= 0 && al <= 23 ? al : 0;
              let Ml = parseInt(O[5], 10);
              Ml = Ml >= 0 && Ml <= 59 ? Ml : 0;
              let wl = parseInt(O[6], 10);
              wl = wl >= 0 && wl <= 59 ? wl : 0;
              const Q = O[7] || "Z";
              let T = parseInt(O[8], 10);
              T = T >= 0 && T <= 23 ? T : 0;
              let w = parseInt(O[9], 10) || 0;
              return w = w >= 0 && w <= 59 ? w : 0, Q === "-" ? (al += T, Ml += w) : Q === "+" && (al -= T, Ml -= w), new Date(Date.UTC(U, k, q, al, Ml, wl));
            }
          }
          c.PDFDateString = r;
          function j(A, H) {
            let {
              scale: O = 1,
              rotation: U = 0
            } = H;
            const {
              width: k,
              height: q
            } = A.attributes.style, al = [0, 0, parseInt(k), parseInt(q)];
            return new S({
              viewBox: al,
              scale: O,
              rotation: U
            });
          }
          function D(A) {
            if (A.startsWith("#")) {
              const H = parseInt(A.slice(1), 16);
              return [(H & 16711680) >> 16, (H & 65280) >> 8, H & 255];
            }
            return A.startsWith("rgb(") ? A.slice(4, -1).split(",").map((H) => parseInt(H)) : A.startsWith("rgba(") ? A.slice(5, -1).split(",").map((H) => parseInt(H)).slice(0, 3) : ((0, Z.warn)(`Not a valid color format: "${A}"`), [0, 0, 0]);
          }
          function f(A) {
            const H = document.createElement("span");
            H.style.visibility = "hidden", document.body.append(H);
            for (const O of A.keys()) {
              H.style.color = O;
              const U = window.getComputedStyle(H).color;
              A.set(O, D(U));
            }
            H.remove();
          }
          function P(A) {
            const {
              a: H,
              b: O,
              c: U,
              d: k,
              e: q,
              f: al
            } = A.getTransform();
            return [H, O, U, k, q, al];
          }
          function B(A) {
            const {
              a: H,
              b: O,
              c: U,
              d: k,
              e: q,
              f: al
            } = A.getTransform().invertSelf();
            return [H, O, U, k, q, al];
          }
        },
        /* 134 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.BaseStandardFontDataFactory = c.BaseSVGFactory = c.BaseCanvasFactory = c.BaseCMapReaderFactory = void 0;
          var t = i(1);
          class Z {
            constructor() {
              this.constructor === Z && (0, t.unreachable)("Cannot initialize BaseCanvasFactory.");
            }
            create(X, M) {
              if (X <= 0 || M <= 0)
                throw new Error("Invalid canvas size");
              const x = this._createCanvas(X, M);
              return {
                canvas: x,
                context: x.getContext("2d")
              };
            }
            reset(X, M, x) {
              if (!X.canvas)
                throw new Error("Canvas is not specified");
              if (M <= 0 || x <= 0)
                throw new Error("Invalid canvas size");
              X.canvas.width = M, X.canvas.height = x;
            }
            destroy(X) {
              if (!X.canvas)
                throw new Error("Canvas is not specified");
              X.canvas.width = 0, X.canvas.height = 0, X.canvas = null, X.context = null;
            }
            _createCanvas(X, M) {
              (0, t.unreachable)("Abstract method `_createCanvas` called.");
            }
          }
          c.BaseCanvasFactory = Z;
          class W {
            constructor(X) {
              let {
                baseUrl: M = null,
                isCompressed: x = !1
              } = X;
              this.constructor === W && (0, t.unreachable)("Cannot initialize BaseCMapReaderFactory."), this.baseUrl = M, this.isCompressed = x;
            }
            async fetch(X) {
              let {
                name: M
              } = X;
              if (!this.baseUrl)
                throw new Error('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.');
              if (!M)
                throw new Error("CMap name must be specified.");
              const x = this.baseUrl + M + (this.isCompressed ? ".bcmap" : ""), n = this.isCompressed ? t.CMapCompressionType.BINARY : t.CMapCompressionType.NONE;
              return this._fetchData(x, n).catch((V) => {
                throw new Error(`Unable to load ${this.isCompressed ? "binary " : ""}CMap at: ${x}`);
              });
            }
            _fetchData(X, M) {
              (0, t.unreachable)("Abstract method `_fetchData` called.");
            }
          }
          c.BaseCMapReaderFactory = W;
          class y {
            constructor(X) {
              let {
                baseUrl: M = null
              } = X;
              this.constructor === y && (0, t.unreachable)("Cannot initialize BaseStandardFontDataFactory."), this.baseUrl = M;
            }
            async fetch(X) {
              let {
                filename: M
              } = X;
              if (!this.baseUrl)
                throw new Error('The standard font "baseUrl" parameter must be specified, ensure that the "standardFontDataUrl" API parameter is provided.');
              if (!M)
                throw new Error("Font filename must be specified.");
              const x = `${this.baseUrl}${M}`;
              return this._fetchData(x).catch((n) => {
                throw new Error(`Unable to load font data at: ${x}`);
              });
            }
            _fetchData(X) {
              (0, t.unreachable)("Abstract method `_fetchData` called.");
            }
          }
          c.BaseStandardFontDataFactory = y;
          class h {
            constructor() {
              this.constructor === h && (0, t.unreachable)("Cannot initialize BaseSVGFactory.");
            }
            create(X, M) {
              let x = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
              if (X <= 0 || M <= 0)
                throw new Error("Invalid SVG dimensions");
              const n = this._createSVG("svg:svg");
              return n.setAttribute("version", "1.1"), x || (n.setAttribute("width", `${X}px`), n.setAttribute("height", `${M}px`)), n.setAttribute("preserveAspectRatio", "none"), n.setAttribute("viewBox", `0 0 ${X} ${M}`), n;
            }
            createElement(X) {
              if (typeof X != "string")
                throw new Error("Invalid SVG element type");
              return this._createSVG(X);
            }
            _createSVG(X) {
              (0, t.unreachable)("Abstract method `_createSVG` called.");
            }
          }
          c.BaseSVGFactory = h;
        },
        /* 135 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.MurmurHash3_64 = void 0;
          var t = i(1);
          const Z = 3285377520, W = 4294901760, y = 65535;
          class h {
            constructor(X) {
              this.h1 = X ? X & 4294967295 : Z, this.h2 = X ? X & 4294967295 : Z;
            }
            update(X) {
              let M, x;
              if (typeof X == "string") {
                M = new Uint8Array(X.length * 2), x = 0;
                for (let N = 0, G = X.length; N < G; N++) {
                  const r = X.charCodeAt(N);
                  r <= 255 ? M[x++] = r : (M[x++] = r >>> 8, M[x++] = r & 255);
                }
              } else if ((0, t.isArrayBuffer)(X))
                M = X.slice(), x = M.byteLength;
              else
                throw new Error("Wrong data format in MurmurHash3_64_update. Input must be a string or array.");
              const n = x >> 2, V = x - n * 4, S = new Uint32Array(M.buffer, 0, n);
              let o = 0, R = 0, J = this.h1, u = this.h2;
              const e = 3432918353, m = 461845907, d = e & y, b = m & y;
              for (let N = 0; N < n; N++)
                N & 1 ? (o = S[N], o = o * e & W | o * d & y, o = o << 15 | o >>> 17, o = o * m & W | o * b & y, J ^= o, J = J << 13 | J >>> 19, J = J * 5 + 3864292196) : (R = S[N], R = R * e & W | R * d & y, R = R << 15 | R >>> 17, R = R * m & W | R * b & y, u ^= R, u = u << 13 | u >>> 19, u = u * 5 + 3864292196);
              switch (o = 0, V) {
                case 3:
                  o ^= M[n * 4 + 2] << 16;
                case 2:
                  o ^= M[n * 4 + 1] << 8;
                case 1:
                  o ^= M[n * 4], o = o * e & W | o * d & y, o = o << 15 | o >>> 17, o = o * m & W | o * b & y, n & 1 ? J ^= o : u ^= o;
              }
              this.h1 = J, this.h2 = u;
            }
            hexdigest() {
              let X = this.h1, M = this.h2;
              X ^= M >>> 1, X = X * 3981806797 & W | X * 36045 & y, M = M * 4283543511 & W | ((M << 16 | X >>> 16) * 2950163797 & W) >>> 16, X ^= M >>> 1, X = X * 444984403 & W | X * 60499 & y, M = M * 3301882366 & W | ((M << 16 | X >>> 16) * 3120437893 & W) >>> 16, X ^= M >>> 1;
              const x = (X >>> 0).toString(16), n = (M >>> 0).toString(16);
              return x.padStart(8, "0") + n.padStart(8, "0");
            }
          }
          c.MurmurHash3_64 = h;
        },
        /* 136 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.FontLoader = c.FontFaceObject = void 0;
          var t = i(1);
          class Z {
            constructor(p) {
              let {
                docId: X,
                onUnsupportedFeature: M,
                ownerDocument: x = globalThis.document,
                styleElement: n = null
              } = p;
              this.constructor === Z && (0, t.unreachable)("Cannot initialize BaseFontLoader."), this.docId = X, this._onUnsupportedFeature = M, this._document = x, this.nativeFontFaces = [], this.styleElement = null;
            }
            addNativeFontFace(p) {
              this.nativeFontFaces.push(p), this._document.fonts.add(p);
            }
            insertRule(p) {
              let X = this.styleElement;
              X || (X = this.styleElement = this._document.createElement("style"), X.id = `PDFJS_FONT_STYLE_TAG_${this.docId}`, this._document.documentElement.getElementsByTagName("head")[0].append(X));
              const M = X.sheet;
              M.insertRule(p, M.cssRules.length);
            }
            clear() {
              for (const p of this.nativeFontFaces)
                this._document.fonts.delete(p);
              this.nativeFontFaces.length = 0, this.styleElement && (this.styleElement.remove(), this.styleElement = null);
            }
            async bind(p) {
              if (p.attached || p.missingFile)
                return;
              if (p.attached = !0, this.isFontLoadingAPISupported) {
                const M = p.createNativeFontFace();
                if (M) {
                  this.addNativeFontFace(M);
                  try {
                    await M.loaded;
                  } catch (x) {
                    throw this._onUnsupportedFeature({
                      featureId: t.UNSUPPORTED_FEATURES.errorFontLoadNative
                    }), (0, t.warn)(`Failed to load font '${M.family}': '${x}'.`), p.disableFontFace = !0, x;
                  }
                }
                return;
              }
              const X = p.createFontFaceRule();
              if (X) {
                if (this.insertRule(X), this.isSyncFontLoadingSupported)
                  return;
                await new Promise((M) => {
                  const x = this._queueLoadingCallback(M);
                  this._prepareFontLoadEvent([X], [p], x);
                });
              }
            }
            _queueLoadingCallback(p) {
              (0, t.unreachable)("Abstract method `_queueLoadingCallback`.");
            }
            get isFontLoadingAPISupported() {
              var p;
              const X = !!((p = this._document) !== null && p !== void 0 && p.fonts);
              return (0, t.shadow)(this, "isFontLoadingAPISupported", X);
            }
            get isSyncFontLoadingSupported() {
              (0, t.unreachable)("Abstract method `isSyncFontLoadingSupported`.");
            }
            get _loadTestFont() {
              (0, t.unreachable)("Abstract method `_loadTestFont`.");
            }
            _prepareFontLoadEvent(p, X, M) {
              (0, t.unreachable)("Abstract method `_prepareFontLoadEvent`.");
            }
          }
          let W;
          c.FontLoader = W, c.FontLoader = W = class extends Z {
            constructor(p) {
              super(p), this.loadingContext = {
                requests: [],
                nextRequestId: 0
              }, this.loadTestFontId = 0;
            }
            get isSyncFontLoadingSupported() {
              let p = !1;
              if (typeof navigator > "u")
                p = !0;
              else {
                const X = /Mozilla\/5.0.*?rv:(\d+).*? Gecko/.exec(navigator.userAgent);
                (X == null ? void 0 : X[1]) >= 14 && (p = !0);
              }
              return (0, t.shadow)(this, "isSyncFontLoadingSupported", p);
            }
            _queueLoadingCallback(p) {
              function X() {
                for ((0, t.assert)(!x.done, "completeRequest() cannot be called twice."), x.done = !0; M.requests.length > 0 && M.requests[0].done; ) {
                  const n = M.requests.shift();
                  setTimeout(n.callback, 0);
                }
              }
              const M = this.loadingContext, x = {
                id: `pdfjs-font-loading-${M.nextRequestId++}`,
                done: !1,
                complete: X,
                callback: p
              };
              return M.requests.push(x), x;
            }
            get _loadTestFont() {
              const p = function() {
                return atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");
              };
              return (0, t.shadow)(this, "_loadTestFont", p());
            }
            _prepareFontLoadEvent(p, X, M) {
              function x(P, B) {
                return P.charCodeAt(B) << 24 | P.charCodeAt(B + 1) << 16 | P.charCodeAt(B + 2) << 8 | P.charCodeAt(B + 3) & 255;
              }
              function n(P, B, A, H) {
                const O = P.substring(0, B), U = P.substring(B + A);
                return O + H + U;
              }
              let V, S;
              const o = this._document.createElement("canvas");
              o.width = 1, o.height = 1;
              const R = o.getContext("2d");
              let J = 0;
              function u(P, B) {
                if (J++, J > 30) {
                  (0, t.warn)("Load test font never loaded."), B();
                  return;
                }
                if (R.font = "30px " + P, R.fillText(".", 0, 20), R.getImageData(0, 0, 1, 1).data[3] > 0) {
                  B();
                  return;
                }
                setTimeout(u.bind(null, P, B));
              }
              const e = `lt${Date.now()}${this.loadTestFontId++}`;
              let m = this._loadTestFont;
              m = n(m, 976, e.length, e);
              const b = 16, N = 1482184792;
              let G = x(m, b);
              for (V = 0, S = e.length - 3; V < S; V += 4)
                G = G - N + x(e, V) | 0;
              V < e.length && (G = G - N + x(e + "XXX", V) | 0), m = n(m, b, 4, (0, t.string32)(G));
              const r = `url(data:font/opentype;base64,${btoa(m)});`, j = `@font-face {font-family:"${e}";src:${r}}`;
              this.insertRule(j);
              const D = [];
              for (const P of X)
                D.push(P.loadedName);
              D.push(e);
              const f = this._document.createElement("div");
              f.style.visibility = "hidden", f.style.width = f.style.height = "10px", f.style.position = "absolute", f.style.top = f.style.left = "0px";
              for (const P of D) {
                const B = this._document.createElement("span");
                B.textContent = "Hi", B.style.fontFamily = P, f.append(B);
              }
              this._document.body.append(f), u(e, () => {
                f.remove(), M.complete();
              });
            }
          };
          class y {
            constructor(p, X) {
              let {
                isEvalSupported: M = !0,
                disableFontFace: x = !1,
                ignoreErrors: n = !1,
                onUnsupportedFeature: V,
                fontRegistry: S = null
              } = X;
              this.compiledGlyphs = /* @__PURE__ */ Object.create(null);
              for (const o in p)
                this[o] = p[o];
              this.isEvalSupported = M !== !1, this.disableFontFace = x === !0, this.ignoreErrors = n === !0, this._onUnsupportedFeature = V, this.fontRegistry = S;
            }
            createNativeFontFace() {
              if (!this.data || this.disableFontFace)
                return null;
              let p;
              if (!this.cssFontInfo)
                p = new FontFace(this.loadedName, this.data, {});
              else {
                const X = {
                  weight: this.cssFontInfo.fontWeight
                };
                this.cssFontInfo.italicAngle && (X.style = `oblique ${this.cssFontInfo.italicAngle}deg`), p = new FontFace(this.cssFontInfo.fontFamily, this.data, X);
              }
              return this.fontRegistry && this.fontRegistry.registerFont(this), p;
            }
            createFontFaceRule() {
              if (!this.data || this.disableFontFace)
                return null;
              const p = (0, t.bytesToString)(this.data), X = `url(data:${this.mimetype};base64,${btoa(p)});`;
              let M;
              if (!this.cssFontInfo)
                M = `@font-face {font-family:"${this.loadedName}";src:${X}}`;
              else {
                let x = `font-weight: ${this.cssFontInfo.fontWeight};`;
                this.cssFontInfo.italicAngle && (x += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`), M = `@font-face {font-family:"${this.cssFontInfo.fontFamily}";${x}src:${X}}`;
              }
              return this.fontRegistry && this.fontRegistry.registerFont(this, X), M;
            }
            getPathGenerator(p, X) {
              if (this.compiledGlyphs[X] !== void 0)
                return this.compiledGlyphs[X];
              let M;
              try {
                M = p.get(this.loadedName + "_path_" + X);
              } catch (x) {
                if (!this.ignoreErrors)
                  throw x;
                return this._onUnsupportedFeature({
                  featureId: t.UNSUPPORTED_FEATURES.errorFontGetPath
                }), (0, t.warn)(`getPathGenerator - ignoring character: "${x}".`), this.compiledGlyphs[X] = function(n, V) {
                };
              }
              if (this.isEvalSupported && t.FeatureTest.isEvalSupported) {
                const x = [];
                for (const n of M) {
                  const V = n.args !== void 0 ? n.args.join(",") : "";
                  x.push("c.", n.cmd, "(", V, `);
`);
                }
                return this.compiledGlyphs[X] = new Function("c", "size", x.join(""));
              }
              return this.compiledGlyphs[X] = function(x, n) {
                for (const V of M)
                  V.cmd === "scale" && (V.args = [n, -n]), x[V.cmd].apply(x, V.args);
              };
            }
          }
          c.FontFaceObject = y;
        },
        /* 137 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.CanvasGraphics = void 0;
          var t = i(133), Z = i(1), W = i(138), y = i(139), h = i(3);
          function p(Q, T) {
            X(Q, T), T.add(Q);
          }
          function X(Q, T) {
            if (T.has(Q))
              throw new TypeError("Cannot initialize the same private elements twice on an object");
          }
          function M(Q, T, w) {
            if (!T.has(Q))
              throw new TypeError("attempted to get private field on non-instance");
            return w;
          }
          const x = 16, n = 100, V = 4096, S = 15, o = 10, R = h.isNodeJS && typeof Path2D > "u" ? -1 : 1e3, J = 16;
          function u(Q, T) {
            if (Q._removeMirroring)
              throw new Error("Context is already forwarding operations.");
            Q.__originalSave = Q.save, Q.__originalRestore = Q.restore, Q.__originalRotate = Q.rotate, Q.__originalScale = Q.scale, Q.__originalTranslate = Q.translate, Q.__originalTransform = Q.transform, Q.__originalSetTransform = Q.setTransform, Q.__originalResetTransform = Q.resetTransform, Q.__originalClip = Q.clip, Q.__originalMoveTo = Q.moveTo, Q.__originalLineTo = Q.lineTo, Q.__originalBezierCurveTo = Q.bezierCurveTo, Q.__originalRect = Q.rect, Q.__originalClosePath = Q.closePath, Q.__originalBeginPath = Q.beginPath, Q._removeMirroring = () => {
              Q.save = Q.__originalSave, Q.restore = Q.__originalRestore, Q.rotate = Q.__originalRotate, Q.scale = Q.__originalScale, Q.translate = Q.__originalTranslate, Q.transform = Q.__originalTransform, Q.setTransform = Q.__originalSetTransform, Q.resetTransform = Q.__originalResetTransform, Q.clip = Q.__originalClip, Q.moveTo = Q.__originalMoveTo, Q.lineTo = Q.__originalLineTo, Q.bezierCurveTo = Q.__originalBezierCurveTo, Q.rect = Q.__originalRect, Q.closePath = Q.__originalClosePath, Q.beginPath = Q.__originalBeginPath, delete Q._removeMirroring;
            }, Q.save = function() {
              T.save(), this.__originalSave();
            }, Q.restore = function() {
              T.restore(), this.__originalRestore();
            }, Q.translate = function(g, K) {
              T.translate(g, K), this.__originalTranslate(g, K);
            }, Q.scale = function(g, K) {
              T.scale(g, K), this.__originalScale(g, K);
            }, Q.transform = function(g, K, a, Y, z, C) {
              T.transform(g, K, a, Y, z, C), this.__originalTransform(g, K, a, Y, z, C);
            }, Q.setTransform = function(g, K, a, Y, z, C) {
              T.setTransform(g, K, a, Y, z, C), this.__originalSetTransform(g, K, a, Y, z, C);
            }, Q.resetTransform = function() {
              T.resetTransform(), this.__originalResetTransform();
            }, Q.rotate = function(g) {
              T.rotate(g), this.__originalRotate(g);
            }, Q.clip = function(g) {
              T.clip(g), this.__originalClip(g);
            }, Q.moveTo = function(w, g) {
              T.moveTo(w, g), this.__originalMoveTo(w, g);
            }, Q.lineTo = function(w, g) {
              T.lineTo(w, g), this.__originalLineTo(w, g);
            }, Q.bezierCurveTo = function(w, g, K, a, Y, z) {
              T.bezierCurveTo(w, g, K, a, Y, z), this.__originalBezierCurveTo(w, g, K, a, Y, z);
            }, Q.rect = function(w, g, K, a) {
              T.rect(w, g, K, a), this.__originalRect(w, g, K, a);
            }, Q.closePath = function() {
              T.closePath(), this.__originalClosePath();
            }, Q.beginPath = function() {
              T.beginPath(), this.__originalBeginPath();
            };
          }
          class e {
            constructor(T) {
              this.canvasFactory = T, this.cache = /* @__PURE__ */ Object.create(null);
            }
            getCanvas(T, w, g) {
              let K;
              return this.cache[T] !== void 0 ? (K = this.cache[T], this.canvasFactory.reset(K, w, g)) : (K = this.canvasFactory.create(w, g), this.cache[T] = K), K;
            }
            delete(T) {
              delete this.cache[T];
            }
            clear() {
              for (const T in this.cache) {
                const w = this.cache[T];
                this.canvasFactory.destroy(w), delete this.cache[T];
              }
            }
          }
          function m(Q, T, w, g, K, a, Y, z, C, F) {
            const [v, $, il, dl, el, bl] = (0, t.getCurrentTransform)(Q);
            if ($ === 0 && il === 0) {
              const Yl = Y * v + el, yl = Math.round(Yl), Vl = z * dl + bl, Dl = Math.round(Vl), Xl = (Y + C) * v + el, Hl = Math.abs(Math.round(Xl) - yl) || 1, Al = (z + F) * dl + bl, Sl = Math.abs(Math.round(Al) - Dl) || 1;
              return Q.setTransform(Math.sign(v), 0, 0, Math.sign(dl), yl, Dl), Q.drawImage(T, w, g, K, a, 0, 0, Hl, Sl), Q.setTransform(v, $, il, dl, el, bl), [Hl, Sl];
            }
            if (v === 0 && dl === 0) {
              const Yl = z * il + el, yl = Math.round(Yl), Vl = Y * $ + bl, Dl = Math.round(Vl), Xl = (z + F) * il + el, Hl = Math.abs(Math.round(Xl) - yl) || 1, Al = (Y + C) * $ + bl, Sl = Math.abs(Math.round(Al) - Dl) || 1;
              return Q.setTransform(0, Math.sign($), Math.sign(il), 0, yl, Dl), Q.drawImage(T, w, g, K, a, 0, 0, Sl, Hl), Q.setTransform(v, $, il, dl, el, bl), [Sl, Hl];
            }
            Q.drawImage(T, w, g, K, a, Y, z, C, F);
            const ml = Math.hypot(v, $), Gl = Math.hypot(il, dl);
            return [ml * C, Gl * F];
          }
          function d(Q) {
            const {
              width: T,
              height: w
            } = Q;
            if (T > R || w > R)
              return null;
            const g = 1e3, K = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]), a = T + 1;
            let Y = new Uint8Array(a * (w + 1)), z, C, F;
            const v = T + 7 & -8;
            let $ = new Uint8Array(v * w), il = 0;
            for (const Gl of Q.data) {
              let Yl = 128;
              for (; Yl > 0; )
                $[il++] = Gl & Yl ? 0 : 255, Yl >>= 1;
            }
            let dl = 0;
            for (il = 0, $[il] !== 0 && (Y[0] = 1, ++dl), C = 1; C < T; C++)
              $[il] !== $[il + 1] && (Y[C] = $[il] ? 2 : 1, ++dl), il++;
            for ($[il] !== 0 && (Y[C] = 2, ++dl), z = 1; z < w; z++) {
              il = z * v, F = z * a, $[il - v] !== $[il] && (Y[F] = $[il] ? 1 : 8, ++dl);
              let Gl = ($[il] ? 4 : 0) + ($[il - v] ? 8 : 0);
              for (C = 1; C < T; C++)
                Gl = (Gl >> 2) + ($[il + 1] ? 4 : 0) + ($[il - v + 1] ? 8 : 0), K[Gl] && (Y[F + C] = K[Gl], ++dl), il++;
              if ($[il - v] !== $[il] && (Y[F + C] = $[il] ? 2 : 4, ++dl), dl > g)
                return null;
            }
            for (il = v * (w - 1), F = z * a, $[il] !== 0 && (Y[F] = 8, ++dl), C = 1; C < T; C++)
              $[il] !== $[il + 1] && (Y[F + C] = $[il] ? 4 : 8, ++dl), il++;
            if ($[il] !== 0 && (Y[F + C] = 4, ++dl), dl > g)
              return null;
            const el = new Int32Array([0, a, -1, 0, -a, 0, 0, 0, 1]), bl = new Path2D();
            for (z = 0; dl && z <= w; z++) {
              let Gl = z * a;
              const Yl = Gl + T;
              for (; Gl < Yl && !Y[Gl]; )
                Gl++;
              if (Gl === Yl)
                continue;
              bl.moveTo(Gl % a, z);
              const yl = Gl;
              let Vl = Y[Gl];
              do {
                const Dl = el[Vl];
                do
                  Gl += Dl;
                while (!Y[Gl]);
                const Xl = Y[Gl];
                Xl !== 5 && Xl !== 10 ? (Vl = Xl, Y[Gl] = 0) : (Vl = Xl & 51 * Vl >> 4, Y[Gl] &= Vl >> 2 | Vl << 2), bl.lineTo(Gl % a, Gl / a | 0), Y[Gl] || --dl;
              } while (yl !== Gl);
              --z;
            }
            return $ = null, Y = null, function(Gl) {
              Gl.save(), Gl.scale(1 / T, -1 / w), Gl.translate(0, -w), Gl.fill(bl), Gl.beginPath(), Gl.restore();
            };
          }
          class b {
            constructor(T, w) {
              this.alphaIsShape = !1, this.fontSize = 0, this.fontSizeScale = 1, this.textMatrix = Z.IDENTITY_MATRIX, this.textMatrixScale = 1, this.fontMatrix = Z.FONT_IDENTITY_MATRIX, this.leading = 0, this.x = 0, this.y = 0, this.lineX = 0, this.lineY = 0, this.charSpacing = 0, this.wordSpacing = 0, this.textHScale = 1, this.textRenderingMode = Z.TextRenderingMode.FILL, this.textRise = 0, this.fillColor = "#000000", this.strokeColor = "#000000", this.patternFill = !1, this.fillAlpha = 1, this.strokeAlpha = 1, this.lineWidth = 1, this.activeSMask = null, this.transferMaps = null, this.startNewPathAndClipBox([0, 0, T, w]);
            }
            clone() {
              const T = Object.create(this);
              return T.clipBox = this.clipBox.slice(), T;
            }
            setCurrentPoint(T, w) {
              this.x = T, this.y = w;
            }
            updatePathMinMax(T, w, g) {
              [w, g] = Z.Util.applyTransform([w, g], T), this.minX = Math.min(this.minX, w), this.minY = Math.min(this.minY, g), this.maxX = Math.max(this.maxX, w), this.maxY = Math.max(this.maxY, g);
            }
            updateRectMinMax(T, w) {
              const g = Z.Util.applyTransform(w, T), K = Z.Util.applyTransform(w.slice(2), T);
              this.minX = Math.min(this.minX, g[0], K[0]), this.minY = Math.min(this.minY, g[1], K[1]), this.maxX = Math.max(this.maxX, g[0], K[0]), this.maxY = Math.max(this.maxY, g[1], K[1]);
            }
            updateScalingPathMinMax(T, w) {
              Z.Util.scaleMinMax(T, w), this.minX = Math.min(this.minX, w[0]), this.maxX = Math.max(this.maxX, w[1]), this.minY = Math.min(this.minY, w[2]), this.maxY = Math.max(this.maxY, w[3]);
            }
            updateCurvePathMinMax(T, w, g, K, a, Y, z, C, F, v) {
              const $ = Z.Util.bezierBoundingBox(w, g, K, a, Y, z, C, F);
              if (v) {
                v[0] = Math.min(v[0], $[0], $[2]), v[1] = Math.max(v[1], $[0], $[2]), v[2] = Math.min(v[2], $[1], $[3]), v[3] = Math.max(v[3], $[1], $[3]);
                return;
              }
              this.updateRectMinMax(T, $);
            }
            getPathBoundingBox() {
              let T = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : W.PathType.FILL, w = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              const g = [this.minX, this.minY, this.maxX, this.maxY];
              if (T === W.PathType.STROKE) {
                w || (0, Z.unreachable)("Stroke bounding box must include transform.");
                const K = Z.Util.singularValueDecompose2dScale(w), a = K[0] * this.lineWidth / 2, Y = K[1] * this.lineWidth / 2;
                g[0] -= a, g[1] -= Y, g[2] += a, g[3] += Y;
              }
              return g;
            }
            updateClipFromPath() {
              const T = Z.Util.intersect(this.clipBox, this.getPathBoundingBox());
              this.startNewPathAndClipBox(T || [0, 0, 0, 0]);
            }
            isEmptyClip() {
              return this.minX === 1 / 0;
            }
            startNewPathAndClipBox(T) {
              this.clipBox = T, this.minX = 1 / 0, this.minY = 1 / 0, this.maxX = 0, this.maxY = 0;
            }
            getClippedPathBoundingBox() {
              let T = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : W.PathType.FILL, w = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return Z.Util.intersect(this.clipBox, this.getPathBoundingBox(T, w));
            }
          }
          function N(Q, T) {
            let w = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (typeof ImageData < "u" && T instanceof ImageData) {
              Q.putImageData(T, 0, 0);
              return;
            }
            const g = T.height, K = T.width, a = g % J, Y = (g - a) / J, z = a === 0 ? Y : Y + 1, C = Q.createImageData(K, J);
            let F = 0, v;
            const $ = T.data, il = C.data;
            let dl, el, bl, ml, Gl, Yl, yl, Vl;
            if (w)
              switch (w.length) {
                case 1:
                  Gl = w[0], Yl = w[0], yl = w[0], Vl = w[0];
                  break;
                case 4:
                  Gl = w[0], Yl = w[1], yl = w[2], Vl = w[3];
                  break;
              }
            if (T.kind === Z.ImageKind.GRAYSCALE_1BPP) {
              const Dl = $.byteLength, Xl = new Uint32Array(il.buffer, 0, il.byteLength >> 2), Hl = Xl.length, Al = K + 7 >> 3;
              let Sl = 4294967295, ol = Z.FeatureTest.isLittleEndian ? 4278190080 : 255;
              for (Vl && Vl[0] === 255 && Vl[255] === 0 && ([Sl, ol] = [ol, Sl]), dl = 0; dl < z; dl++) {
                for (bl = dl < Y ? J : a, v = 0, el = 0; el < bl; el++) {
                  const cl = Dl - F;
                  let Il = 0;
                  const Jl = cl > Al ? K : cl * 8 - 7, fl = Jl & -8;
                  let Nl = 0, zl = 0;
                  for (; Il < fl; Il += 8)
                    zl = $[F++], Xl[v++] = zl & 128 ? Sl : ol, Xl[v++] = zl & 64 ? Sl : ol, Xl[v++] = zl & 32 ? Sl : ol, Xl[v++] = zl & 16 ? Sl : ol, Xl[v++] = zl & 8 ? Sl : ol, Xl[v++] = zl & 4 ? Sl : ol, Xl[v++] = zl & 2 ? Sl : ol, Xl[v++] = zl & 1 ? Sl : ol;
                  for (; Il < Jl; Il++)
                    Nl === 0 && (zl = $[F++], Nl = 128), Xl[v++] = zl & Nl ? Sl : ol, Nl >>= 1;
                }
                for (; v < Hl; )
                  Xl[v++] = 0;
                Q.putImageData(C, 0, dl * J);
              }
            } else if (T.kind === Z.ImageKind.RGBA_32BPP) {
              const Dl = !!(Gl || Yl || yl);
              for (el = 0, ml = K * J * 4, dl = 0; dl < Y; dl++) {
                if (il.set($.subarray(F, F + ml)), F += ml, Dl)
                  for (let Xl = 0; Xl < ml; Xl += 4)
                    Gl && (il[Xl + 0] = Gl[il[Xl + 0]]), Yl && (il[Xl + 1] = Yl[il[Xl + 1]]), yl && (il[Xl + 2] = yl[il[Xl + 2]]);
                Q.putImageData(C, 0, el), el += J;
              }
              if (dl < z) {
                if (ml = K * a * 4, il.set($.subarray(F, F + ml)), Dl)
                  for (let Xl = 0; Xl < ml; Xl += 4)
                    Gl && (il[Xl + 0] = Gl[il[Xl + 0]]), Yl && (il[Xl + 1] = Yl[il[Xl + 1]]), yl && (il[Xl + 2] = yl[il[Xl + 2]]);
                Q.putImageData(C, 0, el);
              }
            } else if (T.kind === Z.ImageKind.RGB_24BPP) {
              const Dl = !!(Gl || Yl || yl);
              for (bl = J, ml = K * bl, dl = 0; dl < z; dl++) {
                for (dl >= Y && (bl = a, ml = K * bl), v = 0, el = ml; el--; )
                  il[v++] = $[F++], il[v++] = $[F++], il[v++] = $[F++], il[v++] = 255;
                if (Dl)
                  for (let Xl = 0; Xl < v; Xl += 4)
                    Gl && (il[Xl + 0] = Gl[il[Xl + 0]]), Yl && (il[Xl + 1] = Yl[il[Xl + 1]]), yl && (il[Xl + 2] = yl[il[Xl + 2]]);
                Q.putImageData(C, 0, dl * J);
              }
            } else
              throw new Error(`bad image kind: ${T.kind}`);
          }
          function G(Q, T) {
            if (T.bitmap) {
              Q.drawImage(T.bitmap, 0, 0);
              return;
            }
            const w = T.height, g = T.width, K = w % J, a = (w - K) / J, Y = K === 0 ? a : a + 1, z = Q.createImageData(g, J);
            let C = 0;
            const F = T.data, v = z.data;
            for (let $ = 0; $ < Y; $++) {
              const il = $ < a ? J : K;
              ({
                srcPos: C
              } = (0, y.applyMaskImageData)({
                src: F,
                srcPos: C,
                dest: v,
                width: g,
                height: il
              })), Q.putImageData(z, 0, $ * J);
            }
          }
          function r(Q, T) {
            const w = ["strokeStyle", "fillStyle", "fillRule", "globalAlpha", "lineWidth", "lineCap", "lineJoin", "miterLimit", "globalCompositeOperation", "font"];
            for (let g = 0, K = w.length; g < K; g++) {
              const a = w[g];
              Q[a] !== void 0 && (T[a] = Q[a]);
            }
            Q.setLineDash !== void 0 && (T.setLineDash(Q.getLineDash()), T.lineDashOffset = Q.lineDashOffset);
          }
          function j(Q, T) {
            Q.strokeStyle = Q.fillStyle = T || "#000000", Q.fillRule = "nonzero", Q.globalAlpha = 1, Q.lineWidth = 1, Q.lineCap = "butt", Q.lineJoin = "miter", Q.miterLimit = 10, Q.globalCompositeOperation = "source-over", Q.font = "10px sans-serif", Q.setLineDash !== void 0 && (Q.setLineDash([]), Q.lineDashOffset = 0);
          }
          function D(Q, T, w, g) {
            const K = Q.length;
            for (let a = 3; a < K; a += 4) {
              const Y = Q[a];
              if (Y === 0)
                Q[a - 3] = T, Q[a - 2] = w, Q[a - 1] = g;
              else if (Y < 255) {
                const z = 255 - Y;
                Q[a - 3] = Q[a - 3] * Y + T * z >> 8, Q[a - 2] = Q[a - 2] * Y + w * z >> 8, Q[a - 1] = Q[a - 1] * Y + g * z >> 8;
              }
            }
          }
          function f(Q, T, w) {
            const g = Q.length, K = 1 / 255;
            for (let a = 3; a < g; a += 4) {
              const Y = w ? w[Q[a]] : Q[a];
              T[a] = T[a] * Y * K | 0;
            }
          }
          function P(Q, T, w) {
            const g = Q.length;
            for (let K = 3; K < g; K += 4) {
              const a = Q[K - 3] * 77 + Q[K - 2] * 152 + Q[K - 1] * 28;
              T[K] = w ? T[K] * w[a >> 8] >> 8 : T[K] * a >> 16;
            }
          }
          function B(Q, T, w, g, K, a, Y, z, C, F, v) {
            const $ = !!a, il = $ ? a[0] : 0, dl = $ ? a[1] : 0, el = $ ? a[2] : 0;
            let bl;
            K === "Luminosity" ? bl = P : bl = f;
            const Gl = Math.min(g, Math.ceil(1048576 / w));
            for (let Yl = 0; Yl < g; Yl += Gl) {
              const yl = Math.min(Gl, g - Yl), Vl = Q.getImageData(z - F, Yl + (C - v), w, yl), Dl = T.getImageData(z, Yl + C, w, yl);
              $ && D(Vl.data, il, dl, el), bl(Vl.data, Dl.data, Y), T.putImageData(Dl, z, Yl + C);
            }
          }
          function A(Q, T, w, g) {
            const K = g[0], a = g[1], Y = g[2] - K, z = g[3] - a;
            Y === 0 || z === 0 || (B(T.context, w, Y, z, T.subtype, T.backdrop, T.transferMap, K, a, T.offsetX, T.offsetY), Q.save(), Q.globalAlpha = 1, Q.globalCompositeOperation = "source-over", Q.setTransform(1, 0, 0, 1, 0, 0), Q.drawImage(w.canvas, 0, 0), Q.restore());
          }
          function H(Q, T) {
            const w = Z.Util.singularValueDecompose2dScale(Q);
            w[0] = Math.fround(w[0]), w[1] = Math.fround(w[1]);
            const g = Math.fround((globalThis.devicePixelRatio || 1) * t.PixelsPerInch.PDF_TO_CSS_UNITS);
            return T !== void 0 ? T : w[0] <= g || w[1] <= g;
          }
          const O = ["butt", "round", "square"], U = ["miter", "round", "bevel"], k = {}, q = {};
          var al = /* @__PURE__ */ new WeakSet();
          class Ml {
            constructor(T, w, g, K, a, Y, z, C) {
              p(this, al), this.ctx = T, this.current = new b(this.ctx.canvas.width, this.ctx.canvas.height), this.stateStack = [], this.pendingClip = null, this.pendingEOFill = !1, this.res = null, this.xobjs = null, this.commonObjs = w, this.objs = g, this.canvasFactory = K, this.imageLayer = a, this.groupStack = [], this.processingType3 = null, this.baseTransform = null, this.baseTransformStack = [], this.groupLevel = 0, this.smaskStack = [], this.smaskCounter = 0, this.tempSMask = null, this.suspendedCtx = null, this.contentVisible = !0, this.markedContentStack = [], this.optionalContentConfig = Y, this.cachedCanvases = new e(this.canvasFactory), this.cachedPatterns = /* @__PURE__ */ new Map(), this.annotationCanvasMap = z, this.viewportScale = 1, this.outputScaleX = 1, this.outputScaleY = 1, this.backgroundColor = (C == null ? void 0 : C.background) || null, this.foregroundColor = (C == null ? void 0 : C.foreground) || null, this._cachedScaleForStroking = null, this._cachedGetSinglePixelWidth = null, this._cachedBitmapsMap = /* @__PURE__ */ new Map();
            }
            getObject(T) {
              let w = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return typeof T == "string" ? T.startsWith("g_") ? this.commonObjs.get(T) : this.objs.get(T) : w;
            }
            beginDrawing(T) {
              let {
                transform: w,
                viewport: g,
                transparency: K = !1,
                background: a = null
              } = T;
              const Y = this.ctx.canvas.width, z = this.ctx.canvas.height, C = a || "#ffffff";
              if (this.ctx.save(), this.foregroundColor && this.backgroundColor) {
                this.ctx.fillStyle = this.foregroundColor;
                const F = this.foregroundColor = this.ctx.fillStyle;
                this.ctx.fillStyle = this.backgroundColor;
                const v = this.backgroundColor = this.ctx.fillStyle;
                let $ = !0, il = C;
                if (this.ctx.fillStyle = C, il = this.ctx.fillStyle, $ = typeof il == "string" && /^#[0-9A-Fa-f]{6}$/.test(il), F === "#000000" && v === "#ffffff" || F === v || !$)
                  this.foregroundColor = this.backgroundColor = null;
                else {
                  const [dl, el, bl] = (0, t.getRGB)(il), ml = (Yl) => (Yl /= 255, Yl <= 0.03928 ? Yl / 12.92 : ((Yl + 0.055) / 1.055) ** 2.4), Gl = Math.round(0.2126 * ml(dl) + 0.7152 * ml(el) + 0.0722 * ml(bl));
                  this.selectColor = (Yl, yl, Vl) => {
                    const Dl = 0.2126 * ml(Yl) + 0.7152 * ml(yl) + 0.0722 * ml(Vl);
                    return Math.round(Dl) === Gl ? v : F;
                  };
                }
              }
              if (this.ctx.fillStyle = this.backgroundColor || C, this.ctx.fillRect(0, 0, Y, z), this.ctx.restore(), K) {
                const F = this.cachedCanvases.getCanvas("transparent", Y, z);
                this.compositeCtx = this.ctx, this.transparentCanvas = F.canvas, this.ctx = F.context, this.ctx.save(), this.ctx.transform(...(0, t.getCurrentTransform)(this.compositeCtx));
              }
              this.ctx.save(), j(this.ctx, this.foregroundColor), w && (this.ctx.transform(...w), this.outputScaleX = w[0], this.outputScaleY = w[0]), this.ctx.transform(...g.transform), this.viewportScale = g.scale, this.baseTransform = (0, t.getCurrentTransform)(this.ctx), this.imageLayer && ((0, t.deprecated)("The `imageLayer` functionality will be removed in the future."), this.imageLayer.beginLayout());
            }
            executeOperatorList(T, w, g, K) {
              const a = T.argsArray, Y = T.fnArray;
              let z = w || 0;
              const C = a.length;
              if (C === z)
                return z;
              const F = C - z > o && typeof g == "function", v = F ? Date.now() + S : 0;
              let $ = 0;
              const il = this.commonObjs, dl = this.objs;
              let el;
              for (; ; ) {
                if (K !== void 0 && z === K.nextBreakPoint)
                  return K.breakIt(z, g), z;
                if (el = Y[z], el !== Z.OPS.dependency)
                  this[el].apply(this, a[z]);
                else
                  for (const bl of a[z]) {
                    const ml = bl.startsWith("g_") ? il : dl;
                    if (!ml.has(bl))
                      return ml.get(bl, g), z;
                  }
                if (z++, z === C)
                  return z;
                if (F && ++$ > o) {
                  if (Date.now() > v)
                    return g(), z;
                  $ = 0;
                }
              }
            }
            endDrawing() {
              M(this, al, wl).call(this), this.cachedCanvases.clear(), this.cachedPatterns.clear();
              for (const T of this._cachedBitmapsMap.values()) {
                for (const w of T.values())
                  typeof HTMLCanvasElement < "u" && w instanceof HTMLCanvasElement && (w.width = w.height = 0);
                T.clear();
              }
              this._cachedBitmapsMap.clear(), this.imageLayer && this.imageLayer.endLayout();
            }
            _scaleImage(T, w) {
              const g = T.width, K = T.height;
              let a = Math.max(Math.hypot(w[0], w[1]), 1), Y = Math.max(Math.hypot(w[2], w[3]), 1), z = g, C = K, F = "prescale1", v, $;
              for (; a > 2 && z > 1 || Y > 2 && C > 1; ) {
                let il = z, dl = C;
                a > 2 && z > 1 && (il = Math.ceil(z / 2), a /= z / il), Y > 2 && C > 1 && (dl = Math.ceil(C / 2), Y /= C / dl), v = this.cachedCanvases.getCanvas(F, il, dl), $ = v.context, $.clearRect(0, 0, il, dl), $.drawImage(T, 0, 0, z, C, 0, 0, il, dl), T = v.canvas, z = il, C = dl, F = F === "prescale1" ? "prescale2" : "prescale1";
              }
              return {
                img: T,
                paintWidth: z,
                paintHeight: C
              };
            }
            _createMaskCanvas(T) {
              const w = this.ctx, {
                width: g,
                height: K
              } = T, a = this.current.fillColor, Y = this.current.patternFill, z = (0, t.getCurrentTransform)(w);
              let C, F, v, $;
              if ((T.bitmap || T.data) && T.count > 1) {
                const Hl = T.bitmap || T.data.buffer, Al = z.slice(0, 4);
                F = JSON.stringify(Y ? Al : [Al, a]), C = this._cachedBitmapsMap.get(Hl), C || (C = /* @__PURE__ */ new Map(), this._cachedBitmapsMap.set(Hl, C));
                const Sl = C.get(F);
                if (Sl && !Y) {
                  const ol = Math.round(Math.min(z[0], z[2]) + z[4]), cl = Math.round(Math.min(z[1], z[3]) + z[5]);
                  return {
                    canvas: Sl,
                    offsetX: ol,
                    offsetY: cl
                  };
                }
                v = Sl;
              }
              v || ($ = this.cachedCanvases.getCanvas("maskCanvas", g, K), G($.context, T));
              let il = Z.Util.transform(z, [1 / g, 0, 0, -1 / K, 0, 0]);
              il = Z.Util.transform(il, [1, 0, 0, 1, 0, -K]);
              const dl = Z.Util.applyTransform([0, 0], il), el = Z.Util.applyTransform([g, K], il), bl = Z.Util.normalizeRect([dl[0], dl[1], el[0], el[1]]), ml = Math.round(bl[2] - bl[0]) || 1, Gl = Math.round(bl[3] - bl[1]) || 1, Yl = this.cachedCanvases.getCanvas("fillCanvas", ml, Gl), yl = Yl.context, Vl = Math.min(dl[0], el[0]), Dl = Math.min(dl[1], el[1]);
              yl.translate(-Vl, -Dl), yl.transform(...il), v || (v = this._scaleImage($.canvas, (0, t.getCurrentTransformInverse)(yl)), v = v.img, C && Y && C.set(F, v)), yl.imageSmoothingEnabled = H((0, t.getCurrentTransform)(yl), T.interpolate), m(yl, v, 0, 0, v.width, v.height, 0, 0, g, K), yl.globalCompositeOperation = "source-in";
              const Xl = Z.Util.transform((0, t.getCurrentTransformInverse)(yl), [1, 0, 0, 1, -Vl, -Dl]);
              return yl.fillStyle = Y ? a.getPattern(w, this, Xl, W.PathType.FILL) : a, yl.fillRect(0, 0, g, K), C && !Y && (this.cachedCanvases.delete("fillCanvas"), C.set(F, Yl.canvas)), {
                canvas: Yl.canvas,
                offsetX: Math.round(Vl),
                offsetY: Math.round(Dl)
              };
            }
            setLineWidth(T) {
              T !== this.current.lineWidth && (this._cachedScaleForStroking = null), this.current.lineWidth = T, this.ctx.lineWidth = T;
            }
            setLineCap(T) {
              this.ctx.lineCap = O[T];
            }
            setLineJoin(T) {
              this.ctx.lineJoin = U[T];
            }
            setMiterLimit(T) {
              this.ctx.miterLimit = T;
            }
            setDash(T, w) {
              const g = this.ctx;
              g.setLineDash !== void 0 && (g.setLineDash(T), g.lineDashOffset = w);
            }
            setRenderingIntent(T) {
            }
            setFlatness(T) {
            }
            setGState(T) {
              for (let w = 0, g = T.length; w < g; w++) {
                const K = T[w], a = K[0], Y = K[1];
                switch (a) {
                  case "LW":
                    this.setLineWidth(Y);
                    break;
                  case "LC":
                    this.setLineCap(Y);
                    break;
                  case "LJ":
                    this.setLineJoin(Y);
                    break;
                  case "ML":
                    this.setMiterLimit(Y);
                    break;
                  case "D":
                    this.setDash(Y[0], Y[1]);
                    break;
                  case "RI":
                    this.setRenderingIntent(Y);
                    break;
                  case "FL":
                    this.setFlatness(Y);
                    break;
                  case "Font":
                    this.setFont(Y[0], Y[1]);
                    break;
                  case "CA":
                    this.current.strokeAlpha = K[1];
                    break;
                  case "ca":
                    this.current.fillAlpha = K[1], this.ctx.globalAlpha = K[1];
                    break;
                  case "BM":
                    this.ctx.globalCompositeOperation = Y;
                    break;
                  case "SMask":
                    this.current.activeSMask = Y ? this.tempSMask : null, this.tempSMask = null, this.checkSMaskState();
                    break;
                  case "TR":
                    this.current.transferMaps = Y;
                }
              }
            }
            get inSMaskMode() {
              return !!this.suspendedCtx;
            }
            checkSMaskState() {
              const T = this.inSMaskMode;
              this.current.activeSMask && !T ? this.beginSMaskMode() : !this.current.activeSMask && T && this.endSMaskMode();
            }
            beginSMaskMode() {
              if (this.inSMaskMode)
                throw new Error("beginSMaskMode called while already in smask mode");
              const T = this.ctx.canvas.width, w = this.ctx.canvas.height, g = "smaskGroupAt" + this.groupLevel, K = this.cachedCanvases.getCanvas(g, T, w);
              this.suspendedCtx = this.ctx, this.ctx = K.context;
              const a = this.ctx;
              a.setTransform(...(0, t.getCurrentTransform)(this.suspendedCtx)), r(this.suspendedCtx, a), u(a, this.suspendedCtx), this.setGState([["BM", "source-over"], ["ca", 1], ["CA", 1]]);
            }
            endSMaskMode() {
              if (!this.inSMaskMode)
                throw new Error("endSMaskMode called while not in smask mode");
              this.ctx._removeMirroring(), r(this.ctx, this.suspendedCtx), this.ctx = this.suspendedCtx, this.suspendedCtx = null;
            }
            compose(T) {
              if (!this.current.activeSMask)
                return;
              T ? (T[0] = Math.floor(T[0]), T[1] = Math.floor(T[1]), T[2] = Math.ceil(T[2]), T[3] = Math.ceil(T[3])) : T = [0, 0, this.ctx.canvas.width, this.ctx.canvas.height];
              const w = this.current.activeSMask, g = this.suspendedCtx;
              A(g, w, this.ctx, T), this.ctx.save(), this.ctx.setTransform(1, 0, 0, 1, 0, 0), this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height), this.ctx.restore();
            }
            save() {
              this.inSMaskMode ? (r(this.ctx, this.suspendedCtx), this.suspendedCtx.save()) : this.ctx.save();
              const T = this.current;
              this.stateStack.push(T), this.current = T.clone();
            }
            restore() {
              this.stateStack.length === 0 && this.inSMaskMode && this.endSMaskMode(), this.stateStack.length !== 0 && (this.current = this.stateStack.pop(), this.inSMaskMode ? (this.suspendedCtx.restore(), r(this.suspendedCtx, this.ctx)) : this.ctx.restore(), this.checkSMaskState(), this.pendingClip = null, this._cachedScaleForStroking = null, this._cachedGetSinglePixelWidth = null);
            }
            transform(T, w, g, K, a, Y) {
              this.ctx.transform(T, w, g, K, a, Y), this._cachedScaleForStroking = null, this._cachedGetSinglePixelWidth = null;
            }
            constructPath(T, w, g) {
              const K = this.ctx, a = this.current;
              let Y = a.x, z = a.y, C, F;
              const v = (0, t.getCurrentTransform)(K), $ = v[0] === 0 && v[3] === 0 || v[1] === 0 && v[2] === 0, il = $ ? g.slice(0) : null;
              for (let dl = 0, el = 0, bl = T.length; dl < bl; dl++)
                switch (T[dl] | 0) {
                  case Z.OPS.rectangle:
                    Y = w[el++], z = w[el++];
                    const ml = w[el++], Gl = w[el++], Yl = Y + ml, yl = z + Gl;
                    K.moveTo(Y, z), ml === 0 || Gl === 0 ? K.lineTo(Yl, yl) : (K.lineTo(Yl, z), K.lineTo(Yl, yl), K.lineTo(Y, yl)), $ || a.updateRectMinMax(v, [Y, z, Yl, yl]), K.closePath();
                    break;
                  case Z.OPS.moveTo:
                    Y = w[el++], z = w[el++], K.moveTo(Y, z), $ || a.updatePathMinMax(v, Y, z);
                    break;
                  case Z.OPS.lineTo:
                    Y = w[el++], z = w[el++], K.lineTo(Y, z), $ || a.updatePathMinMax(v, Y, z);
                    break;
                  case Z.OPS.curveTo:
                    C = Y, F = z, Y = w[el + 4], z = w[el + 5], K.bezierCurveTo(w[el], w[el + 1], w[el + 2], w[el + 3], Y, z), a.updateCurvePathMinMax(v, C, F, w[el], w[el + 1], w[el + 2], w[el + 3], Y, z, il), el += 6;
                    break;
                  case Z.OPS.curveTo2:
                    C = Y, F = z, K.bezierCurveTo(Y, z, w[el], w[el + 1], w[el + 2], w[el + 3]), a.updateCurvePathMinMax(v, C, F, Y, z, w[el], w[el + 1], w[el + 2], w[el + 3], il), Y = w[el + 2], z = w[el + 3], el += 4;
                    break;
                  case Z.OPS.curveTo3:
                    C = Y, F = z, Y = w[el + 2], z = w[el + 3], K.bezierCurveTo(w[el], w[el + 1], Y, z, Y, z), a.updateCurvePathMinMax(v, C, F, w[el], w[el + 1], Y, z, Y, z, il), el += 4;
                    break;
                  case Z.OPS.closePath:
                    K.closePath();
                    break;
                }
              $ && a.updateScalingPathMinMax(v, il), a.setCurrentPoint(Y, z);
            }
            closePath() {
              this.ctx.closePath();
            }
            stroke(T) {
              T = typeof T < "u" ? T : !0;
              const w = this.ctx, g = this.current.strokeColor;
              w.globalAlpha = this.current.strokeAlpha, this.contentVisible && (typeof g == "object" && g !== null && g !== void 0 && g.getPattern ? (w.save(), w.strokeStyle = g.getPattern(w, this, (0, t.getCurrentTransformInverse)(w), W.PathType.STROKE), this.rescaleAndStroke(!1), w.restore()) : this.rescaleAndStroke(!0)), T && this.consumePath(this.current.getClippedPathBoundingBox()), w.globalAlpha = this.current.fillAlpha;
            }
            closeStroke() {
              this.closePath(), this.stroke();
            }
            fill(T) {
              T = typeof T < "u" ? T : !0;
              const w = this.ctx, g = this.current.fillColor, K = this.current.patternFill;
              let a = !1;
              K && (w.save(), w.fillStyle = g.getPattern(w, this, (0, t.getCurrentTransformInverse)(w), W.PathType.FILL), a = !0);
              const Y = this.current.getClippedPathBoundingBox();
              this.contentVisible && Y !== null && (this.pendingEOFill ? (w.fill("evenodd"), this.pendingEOFill = !1) : w.fill()), a && w.restore(), T && this.consumePath(Y);
            }
            eoFill() {
              this.pendingEOFill = !0, this.fill();
            }
            fillStroke() {
              this.fill(!1), this.stroke(!1), this.consumePath();
            }
            eoFillStroke() {
              this.pendingEOFill = !0, this.fillStroke();
            }
            closeFillStroke() {
              this.closePath(), this.fillStroke();
            }
            closeEOFillStroke() {
              this.pendingEOFill = !0, this.closePath(), this.fillStroke();
            }
            endPath() {
              this.consumePath();
            }
            clip() {
              this.pendingClip = k;
            }
            eoClip() {
              this.pendingClip = q;
            }
            beginText() {
              this.current.textMatrix = Z.IDENTITY_MATRIX, this.current.textMatrixScale = 1, this.current.x = this.current.lineX = 0, this.current.y = this.current.lineY = 0;
            }
            endText() {
              const T = this.pendingTextPaths, w = this.ctx;
              if (T === void 0) {
                w.beginPath();
                return;
              }
              w.save(), w.beginPath();
              for (const g of T)
                w.setTransform(...g.transform), w.translate(g.x, g.y), g.addToPath(w, g.fontSize);
              w.restore(), w.clip(), w.beginPath(), delete this.pendingTextPaths;
            }
            setCharSpacing(T) {
              this.current.charSpacing = T;
            }
            setWordSpacing(T) {
              this.current.wordSpacing = T;
            }
            setHScale(T) {
              this.current.textHScale = T / 100;
            }
            setLeading(T) {
              this.current.leading = -T;
            }
            setFont(T, w) {
              const g = this.commonObjs.get(T), K = this.current;
              if (!g)
                throw new Error(`Can't find font for ${T}`);
              if (K.fontMatrix = g.fontMatrix || Z.FONT_IDENTITY_MATRIX, (K.fontMatrix[0] === 0 || K.fontMatrix[3] === 0) && (0, Z.warn)("Invalid font matrix for font " + T), w < 0 ? (w = -w, K.fontDirection = -1) : K.fontDirection = 1, this.current.font = g, this.current.fontSize = w, g.isType3Font)
                return;
              const a = g.loadedName || "sans-serif";
              let Y = "normal";
              g.black ? Y = "900" : g.bold && (Y = "bold");
              const z = g.italic ? "italic" : "normal", C = `"${a}", ${g.fallbackName}`;
              let F = w;
              w < x ? F = x : w > n && (F = n), this.current.fontSizeScale = w / F, this.ctx.font = `${z} ${Y} ${F}px ${C}`;
            }
            setTextRenderingMode(T) {
              this.current.textRenderingMode = T;
            }
            setTextRise(T) {
              this.current.textRise = T;
            }
            moveText(T, w) {
              this.current.x = this.current.lineX += T, this.current.y = this.current.lineY += w;
            }
            setLeadingMoveText(T, w) {
              this.setLeading(-w), this.moveText(T, w);
            }
            setTextMatrix(T, w, g, K, a, Y) {
              this.current.textMatrix = [T, w, g, K, a, Y], this.current.textMatrixScale = Math.hypot(T, w), this.current.x = this.current.lineX = 0, this.current.y = this.current.lineY = 0;
            }
            nextLine() {
              this.moveText(0, this.current.leading);
            }
            paintChar(T, w, g, K) {
              const a = this.ctx, Y = this.current, z = Y.font, C = Y.textRenderingMode, F = Y.fontSize / Y.fontSizeScale, v = C & Z.TextRenderingMode.FILL_STROKE_MASK, $ = !!(C & Z.TextRenderingMode.ADD_TO_PATH_FLAG), il = Y.patternFill && !z.missingFile;
              let dl;
              (z.disableFontFace || $ || il) && (dl = z.getPathGenerator(this.commonObjs, T)), z.disableFontFace || il ? (a.save(), a.translate(w, g), a.beginPath(), dl(a, F), K && a.setTransform(...K), (v === Z.TextRenderingMode.FILL || v === Z.TextRenderingMode.FILL_STROKE) && a.fill(), (v === Z.TextRenderingMode.STROKE || v === Z.TextRenderingMode.FILL_STROKE) && a.stroke(), a.restore()) : ((v === Z.TextRenderingMode.FILL || v === Z.TextRenderingMode.FILL_STROKE) && a.fillText(T, w, g), (v === Z.TextRenderingMode.STROKE || v === Z.TextRenderingMode.FILL_STROKE) && a.strokeText(T, w, g)), $ && (this.pendingTextPaths || (this.pendingTextPaths = [])).push({
                transform: (0, t.getCurrentTransform)(a),
                x: w,
                y: g,
                fontSize: F,
                addToPath: dl
              });
            }
            get isFontSubpixelAAEnabled() {
              const {
                context: T
              } = this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled", 10, 10);
              T.scale(1.5, 1), T.fillText("I", 0, 10);
              const w = T.getImageData(0, 0, 10, 10).data;
              let g = !1;
              for (let K = 3; K < w.length; K += 4)
                if (w[K] > 0 && w[K] < 255) {
                  g = !0;
                  break;
                }
              return (0, Z.shadow)(this, "isFontSubpixelAAEnabled", g);
            }
            showText(T) {
              const w = this.current, g = w.font;
              if (g.isType3Font)
                return this.showType3Text(T);
              const K = w.fontSize;
              if (K === 0)
                return;
              const a = this.ctx, Y = w.fontSizeScale, z = w.charSpacing, C = w.wordSpacing, F = w.fontDirection, v = w.textHScale * F, $ = T.length, il = g.vertical, dl = il ? 1 : -1, el = g.defaultVMetrics, bl = K * w.fontMatrix[0], ml = w.textRenderingMode === Z.TextRenderingMode.FILL && !g.disableFontFace && !w.patternFill;
              a.save(), a.transform(...w.textMatrix), a.translate(w.x, w.y + w.textRise), F > 0 ? a.scale(v, -1) : a.scale(v, 1);
              let Gl;
              if (w.patternFill) {
                a.save();
                const Xl = w.fillColor.getPattern(a, this, (0, t.getCurrentTransformInverse)(a), W.PathType.FILL);
                Gl = (0, t.getCurrentTransform)(a), a.restore(), a.fillStyle = Xl;
              }
              let Yl = w.lineWidth;
              const yl = w.textMatrixScale;
              if (yl === 0 || Yl === 0) {
                const Xl = w.textRenderingMode & Z.TextRenderingMode.FILL_STROKE_MASK;
                (Xl === Z.TextRenderingMode.STROKE || Xl === Z.TextRenderingMode.FILL_STROKE) && (Yl = this.getSinglePixelWidth());
              } else
                Yl /= yl;
              Y !== 1 && (a.scale(Y, Y), Yl /= Y), a.lineWidth = Yl;
              let Vl = 0, Dl;
              for (Dl = 0; Dl < $; ++Dl) {
                const Xl = T[Dl];
                if (typeof Xl == "number") {
                  Vl += dl * Xl * K / 1e3;
                  continue;
                }
                let Hl = !1;
                const Al = (Xl.isSpace ? C : 0) + z, Sl = Xl.fontChar, ol = Xl.accent;
                let cl, Il, Jl = Xl.width;
                if (il) {
                  const Nl = Xl.vmetric || el, zl = -(Xl.vmetric ? Nl[1] : Jl * 0.5) * bl, kl = Nl[2] * bl;
                  Jl = Nl ? -Nl[0] : Jl, cl = zl / Y, Il = (Vl + kl) / Y;
                } else
                  cl = Vl / Y, Il = 0;
                if (g.remeasure && Jl > 0) {
                  const Nl = a.measureText(Sl).width * 1e3 / K * Y;
                  if (Jl < Nl && this.isFontSubpixelAAEnabled) {
                    const zl = Jl / Nl;
                    Hl = !0, a.save(), a.scale(zl, 1), cl /= zl;
                  } else Jl !== Nl && (cl += (Jl - Nl) / 2e3 * K / Y);
                }
                if (this.contentVisible && (Xl.isInFont || g.missingFile)) {
                  if (ml && !ol)
                    a.fillText(Sl, cl, Il);
                  else if (this.paintChar(Sl, cl, Il, Gl), ol) {
                    const Nl = cl + K * ol.offset.x / Y, zl = Il - K * ol.offset.y / Y;
                    this.paintChar(ol.fontChar, Nl, zl, Gl);
                  }
                }
                let fl;
                il ? fl = Jl * bl - Al * F : fl = Jl * bl + Al * F, Vl += fl, Hl && a.restore();
              }
              il ? w.y -= Vl : w.x += Vl * v, a.restore(), this.compose();
            }
            showType3Text(T) {
              const w = this.ctx, g = this.current, K = g.font, a = g.fontSize, Y = g.fontDirection, z = K.vertical ? 1 : -1, C = g.charSpacing, F = g.wordSpacing, v = g.textHScale * Y, $ = g.fontMatrix || Z.FONT_IDENTITY_MATRIX, il = T.length, dl = g.textRenderingMode === Z.TextRenderingMode.INVISIBLE;
              let el, bl, ml, Gl;
              if (!(dl || a === 0)) {
                for (this._cachedScaleForStroking = null, this._cachedGetSinglePixelWidth = null, w.save(), w.transform(...g.textMatrix), w.translate(g.x, g.y), w.scale(v, Y), el = 0; el < il; ++el) {
                  if (bl = T[el], typeof bl == "number") {
                    Gl = z * bl * a / 1e3, this.ctx.translate(Gl, 0), g.x += Gl * v;
                    continue;
                  }
                  const Yl = (bl.isSpace ? F : 0) + C, yl = K.charProcOperatorList[bl.operatorListId];
                  if (!yl) {
                    (0, Z.warn)(`Type3 character "${bl.operatorListId}" is not available.`);
                    continue;
                  }
                  this.contentVisible && (this.processingType3 = bl, this.save(), w.scale(a, a), w.transform(...$), this.executeOperatorList(yl), this.restore()), ml = Z.Util.applyTransform([bl.width, 0], $)[0] * a + Yl, w.translate(ml, 0), g.x += ml * v;
                }
                w.restore(), this.processingType3 = null;
              }
            }
            setCharWidth(T, w) {
            }
            setCharWidthAndBounds(T, w, g, K, a, Y) {
              this.ctx.rect(g, K, a - g, Y - K), this.ctx.clip(), this.endPath();
            }
            getColorN_Pattern(T) {
              let w;
              if (T[0] === "TilingPattern") {
                const g = T[1], K = this.baseTransform || (0, t.getCurrentTransform)(this.ctx), a = {
                  createCanvasGraphics: (Y) => new Ml(Y, this.commonObjs, this.objs, this.canvasFactory)
                };
                w = new W.TilingPattern(T, g, this.ctx, a, K);
              } else
                w = this._getPattern(T[1], T[2]);
              return w;
            }
            setStrokeColorN() {
              this.current.strokeColor = this.getColorN_Pattern(arguments);
            }
            setFillColorN() {
              this.current.fillColor = this.getColorN_Pattern(arguments), this.current.patternFill = !0;
            }
            setStrokeRGBColor(T, w, g) {
              var K;
              const a = ((K = this.selectColor) === null || K === void 0 ? void 0 : K.call(this, T, w, g)) || Z.Util.makeHexColor(T, w, g);
              this.ctx.strokeStyle = a, this.current.strokeColor = a;
            }
            setFillRGBColor(T, w, g) {
              var K;
              const a = ((K = this.selectColor) === null || K === void 0 ? void 0 : K.call(this, T, w, g)) || Z.Util.makeHexColor(T, w, g);
              this.ctx.fillStyle = a, this.current.fillColor = a, this.current.patternFill = !1;
            }
            _getPattern(T) {
              let w = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, g;
              return this.cachedPatterns.has(T) ? g = this.cachedPatterns.get(T) : (g = (0, W.getShadingPattern)(this.objs.get(T)), this.cachedPatterns.set(T, g)), w && (g.matrix = w), g;
            }
            shadingFill(T) {
              if (!this.contentVisible)
                return;
              const w = this.ctx;
              this.save();
              const g = this._getPattern(T);
              w.fillStyle = g.getPattern(w, this, (0, t.getCurrentTransformInverse)(w), W.PathType.SHADING);
              const K = (0, t.getCurrentTransformInverse)(w);
              if (K) {
                const a = w.canvas, Y = a.width, z = a.height, C = Z.Util.applyTransform([0, 0], K), F = Z.Util.applyTransform([0, z], K), v = Z.Util.applyTransform([Y, 0], K), $ = Z.Util.applyTransform([Y, z], K), il = Math.min(C[0], F[0], v[0], $[0]), dl = Math.min(C[1], F[1], v[1], $[1]), el = Math.max(C[0], F[0], v[0], $[0]), bl = Math.max(C[1], F[1], v[1], $[1]);
                this.ctx.fillRect(il, dl, el - il, bl - dl);
              } else
                this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);
              this.compose(this.current.getClippedPathBoundingBox()), this.restore();
            }
            beginInlineImage() {
              (0, Z.unreachable)("Should not call beginInlineImage");
            }
            beginImageData() {
              (0, Z.unreachable)("Should not call beginImageData");
            }
            paintFormXObjectBegin(T, w) {
              if (this.contentVisible && (this.save(), this.baseTransformStack.push(this.baseTransform), Array.isArray(T) && T.length === 6 && this.transform(...T), this.baseTransform = (0, t.getCurrentTransform)(this.ctx), w)) {
                const g = w[2] - w[0], K = w[3] - w[1];
                this.ctx.rect(w[0], w[1], g, K), this.current.updateRectMinMax((0, t.getCurrentTransform)(this.ctx), w), this.clip(), this.endPath();
              }
            }
            paintFormXObjectEnd() {
              this.contentVisible && (this.restore(), this.baseTransform = this.baseTransformStack.pop());
            }
            beginGroup(T) {
              if (!this.contentVisible)
                return;
              this.save(), this.inSMaskMode && (this.endSMaskMode(), this.current.activeSMask = null);
              const w = this.ctx;
              T.isolated || (0, Z.info)("TODO: Support non-isolated groups."), T.knockout && (0, Z.warn)("Knockout groups not supported.");
              const g = (0, t.getCurrentTransform)(w);
              if (T.matrix && w.transform(...T.matrix), !T.bbox)
                throw new Error("Bounding box is required.");
              let K = Z.Util.getAxialAlignedBoundingBox(T.bbox, (0, t.getCurrentTransform)(w));
              const a = [0, 0, w.canvas.width, w.canvas.height];
              K = Z.Util.intersect(K, a) || [0, 0, 0, 0];
              const Y = Math.floor(K[0]), z = Math.floor(K[1]);
              let C = Math.max(Math.ceil(K[2]) - Y, 1), F = Math.max(Math.ceil(K[3]) - z, 1), v = 1, $ = 1;
              C > V && (v = C / V, C = V), F > V && ($ = F / V, F = V), this.current.startNewPathAndClipBox([0, 0, C, F]);
              let il = "groupAt" + this.groupLevel;
              T.smask && (il += "_smask_" + this.smaskCounter++ % 2);
              const dl = this.cachedCanvases.getCanvas(il, C, F), el = dl.context;
              el.scale(1 / v, 1 / $), el.translate(-Y, -z), el.transform(...g), T.smask ? this.smaskStack.push({
                canvas: dl.canvas,
                context: el,
                offsetX: Y,
                offsetY: z,
                scaleX: v,
                scaleY: $,
                subtype: T.smask.subtype,
                backdrop: T.smask.backdrop,
                transferMap: T.smask.transferMap || null,
                startTransformInverse: null
              }) : (w.setTransform(1, 0, 0, 1, 0, 0), w.translate(Y, z), w.scale(v, $), w.save()), r(w, el), this.ctx = el, this.setGState([["BM", "source-over"], ["ca", 1], ["CA", 1]]), this.groupStack.push(w), this.groupLevel++;
            }
            endGroup(T) {
              if (!this.contentVisible)
                return;
              this.groupLevel--;
              const w = this.ctx, g = this.groupStack.pop();
              if (this.ctx = g, this.ctx.imageSmoothingEnabled = !1, T.smask)
                this.tempSMask = this.smaskStack.pop(), this.restore();
              else {
                this.ctx.restore();
                const K = (0, t.getCurrentTransform)(this.ctx);
                this.restore(), this.ctx.save(), this.ctx.setTransform(...K);
                const a = Z.Util.getAxialAlignedBoundingBox([0, 0, w.canvas.width, w.canvas.height], K);
                this.ctx.drawImage(w.canvas, 0, 0), this.ctx.restore(), this.compose(a);
              }
            }
            beginAnnotation(T, w, g, K, a) {
              if (M(this, al, wl).call(this), j(this.ctx, this.foregroundColor), this.ctx.save(), this.save(), this.baseTransform && this.ctx.setTransform(...this.baseTransform), Array.isArray(w) && w.length === 4) {
                const Y = w[2] - w[0], z = w[3] - w[1];
                if (a && this.annotationCanvasMap) {
                  g = g.slice(), g[4] -= w[0], g[5] -= w[1], w = w.slice(), w[0] = w[1] = 0, w[2] = Y, w[3] = z;
                  const [C, F] = Z.Util.singularValueDecompose2dScale((0, t.getCurrentTransform)(this.ctx)), {
                    viewportScale: v
                  } = this, $ = Math.ceil(Y * this.outputScaleX * v), il = Math.ceil(z * this.outputScaleY * v);
                  this.annotationCanvas = this.canvasFactory.create($, il);
                  const {
                    canvas: dl,
                    context: el
                  } = this.annotationCanvas;
                  this.annotationCanvasMap.set(T, dl), this.annotationCanvas.savedCtx = this.ctx, this.ctx = el, this.ctx.setTransform(C, 0, 0, -F, 0, z * F), j(this.ctx, this.foregroundColor);
                } else
                  j(this.ctx, this.foregroundColor), this.ctx.rect(w[0], w[1], Y, z), this.ctx.clip(), this.endPath();
              }
              this.current = new b(this.ctx.canvas.width, this.ctx.canvas.height), this.transform(...g), this.transform(...K);
            }
            endAnnotation() {
              this.annotationCanvas && (this.ctx = this.annotationCanvas.savedCtx, delete this.annotationCanvas.savedCtx, delete this.annotationCanvas);
            }
            paintImageMaskXObject(T) {
              if (!this.contentVisible)
                return;
              const w = T.count;
              T = this.getObject(T.data, T), T.count = w;
              const g = this.ctx, K = this.processingType3;
              if (K && (K.compiled === void 0 && (K.compiled = d(T)), K.compiled)) {
                K.compiled(g);
                return;
              }
              const a = this._createMaskCanvas(T), Y = a.canvas;
              g.save(), g.setTransform(1, 0, 0, 1, 0, 0), g.drawImage(Y, a.offsetX, a.offsetY), g.restore(), this.compose();
            }
            paintImageMaskXObjectRepeat(T, w) {
              let g = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, K = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0, a = arguments.length > 4 ? arguments[4] : void 0, Y = arguments.length > 5 ? arguments[5] : void 0;
              if (!this.contentVisible)
                return;
              T = this.getObject(T.data, T);
              const z = this.ctx;
              z.save();
              const C = (0, t.getCurrentTransform)(z);
              z.transform(w, g, K, a, 0, 0);
              const F = this._createMaskCanvas(T);
              z.setTransform(1, 0, 0, 1, 0, 0);
              for (let v = 0, $ = Y.length; v < $; v += 2) {
                const il = Z.Util.transform(C, [w, g, K, a, Y[v], Y[v + 1]]), [dl, el] = Z.Util.applyTransform([0, 0], il);
                z.drawImage(F.canvas, dl, el);
              }
              z.restore(), this.compose();
            }
            paintImageMaskXObjectGroup(T) {
              if (!this.contentVisible)
                return;
              const w = this.ctx, g = this.current.fillColor, K = this.current.patternFill;
              for (const a of T) {
                const {
                  data: Y,
                  width: z,
                  height: C,
                  transform: F
                } = a, v = this.cachedCanvases.getCanvas("maskCanvas", z, C), $ = v.context;
                $.save();
                const il = this.getObject(Y, a);
                G($, il), $.globalCompositeOperation = "source-in", $.fillStyle = K ? g.getPattern($, this, (0, t.getCurrentTransformInverse)(w), W.PathType.FILL) : g, $.fillRect(0, 0, z, C), $.restore(), w.save(), w.transform(...F), w.scale(1, -1), m(w, v.canvas, 0, 0, z, C, 0, -1, 1, 1), w.restore();
              }
              this.compose();
            }
            paintImageXObject(T) {
              if (!this.contentVisible)
                return;
              const w = this.getObject(T);
              if (!w) {
                (0, Z.warn)("Dependent image isn't ready yet");
                return;
              }
              this.paintInlineImageXObject(w);
            }
            paintImageXObjectRepeat(T, w, g, K) {
              if (!this.contentVisible)
                return;
              const a = this.getObject(T);
              if (!a) {
                (0, Z.warn)("Dependent image isn't ready yet");
                return;
              }
              const Y = a.width, z = a.height, C = [];
              for (let F = 0, v = K.length; F < v; F += 2)
                C.push({
                  transform: [w, 0, 0, g, K[F], K[F + 1]],
                  x: 0,
                  y: 0,
                  w: Y,
                  h: z
                });
              this.paintInlineImageXObjectGroup(a, C);
            }
            paintInlineImageXObject(T) {
              if (!this.contentVisible)
                return;
              const w = T.width, g = T.height, K = this.ctx;
              this.save(), K.scale(1 / w, -1 / g);
              let a;
              if (typeof HTMLElement == "function" && T instanceof HTMLElement || !T.data)
                a = T;
              else {
                const F = this.cachedCanvases.getCanvas("inlineImage", w, g), v = F.context;
                N(v, T, this.current.transferMaps), a = F.canvas;
              }
              const Y = this._scaleImage(a, (0, t.getCurrentTransformInverse)(K));
              K.imageSmoothingEnabled = H((0, t.getCurrentTransform)(K), T.interpolate);
              const [z, C] = m(K, Y.img, 0, 0, Y.paintWidth, Y.paintHeight, 0, -g, w, g);
              if (this.imageLayer) {
                const [F, v] = Z.Util.applyTransform([0, -g], (0, t.getCurrentTransform)(this.ctx));
                this.imageLayer.appendImage({
                  imgData: T,
                  left: F,
                  top: v,
                  width: z,
                  height: C
                });
              }
              this.compose(), this.restore();
            }
            paintInlineImageXObjectGroup(T, w) {
              if (!this.contentVisible)
                return;
              const g = this.ctx, K = T.width, a = T.height, Y = this.cachedCanvases.getCanvas("inlineImage", K, a), z = Y.context;
              N(z, T, this.current.transferMaps);
              for (const C of w) {
                if (g.save(), g.transform(...C.transform), g.scale(1, -1), m(g, Y.canvas, C.x, C.y, C.w, C.h, 0, -1, 1, 1), this.imageLayer) {
                  const [F, v] = Z.Util.applyTransform([C.x, C.y], (0, t.getCurrentTransform)(this.ctx));
                  this.imageLayer.appendImage({
                    imgData: T,
                    left: F,
                    top: v,
                    width: K,
                    height: a
                  });
                }
                g.restore();
              }
              this.compose();
            }
            paintSolidColorImageMask() {
              this.contentVisible && (this.ctx.fillRect(0, 0, 1, 1), this.compose());
            }
            markPoint(T) {
            }
            markPointProps(T, w) {
            }
            beginMarkedContent(T) {
              this.markedContentStack.push({
                visible: !0
              });
            }
            beginMarkedContentProps(T, w) {
              T === "OC" ? this.markedContentStack.push({
                visible: this.optionalContentConfig.isVisible(w)
              }) : this.markedContentStack.push({
                visible: !0
              }), this.contentVisible = this.isContentVisible();
            }
            endMarkedContent() {
              this.markedContentStack.pop(), this.contentVisible = this.isContentVisible();
            }
            beginCompat() {
            }
            endCompat() {
            }
            consumePath(T) {
              const w = this.current.isEmptyClip();
              this.pendingClip && this.current.updateClipFromPath(), this.pendingClip || this.compose(T);
              const g = this.ctx;
              this.pendingClip && (w || (this.pendingClip === q ? g.clip("evenodd") : g.clip()), this.pendingClip = null), this.current.startNewPathAndClipBox(this.current.clipBox), g.beginPath();
            }
            getSinglePixelWidth() {
              if (!this._cachedGetSinglePixelWidth) {
                const T = (0, t.getCurrentTransform)(this.ctx);
                if (T[1] === 0 && T[2] === 0)
                  this._cachedGetSinglePixelWidth = 1 / Math.min(Math.abs(T[0]), Math.abs(T[3]));
                else {
                  const w = Math.abs(T[0] * T[3] - T[2] * T[1]), g = Math.hypot(T[0], T[2]), K = Math.hypot(T[1], T[3]);
                  this._cachedGetSinglePixelWidth = Math.max(g, K) / w;
                }
              }
              return this._cachedGetSinglePixelWidth;
            }
            getScaleForStroking() {
              if (!this._cachedScaleForStroking) {
                const {
                  lineWidth: T
                } = this.current, w = (0, t.getCurrentTransform)(this.ctx);
                let g, K;
                if (w[1] === 0 && w[2] === 0) {
                  const a = Math.abs(w[0]), Y = Math.abs(w[3]);
                  if (T === 0)
                    g = 1 / a, K = 1 / Y;
                  else {
                    const z = a * T, C = Y * T;
                    g = z < 1 ? 1 / z : 1, K = C < 1 ? 1 / C : 1;
                  }
                } else {
                  const a = Math.abs(w[0] * w[3] - w[2] * w[1]), Y = Math.hypot(w[0], w[1]), z = Math.hypot(w[2], w[3]);
                  if (T === 0)
                    g = z / a, K = Y / a;
                  else {
                    const C = T * a;
                    g = z > C ? z / C : 1, K = Y > C ? Y / C : 1;
                  }
                }
                this._cachedScaleForStroking = [g, K];
              }
              return this._cachedScaleForStroking;
            }
            rescaleAndStroke(T) {
              const {
                ctx: w
              } = this, {
                lineWidth: g
              } = this.current, [K, a] = this.getScaleForStroking();
              if (w.lineWidth = g || 1, K === 1 && a === 1) {
                w.stroke();
                return;
              }
              let Y, z, C;
              T && (Y = (0, t.getCurrentTransform)(w), z = w.getLineDash().slice(), C = w.lineDashOffset), w.scale(K, a);
              const F = Math.max(K, a);
              w.setLineDash(w.getLineDash().map((v) => v / F)), w.lineDashOffset /= F, w.stroke(), T && (w.setTransform(...Y), w.setLineDash(z), w.lineDashOffset = C);
            }
            isContentVisible() {
              for (let T = this.markedContentStack.length - 1; T >= 0; T--)
                if (!this.markedContentStack[T].visible)
                  return !1;
              return !0;
            }
          }
          c.CanvasGraphics = Ml;
          function wl() {
            for (; this.stateStack.length || this.inSMaskMode; )
              this.restore();
            this.ctx.restore(), this.transparentCanvas && (this.ctx = this.compositeCtx, this.ctx.save(), this.ctx.setTransform(1, 0, 0, 1, 0, 0), this.ctx.drawImage(this.transparentCanvas, 0, 0), this.ctx.restore(), this.transparentCanvas = null);
          }
          for (const Q in Z.OPS)
            Ml.prototype[Q] !== void 0 && (Ml.prototype[Z.OPS[Q]] = Ml.prototype[Q]);
        },
        /* 138 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.TilingPattern = c.PathType = void 0, c.getShadingPattern = S;
          var t = i(1), Z = i(133), W = i(3);
          const y = {
            FILL: "Fill",
            STROKE: "Stroke",
            SHADING: "Shading"
          };
          c.PathType = y;
          function h(J, u) {
            if (!u || W.isNodeJS)
              return;
            const e = u[2] - u[0], m = u[3] - u[1], d = new Path2D();
            d.rect(u[0], u[1], e, m), J.clip(d);
          }
          class p {
            constructor() {
              this.constructor === p && (0, t.unreachable)("Cannot initialize BaseShadingPattern.");
            }
            getPattern() {
              (0, t.unreachable)("Abstract method `getPattern` called.");
            }
          }
          class X extends p {
            constructor(u) {
              super(), this._type = u[1], this._bbox = u[2], this._colorStops = u[3], this._p0 = u[4], this._p1 = u[5], this._r0 = u[6], this._r1 = u[7], this.matrix = null;
            }
            _createGradient(u) {
              let e;
              this._type === "axial" ? e = u.createLinearGradient(this._p0[0], this._p0[1], this._p1[0], this._p1[1]) : this._type === "radial" && (e = u.createRadialGradient(this._p0[0], this._p0[1], this._r0, this._p1[0], this._p1[1], this._r1));
              for (const m of this._colorStops)
                e.addColorStop(m[0], m[1]);
              return e;
            }
            getPattern(u, e, m, d) {
              let b;
              if (d === y.STROKE || d === y.FILL) {
                const N = e.current.getClippedPathBoundingBox(d, (0, Z.getCurrentTransform)(u)) || [0, 0, 0, 0], G = Math.ceil(N[2] - N[0]) || 1, r = Math.ceil(N[3] - N[1]) || 1, j = e.cachedCanvases.getCanvas("pattern", G, r, !0), D = j.context;
                D.clearRect(0, 0, D.canvas.width, D.canvas.height), D.beginPath(), D.rect(0, 0, D.canvas.width, D.canvas.height), D.translate(-N[0], -N[1]), m = t.Util.transform(m, [1, 0, 0, 1, N[0], N[1]]), D.transform(...e.baseTransform), this.matrix && D.transform(...this.matrix), h(D, this._bbox), D.fillStyle = this._createGradient(D), D.fill(), b = u.createPattern(j.canvas, "no-repeat");
                const f = new DOMMatrix(m);
                try {
                  b.setTransform(f);
                } catch (P) {
                  (0, t.warn)(`RadialAxialShadingPattern.getPattern: "${P == null ? void 0 : P.message}".`);
                }
              } else
                h(u, this._bbox), b = this._createGradient(u);
              return b;
            }
          }
          function M(J, u, e, m, d, b, N, G) {
            const r = u.coords, j = u.colors, D = J.data, f = J.width * 4;
            let P;
            r[e + 1] > r[m + 1] && (P = e, e = m, m = P, P = b, b = N, N = P), r[m + 1] > r[d + 1] && (P = m, m = d, d = P, P = N, N = G, G = P), r[e + 1] > r[m + 1] && (P = e, e = m, m = P, P = b, b = N, N = P);
            const B = (r[e] + u.offsetX) * u.scaleX, A = (r[e + 1] + u.offsetY) * u.scaleY, H = (r[m] + u.offsetX) * u.scaleX, O = (r[m + 1] + u.offsetY) * u.scaleY, U = (r[d] + u.offsetX) * u.scaleX, k = (r[d + 1] + u.offsetY) * u.scaleY;
            if (A >= k)
              return;
            const q = j[b], al = j[b + 1], Ml = j[b + 2], wl = j[N], Q = j[N + 1], T = j[N + 2], w = j[G], g = j[G + 1], K = j[G + 2], a = Math.round(A), Y = Math.round(k);
            let z, C, F, v, $, il, dl, el;
            for (let bl = a; bl <= Y; bl++) {
              if (bl < O) {
                let Vl;
                bl < A ? Vl = 0 : Vl = (A - bl) / (A - O), z = B - (B - H) * Vl, C = q - (q - wl) * Vl, F = al - (al - Q) * Vl, v = Ml - (Ml - T) * Vl;
              } else {
                let Vl;
                bl > k ? Vl = 1 : O === k ? Vl = 0 : Vl = (O - bl) / (O - k), z = H - (H - U) * Vl, C = wl - (wl - w) * Vl, F = Q - (Q - g) * Vl, v = T - (T - K) * Vl;
              }
              let ml;
              bl < A ? ml = 0 : bl > k ? ml = 1 : ml = (A - bl) / (A - k), $ = B - (B - U) * ml, il = q - (q - w) * ml, dl = al - (al - g) * ml, el = Ml - (Ml - K) * ml;
              const Gl = Math.round(Math.min(z, $)), Yl = Math.round(Math.max(z, $));
              let yl = f * bl + Gl * 4;
              for (let Vl = Gl; Vl <= Yl; Vl++)
                ml = (z - Vl) / (z - $), ml < 0 ? ml = 0 : ml > 1 && (ml = 1), D[yl++] = C - (C - il) * ml | 0, D[yl++] = F - (F - dl) * ml | 0, D[yl++] = v - (v - el) * ml | 0, D[yl++] = 255;
            }
          }
          function x(J, u, e) {
            const m = u.coords, d = u.colors;
            let b, N;
            switch (u.type) {
              case "lattice":
                const G = u.verticesPerRow, r = Math.floor(m.length / G) - 1, j = G - 1;
                for (b = 0; b < r; b++) {
                  let D = b * G;
                  for (let f = 0; f < j; f++, D++)
                    M(J, e, m[D], m[D + 1], m[D + G], d[D], d[D + 1], d[D + G]), M(J, e, m[D + G + 1], m[D + 1], m[D + G], d[D + G + 1], d[D + 1], d[D + G]);
                }
                break;
              case "triangles":
                for (b = 0, N = m.length; b < N; b += 3)
                  M(J, e, m[b], m[b + 1], m[b + 2], d[b], d[b + 1], d[b + 2]);
                break;
              default:
                throw new Error("illegal figure");
            }
          }
          class n extends p {
            constructor(u) {
              super(), this._coords = u[2], this._colors = u[3], this._figures = u[4], this._bounds = u[5], this._bbox = u[7], this._background = u[8], this.matrix = null;
            }
            _createMeshCanvas(u, e, m) {
              const G = Math.floor(this._bounds[0]), r = Math.floor(this._bounds[1]), j = Math.ceil(this._bounds[2]) - G, D = Math.ceil(this._bounds[3]) - r, f = Math.min(Math.ceil(Math.abs(j * u[0] * 1.1)), 3e3), P = Math.min(Math.ceil(Math.abs(D * u[1] * 1.1)), 3e3), B = j / f, A = D / P, H = {
                coords: this._coords,
                colors: this._colors,
                offsetX: -G,
                offsetY: -r,
                scaleX: 1 / B,
                scaleY: 1 / A
              }, O = f + 2 * 2, U = P + 2 * 2, k = m.getCanvas("mesh", O, U, !1), q = k.context, al = q.createImageData(f, P);
              if (e) {
                const wl = al.data;
                for (let Q = 0, T = wl.length; Q < T; Q += 4)
                  wl[Q] = e[0], wl[Q + 1] = e[1], wl[Q + 2] = e[2], wl[Q + 3] = 255;
              }
              for (const wl of this._figures)
                x(al, wl, H);
              return q.putImageData(al, 2, 2), {
                canvas: k.canvas,
                offsetX: G - 2 * B,
                offsetY: r - 2 * A,
                scaleX: B,
                scaleY: A
              };
            }
            getPattern(u, e, m, d) {
              h(u, this._bbox);
              let b;
              if (d === y.SHADING)
                b = t.Util.singularValueDecompose2dScale((0, Z.getCurrentTransform)(u));
              else if (b = t.Util.singularValueDecompose2dScale(e.baseTransform), this.matrix) {
                const G = t.Util.singularValueDecompose2dScale(this.matrix);
                b = [b[0] * G[0], b[1] * G[1]];
              }
              const N = this._createMeshCanvas(b, d === y.SHADING ? null : this._background, e.cachedCanvases);
              return d !== y.SHADING && (u.setTransform(...e.baseTransform), this.matrix && u.transform(...this.matrix)), u.translate(N.offsetX, N.offsetY), u.scale(N.scaleX, N.scaleY), u.createPattern(N.canvas, "no-repeat");
            }
          }
          class V extends p {
            getPattern() {
              return "hotpink";
            }
          }
          function S(J) {
            switch (J[0]) {
              case "RadialAxial":
                return new X(J);
              case "Mesh":
                return new n(J);
              case "Dummy":
                return new V();
            }
            throw new Error(`Unknown IR type: ${J[0]}`);
          }
          const o = {
            COLORED: 1,
            UNCOLORED: 2
          };
          class R {
            static get MAX_PATTERN_SIZE() {
              return (0, t.shadow)(this, "MAX_PATTERN_SIZE", 3e3);
            }
            constructor(u, e, m, d, b) {
              this.operatorList = u[2], this.matrix = u[3] || [1, 0, 0, 1, 0, 0], this.bbox = u[4], this.xstep = u[5], this.ystep = u[6], this.paintType = u[7], this.tilingType = u[8], this.color = e, this.ctx = m, this.canvasGraphicsFactory = d, this.baseTransform = b;
            }
            createPatternCanvas(u) {
              const e = this.operatorList, m = this.bbox, d = this.xstep, b = this.ystep, N = this.paintType, G = this.tilingType, r = this.color, j = this.canvasGraphicsFactory;
              (0, t.info)("TilingType: " + G);
              const D = m[0], f = m[1], P = m[2], B = m[3], A = t.Util.singularValueDecompose2dScale(this.matrix), H = t.Util.singularValueDecompose2dScale(this.baseTransform), O = [A[0] * H[0], A[1] * H[1]], U = this.getSizeAndScale(d, this.ctx.canvas.width, O[0]), k = this.getSizeAndScale(b, this.ctx.canvas.height, O[1]), q = u.cachedCanvases.getCanvas("pattern", U.size, k.size, !0), al = q.context, Ml = j.createCanvasGraphics(al);
              Ml.groupLevel = u.groupLevel, this.setFillAndStrokeStyleToContext(Ml, N, r);
              let wl = D, Q = f, T = P, w = B;
              return D < 0 && (wl = 0, T += Math.abs(D)), f < 0 && (Q = 0, w += Math.abs(f)), al.translate(-(U.scale * wl), -(k.scale * Q)), Ml.transform(U.scale, 0, 0, k.scale, 0, 0), al.save(), this.clipBbox(Ml, wl, Q, T, w), Ml.baseTransform = (0, Z.getCurrentTransform)(Ml.ctx), Ml.executeOperatorList(e), Ml.endDrawing(), {
                canvas: q.canvas,
                scaleX: U.scale,
                scaleY: k.scale,
                offsetX: wl,
                offsetY: Q
              };
            }
            getSizeAndScale(u, e, m) {
              u = Math.abs(u);
              const d = Math.max(R.MAX_PATTERN_SIZE, e);
              let b = Math.ceil(u * m);
              return b >= d ? b = d : m = b / u, {
                scale: m,
                size: b
              };
            }
            clipBbox(u, e, m, d, b) {
              const N = d - e, G = b - m;
              u.ctx.rect(e, m, N, G), u.current.updateRectMinMax((0, Z.getCurrentTransform)(u.ctx), [e, m, d, b]), u.clip(), u.endPath();
            }
            setFillAndStrokeStyleToContext(u, e, m) {
              const d = u.ctx, b = u.current;
              switch (e) {
                case o.COLORED:
                  const N = this.ctx;
                  d.fillStyle = N.fillStyle, d.strokeStyle = N.strokeStyle, b.fillColor = N.fillStyle, b.strokeColor = N.strokeStyle;
                  break;
                case o.UNCOLORED:
                  const G = t.Util.makeHexColor(m[0], m[1], m[2]);
                  d.fillStyle = G, d.strokeStyle = G, b.fillColor = G, b.strokeColor = G;
                  break;
                default:
                  throw new t.FormatError(`Unsupported paint type: ${e}`);
              }
            }
            getPattern(u, e, m, d) {
              let b = m;
              d !== y.SHADING && (b = t.Util.transform(b, e.baseTransform), this.matrix && (b = t.Util.transform(b, this.matrix)));
              const N = this.createPatternCanvas(e);
              let G = new DOMMatrix(b);
              G = G.translate(N.offsetX, N.offsetY), G = G.scale(1 / N.scaleX, 1 / N.scaleY);
              const r = u.createPattern(N.canvas, "repeat");
              try {
                r.setTransform(G);
              } catch (j) {
                (0, t.warn)(`TilingPattern.getPattern: "${j == null ? void 0 : j.message}".`);
              }
              return r;
            }
          }
          c.TilingPattern = R;
        },
        /* 139 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.applyMaskImageData = Z;
          var t = i(1);
          function Z(W) {
            let {
              src: y,
              srcPos: h = 0,
              dest: p,
              destPos: X = 0,
              width: M,
              height: x,
              inverseDecode: n = !1
            } = W;
            const V = t.FeatureTest.isLittleEndian ? 4278190080 : 255, [S, o] = n ? [0, V] : [V, 0], R = M >> 3, J = M & 7, u = y.length;
            p = new Uint32Array(p.buffer);
            for (let e = 0; e < x; e++) {
              for (const d = h + R; h < d; h++) {
                const b = h < u ? y[h] : 255;
                p[X++] = b & 128 ? o : S, p[X++] = b & 64 ? o : S, p[X++] = b & 32 ? o : S, p[X++] = b & 16 ? o : S, p[X++] = b & 8 ? o : S, p[X++] = b & 4 ? o : S, p[X++] = b & 2 ? o : S, p[X++] = b & 1 ? o : S;
              }
              if (J === 0)
                continue;
              const m = h < u ? y[h++] : 255;
              for (let d = 0; d < J; d++)
                p[X++] = m & 1 << 7 - d ? o : S;
            }
            return {
              srcPos: h,
              destPos: X
            };
          }
        },
        /* 140 */
        /***/
        (L, c) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.GlobalWorkerOptions = void 0;
          const i = /* @__PURE__ */ Object.create(null);
          c.GlobalWorkerOptions = i, i.workerPort = i.workerPort === void 0 ? null : i.workerPort, i.workerSrc = i.workerSrc === void 0 ? "" : i.workerSrc;
        },
        /* 141 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.MessageHandler = void 0;
          var t = i(1);
          const Z = {
            DATA: 1,
            ERROR: 2
          }, W = {
            CANCEL: 1,
            CANCEL_COMPLETE: 2,
            CLOSE: 3,
            ENQUEUE: 4,
            ERROR: 5,
            PULL: 6,
            PULL_COMPLETE: 7,
            START_COMPLETE: 8
          };
          function y(p) {
            switch (p instanceof Error || typeof p == "object" && p !== null || (0, t.unreachable)('wrapReason: Expected "reason" to be a (possibly cloned) Error.'), p.name) {
              case "AbortException":
                return new t.AbortException(p.message);
              case "MissingPDFException":
                return new t.MissingPDFException(p.message);
              case "PasswordException":
                return new t.PasswordException(p.message, p.code);
              case "UnexpectedResponseException":
                return new t.UnexpectedResponseException(p.message, p.status);
              case "UnknownErrorException":
                return new t.UnknownErrorException(p.message, p.details);
              default:
                return new t.UnknownErrorException(p.message, p.toString());
            }
          }
          class h {
            constructor(X, M, x) {
              this.sourceName = X, this.targetName = M, this.comObj = x, this.callbackId = 1, this.streamId = 1, this.streamSinks = /* @__PURE__ */ Object.create(null), this.streamControllers = /* @__PURE__ */ Object.create(null), this.callbackCapabilities = /* @__PURE__ */ Object.create(null), this.actionHandler = /* @__PURE__ */ Object.create(null), this._onComObjOnMessage = (n) => {
                const V = n.data;
                if (V.targetName !== this.sourceName)
                  return;
                if (V.stream) {
                  this._processStreamMessage(V);
                  return;
                }
                if (V.callback) {
                  const o = V.callbackId, R = this.callbackCapabilities[o];
                  if (!R)
                    throw new Error(`Cannot resolve callback ${o}`);
                  if (delete this.callbackCapabilities[o], V.callback === Z.DATA)
                    R.resolve(V.data);
                  else if (V.callback === Z.ERROR)
                    R.reject(y(V.reason));
                  else
                    throw new Error("Unexpected callback case");
                  return;
                }
                const S = this.actionHandler[V.action];
                if (!S)
                  throw new Error(`Unknown action from worker: ${V.action}`);
                if (V.callbackId) {
                  const o = this.sourceName, R = V.sourceName;
                  new Promise(function(J) {
                    J(S(V.data));
                  }).then(function(J) {
                    x.postMessage({
                      sourceName: o,
                      targetName: R,
                      callback: Z.DATA,
                      callbackId: V.callbackId,
                      data: J
                    });
                  }, function(J) {
                    x.postMessage({
                      sourceName: o,
                      targetName: R,
                      callback: Z.ERROR,
                      callbackId: V.callbackId,
                      reason: y(J)
                    });
                  });
                  return;
                }
                if (V.streamId) {
                  this._createStreamSink(V);
                  return;
                }
                S(V.data);
              }, x.addEventListener("message", this._onComObjOnMessage);
            }
            on(X, M) {
              const x = this.actionHandler;
              if (x[X])
                throw new Error(`There is already an actionName called "${X}"`);
              x[X] = M;
            }
            send(X, M, x) {
              this.comObj.postMessage({
                sourceName: this.sourceName,
                targetName: this.targetName,
                action: X,
                data: M
              }, x);
            }
            sendWithPromise(X, M, x) {
              const n = this.callbackId++, V = (0, t.createPromiseCapability)();
              this.callbackCapabilities[n] = V;
              try {
                this.comObj.postMessage({
                  sourceName: this.sourceName,
                  targetName: this.targetName,
                  action: X,
                  callbackId: n,
                  data: M
                }, x);
              } catch (S) {
                V.reject(S);
              }
              return V.promise;
            }
            sendWithStream(X, M, x, n) {
              const V = this.streamId++, S = this.sourceName, o = this.targetName, R = this.comObj;
              return new ReadableStream({
                start: (J) => {
                  const u = (0, t.createPromiseCapability)();
                  return this.streamControllers[V] = {
                    controller: J,
                    startCall: u,
                    pullCall: null,
                    cancelCall: null,
                    isClosed: !1
                  }, R.postMessage({
                    sourceName: S,
                    targetName: o,
                    action: X,
                    streamId: V,
                    data: M,
                    desiredSize: J.desiredSize
                  }, n), u.promise;
                },
                pull: (J) => {
                  const u = (0, t.createPromiseCapability)();
                  return this.streamControllers[V].pullCall = u, R.postMessage({
                    sourceName: S,
                    targetName: o,
                    stream: W.PULL,
                    streamId: V,
                    desiredSize: J.desiredSize
                  }), u.promise;
                },
                cancel: (J) => {
                  (0, t.assert)(J instanceof Error, "cancel must have a valid reason");
                  const u = (0, t.createPromiseCapability)();
                  return this.streamControllers[V].cancelCall = u, this.streamControllers[V].isClosed = !0, R.postMessage({
                    sourceName: S,
                    targetName: o,
                    stream: W.CANCEL,
                    streamId: V,
                    reason: y(J)
                  }), u.promise;
                }
              }, x);
            }
            _createStreamSink(X) {
              const M = X.streamId, x = this.sourceName, n = X.sourceName, V = this.comObj, S = this, o = this.actionHandler[X.action], R = {
                enqueue(J) {
                  let u = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, e = arguments.length > 2 ? arguments[2] : void 0;
                  if (this.isCancelled)
                    return;
                  const m = this.desiredSize;
                  this.desiredSize -= u, m > 0 && this.desiredSize <= 0 && (this.sinkCapability = (0, t.createPromiseCapability)(), this.ready = this.sinkCapability.promise), V.postMessage({
                    sourceName: x,
                    targetName: n,
                    stream: W.ENQUEUE,
                    streamId: M,
                    chunk: J
                  }, e);
                },
                close() {
                  this.isCancelled || (this.isCancelled = !0, V.postMessage({
                    sourceName: x,
                    targetName: n,
                    stream: W.CLOSE,
                    streamId: M
                  }), delete S.streamSinks[M]);
                },
                error(J) {
                  (0, t.assert)(J instanceof Error, "error must have a valid reason"), !this.isCancelled && (this.isCancelled = !0, V.postMessage({
                    sourceName: x,
                    targetName: n,
                    stream: W.ERROR,
                    streamId: M,
                    reason: y(J)
                  }));
                },
                sinkCapability: (0, t.createPromiseCapability)(),
                onPull: null,
                onCancel: null,
                isCancelled: !1,
                desiredSize: X.desiredSize,
                ready: null
              };
              R.sinkCapability.resolve(), R.ready = R.sinkCapability.promise, this.streamSinks[M] = R, new Promise(function(J) {
                J(o(X.data, R));
              }).then(function() {
                V.postMessage({
                  sourceName: x,
                  targetName: n,
                  stream: W.START_COMPLETE,
                  streamId: M,
                  success: !0
                });
              }, function(J) {
                V.postMessage({
                  sourceName: x,
                  targetName: n,
                  stream: W.START_COMPLETE,
                  streamId: M,
                  reason: y(J)
                });
              });
            }
            _processStreamMessage(X) {
              const M = X.streamId, x = this.sourceName, n = X.sourceName, V = this.comObj, S = this.streamControllers[M], o = this.streamSinks[M];
              switch (X.stream) {
                case W.START_COMPLETE:
                  X.success ? S.startCall.resolve() : S.startCall.reject(y(X.reason));
                  break;
                case W.PULL_COMPLETE:
                  X.success ? S.pullCall.resolve() : S.pullCall.reject(y(X.reason));
                  break;
                case W.PULL:
                  if (!o) {
                    V.postMessage({
                      sourceName: x,
                      targetName: n,
                      stream: W.PULL_COMPLETE,
                      streamId: M,
                      success: !0
                    });
                    break;
                  }
                  o.desiredSize <= 0 && X.desiredSize > 0 && o.sinkCapability.resolve(), o.desiredSize = X.desiredSize, new Promise(function(R) {
                    R(o.onPull && o.onPull());
                  }).then(function() {
                    V.postMessage({
                      sourceName: x,
                      targetName: n,
                      stream: W.PULL_COMPLETE,
                      streamId: M,
                      success: !0
                    });
                  }, function(R) {
                    V.postMessage({
                      sourceName: x,
                      targetName: n,
                      stream: W.PULL_COMPLETE,
                      streamId: M,
                      reason: y(R)
                    });
                  });
                  break;
                case W.ENQUEUE:
                  if ((0, t.assert)(S, "enqueue should have stream controller"), S.isClosed)
                    break;
                  S.controller.enqueue(X.chunk);
                  break;
                case W.CLOSE:
                  if ((0, t.assert)(S, "close should have stream controller"), S.isClosed)
                    break;
                  S.isClosed = !0, S.controller.close(), this._deleteStreamController(S, M);
                  break;
                case W.ERROR:
                  (0, t.assert)(S, "error should have stream controller"), S.controller.error(y(X.reason)), this._deleteStreamController(S, M);
                  break;
                case W.CANCEL_COMPLETE:
                  X.success ? S.cancelCall.resolve() : S.cancelCall.reject(y(X.reason)), this._deleteStreamController(S, M);
                  break;
                case W.CANCEL:
                  if (!o)
                    break;
                  new Promise(function(R) {
                    R(o.onCancel && o.onCancel(y(X.reason)));
                  }).then(function() {
                    V.postMessage({
                      sourceName: x,
                      targetName: n,
                      stream: W.CANCEL_COMPLETE,
                      streamId: M,
                      success: !0
                    });
                  }, function(R) {
                    V.postMessage({
                      sourceName: x,
                      targetName: n,
                      stream: W.CANCEL_COMPLETE,
                      streamId: M,
                      reason: y(R)
                    });
                  }), o.sinkCapability.reject(y(X.reason)), o.isCancelled = !0, delete this.streamSinks[M];
                  break;
                default:
                  throw new Error("Unexpected stream case");
              }
            }
            async _deleteStreamController(X, M) {
              await Promise.allSettled([X.startCall && X.startCall.promise, X.pullCall && X.pullCall.promise, X.cancelCall && X.cancelCall.promise]), delete this.streamControllers[M];
            }
            destroy() {
              this.comObj.removeEventListener("message", this._onComObjOnMessage);
            }
          }
          c.MessageHandler = h;
        },
        /* 142 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.Metadata = void 0;
          var t = i(1);
          function Z(S, o, R) {
            W(S, o), o.set(S, R);
          }
          function W(S, o) {
            if (o.has(S))
              throw new TypeError("Cannot initialize the same private elements twice on an object");
          }
          function y(S, o) {
            var R = X(S, o, "get");
            return h(S, R);
          }
          function h(S, o) {
            return o.get ? o.get.call(S) : o.value;
          }
          function p(S, o, R) {
            var J = X(S, o, "set");
            return M(S, J, R), R;
          }
          function X(S, o, R) {
            if (!o.has(S))
              throw new TypeError("attempted to " + R + " private field on non-instance");
            return o.get(S);
          }
          function M(S, o, R) {
            if (o.set)
              o.set.call(S, R);
            else {
              if (!o.writable)
                throw new TypeError("attempted to set read only private field");
              o.value = R;
            }
          }
          var x = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();
          class V {
            constructor(o) {
              let {
                parsedData: R,
                rawData: J
              } = o;
              Z(this, x, {
                writable: !0,
                value: void 0
              }), Z(this, n, {
                writable: !0,
                value: void 0
              }), p(this, x, R), p(this, n, J);
            }
            getRaw() {
              return y(this, n);
            }
            get(o) {
              var R;
              return (R = y(this, x).get(o)) !== null && R !== void 0 ? R : null;
            }
            getAll() {
              return (0, t.objectFromMap)(y(this, x));
            }
            has(o) {
              return y(this, x).has(o);
            }
          }
          c.Metadata = V;
        },
        /* 143 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.OptionalContentConfig = void 0;
          var t = i(1);
          function Z(N, G) {
            h(N, G), G.add(N);
          }
          function W(N, G, r) {
            if (!G.has(N))
              throw new TypeError("attempted to get private field on non-instance");
            return r;
          }
          function y(N, G, r) {
            h(N, G), G.set(N, r);
          }
          function h(N, G) {
            if (G.has(N))
              throw new TypeError("Cannot initialize the same private elements twice on an object");
          }
          function p(N, G, r) {
            var j = x(N, G, "set");
            return X(N, j, r), r;
          }
          function X(N, G, r) {
            if (G.set)
              G.set.call(N, r);
            else {
              if (!G.writable)
                throw new TypeError("attempted to set read only private field");
              G.value = r;
            }
          }
          function M(N, G) {
            var r = x(N, G, "get");
            return n(N, r);
          }
          function x(N, G, r) {
            if (!G.has(N))
              throw new TypeError("attempted to " + r + " private field on non-instance");
            return G.get(N);
          }
          function n(N, G) {
            return G.get ? G.get.call(N) : G.value;
          }
          const V = Symbol("INTERNAL");
          var S = /* @__PURE__ */ new WeakMap();
          class o {
            constructor(G, r) {
              y(this, S, {
                writable: !0,
                value: !0
              }), this.name = G, this.intent = r;
            }
            get visible() {
              return M(this, S);
            }
            _setVisible(G, r) {
              G !== V && (0, t.unreachable)("Internal method `_setVisible` called."), p(this, S, r);
            }
          }
          var R = /* @__PURE__ */ new WeakMap(), J = /* @__PURE__ */ new WeakMap(), u = /* @__PURE__ */ new WeakMap(), e = /* @__PURE__ */ new WeakMap(), m = /* @__PURE__ */ new WeakSet();
          class d {
            constructor(G) {
              if (Z(this, m), y(this, R, {
                writable: !0,
                value: !0
              }), y(this, J, {
                writable: !0,
                value: /* @__PURE__ */ new Map()
              }), y(this, u, {
                writable: !0,
                value: null
              }), y(this, e, {
                writable: !0,
                value: null
              }), this.name = null, this.creator = null, G !== null) {
                this.name = G.name, this.creator = G.creator, p(this, e, G.order);
                for (const r of G.groups)
                  M(this, J).set(r.id, new o(r.name, r.intent));
                if (G.baseState === "OFF")
                  for (const r of M(this, J).values())
                    r._setVisible(V, !1);
                for (const r of G.on)
                  M(this, J).get(r)._setVisible(V, !0);
                for (const r of G.off)
                  M(this, J).get(r)._setVisible(V, !1);
                p(this, u, /* @__PURE__ */ new Map());
                for (const [r, j] of M(this, J))
                  M(this, u).set(r, j.visible);
              }
            }
            isVisible(G) {
              if (M(this, J).size === 0)
                return !0;
              if (!G)
                return (0, t.warn)("Optional content group not defined."), !0;
              if (G.type === "OCG")
                return M(this, J).has(G.id) ? M(this, J).get(G.id).visible : ((0, t.warn)(`Optional content group not found: ${G.id}`), !0);
              if (G.type === "OCMD") {
                if (G.expression)
                  return W(this, m, b).call(this, G.expression);
                if (!G.policy || G.policy === "AnyOn") {
                  for (const r of G.ids) {
                    if (!M(this, J).has(r))
                      return (0, t.warn)(`Optional content group not found: ${r}`), !0;
                    if (M(this, J).get(r).visible)
                      return !0;
                  }
                  return !1;
                } else if (G.policy === "AllOn") {
                  for (const r of G.ids) {
                    if (!M(this, J).has(r))
                      return (0, t.warn)(`Optional content group not found: ${r}`), !0;
                    if (!M(this, J).get(r).visible)
                      return !1;
                  }
                  return !0;
                } else if (G.policy === "AnyOff") {
                  for (const r of G.ids) {
                    if (!M(this, J).has(r))
                      return (0, t.warn)(`Optional content group not found: ${r}`), !0;
                    if (!M(this, J).get(r).visible)
                      return !0;
                  }
                  return !1;
                } else if (G.policy === "AllOff") {
                  for (const r of G.ids) {
                    if (!M(this, J).has(r))
                      return (0, t.warn)(`Optional content group not found: ${r}`), !0;
                    if (M(this, J).get(r).visible)
                      return !1;
                  }
                  return !0;
                }
                return (0, t.warn)(`Unknown optional content policy ${G.policy}.`), !0;
              }
              return (0, t.warn)(`Unknown group type ${G.type}.`), !0;
            }
            setVisibility(G) {
              let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
              if (!M(this, J).has(G)) {
                (0, t.warn)(`Optional content group not found: ${G}`);
                return;
              }
              M(this, J).get(G)._setVisible(V, !!r), p(this, R, null);
            }
            get hasInitialVisibility() {
              if (M(this, R) !== null)
                return M(this, R);
              for (const [G, r] of M(this, J)) {
                const j = M(this, u).get(G);
                if (r.visible !== j)
                  return p(this, R, !1);
              }
              return p(this, R, !0);
            }
            getOrder() {
              return M(this, J).size ? M(this, e) ? M(this, e).slice() : [...M(this, J).keys()] : null;
            }
            getGroups() {
              return M(this, J).size > 0 ? (0, t.objectFromMap)(M(this, J)) : null;
            }
            getGroup(G) {
              return M(this, J).get(G) || null;
            }
          }
          c.OptionalContentConfig = d;
          function b(N) {
            const G = N.length;
            if (G < 2)
              return !0;
            const r = N[0];
            for (let j = 1; j < G; j++) {
              const D = N[j];
              let f;
              if (Array.isArray(D))
                f = W(this, m, b).call(this, D);
              else if (M(this, J).has(D))
                f = M(this, J).get(D).visible;
              else
                return (0, t.warn)(`Optional content group not found: ${D}`), !0;
              switch (r) {
                case "And":
                  if (!f)
                    return !1;
                  break;
                case "Or":
                  if (f)
                    return !0;
                  break;
                case "Not":
                  return !f;
                default:
                  return !0;
              }
            }
            return r === "And";
          }
        },
        /* 144 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.PDFDataTransportStream = void 0;
          var t = i(1), Z = i(133);
          class W {
            constructor(X, M) {
              (0, t.assert)(M, 'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.'), this._queuedChunks = [], this._progressiveDone = X.progressiveDone || !1, this._contentDispositionFilename = X.contentDispositionFilename || null;
              const x = X.initialData;
              if ((x == null ? void 0 : x.length) > 0) {
                const n = new Uint8Array(x).buffer;
                this._queuedChunks.push(n);
              }
              this._pdfDataRangeTransport = M, this._isStreamingSupported = !X.disableStream, this._isRangeSupported = !X.disableRange, this._contentLength = X.length, this._fullRequestReader = null, this._rangeReaders = [], this._pdfDataRangeTransport.addRangeListener((n, V) => {
                this._onReceiveData({
                  begin: n,
                  chunk: V
                });
              }), this._pdfDataRangeTransport.addProgressListener((n, V) => {
                this._onProgress({
                  loaded: n,
                  total: V
                });
              }), this._pdfDataRangeTransport.addProgressiveReadListener((n) => {
                this._onReceiveData({
                  chunk: n
                });
              }), this._pdfDataRangeTransport.addProgressiveDoneListener(() => {
                this._onProgressiveDone();
              }), this._pdfDataRangeTransport.transportReady();
            }
            _onReceiveData(X) {
              const M = new Uint8Array(X.chunk).buffer;
              if (X.begin === void 0)
                this._fullRequestReader ? this._fullRequestReader._enqueue(M) : this._queuedChunks.push(M);
              else {
                const x = this._rangeReaders.some(function(n) {
                  return n._begin !== X.begin ? !1 : (n._enqueue(M), !0);
                });
                (0, t.assert)(x, "_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.");
              }
            }
            get _progressiveDataLength() {
              var X, M;
              return (X = (M = this._fullRequestReader) === null || M === void 0 ? void 0 : M._loaded) !== null && X !== void 0 ? X : 0;
            }
            _onProgress(X) {
              if (X.total === void 0) {
                const M = this._rangeReaders[0];
                M != null && M.onProgress && M.onProgress({
                  loaded: X.loaded
                });
              } else {
                const M = this._fullRequestReader;
                M != null && M.onProgress && M.onProgress({
                  loaded: X.loaded,
                  total: X.total
                });
              }
            }
            _onProgressiveDone() {
              this._fullRequestReader && this._fullRequestReader.progressiveDone(), this._progressiveDone = !0;
            }
            _removeRangeReader(X) {
              const M = this._rangeReaders.indexOf(X);
              M >= 0 && this._rangeReaders.splice(M, 1);
            }
            getFullReader() {
              (0, t.assert)(!this._fullRequestReader, "PDFDataTransportStream.getFullReader can only be called once.");
              const X = this._queuedChunks;
              return this._queuedChunks = null, new y(this, X, this._progressiveDone, this._contentDispositionFilename);
            }
            getRangeReader(X, M) {
              if (M <= this._progressiveDataLength)
                return null;
              const x = new h(this, X, M);
              return this._pdfDataRangeTransport.requestDataRange(X, M), this._rangeReaders.push(x), x;
            }
            cancelAllRequests(X) {
              this._fullRequestReader && this._fullRequestReader.cancel(X);
              for (const M of this._rangeReaders.slice(0))
                M.cancel(X);
              this._pdfDataRangeTransport.abort();
            }
          }
          c.PDFDataTransportStream = W;
          class y {
            constructor(X, M) {
              let x = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, n = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
              this._stream = X, this._done = x || !1, this._filename = (0, Z.isPdfFile)(n) ? n : null, this._queuedChunks = M || [], this._loaded = 0;
              for (const V of this._queuedChunks)
                this._loaded += V.byteLength;
              this._requests = [], this._headersReady = Promise.resolve(), X._fullRequestReader = this, this.onProgress = null;
            }
            _enqueue(X) {
              this._done || (this._requests.length > 0 ? this._requests.shift().resolve({
                value: X,
                done: !1
              }) : this._queuedChunks.push(X), this._loaded += X.byteLength);
            }
            get headersReady() {
              return this._headersReady;
            }
            get filename() {
              return this._filename;
            }
            get isRangeSupported() {
              return this._stream._isRangeSupported;
            }
            get isStreamingSupported() {
              return this._stream._isStreamingSupported;
            }
            get contentLength() {
              return this._stream._contentLength;
            }
            async read() {
              if (this._queuedChunks.length > 0)
                return {
                  value: this._queuedChunks.shift(),
                  done: !1
                };
              if (this._done)
                return {
                  value: void 0,
                  done: !0
                };
              const X = (0, t.createPromiseCapability)();
              return this._requests.push(X), X.promise;
            }
            cancel(X) {
              this._done = !0;
              for (const M of this._requests)
                M.resolve({
                  value: void 0,
                  done: !0
                });
              this._requests.length = 0;
            }
            progressiveDone() {
              this._done || (this._done = !0);
            }
          }
          class h {
            constructor(X, M, x) {
              this._stream = X, this._begin = M, this._end = x, this._queuedChunk = null, this._requests = [], this._done = !1, this.onProgress = null;
            }
            _enqueue(X) {
              if (!this._done) {
                if (this._requests.length === 0)
                  this._queuedChunk = X;
                else {
                  this._requests.shift().resolve({
                    value: X,
                    done: !1
                  });
                  for (const x of this._requests)
                    x.resolve({
                      value: void 0,
                      done: !0
                    });
                  this._requests.length = 0;
                }
                this._done = !0, this._stream._removeRangeReader(this);
              }
            }
            get isStreamingSupported() {
              return !1;
            }
            async read() {
              if (this._queuedChunk) {
                const M = this._queuedChunk;
                return this._queuedChunk = null, {
                  value: M,
                  done: !1
                };
              }
              if (this._done)
                return {
                  value: void 0,
                  done: !0
                };
              const X = (0, t.createPromiseCapability)();
              return this._requests.push(X), X.promise;
            }
            cancel(X) {
              this._done = !0;
              for (const M of this._requests)
                M.resolve({
                  value: void 0,
                  done: !0
                });
              this._requests.length = 0, this._stream._removeRangeReader(this);
            }
          }
        },
        /* 145 */
        /***/
        (L, c) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.XfaText = void 0;
          class i {
            static textContent(Z) {
              const W = [], y = {
                items: W,
                styles: /* @__PURE__ */ Object.create(null)
              };
              function h(p) {
                var X;
                if (!p)
                  return;
                let M = null;
                const x = p.name;
                if (x === "#text")
                  M = p.value;
                else if (i.shouldBuildText(x))
                  p != null && (X = p.attributes) !== null && X !== void 0 && X.textContent ? M = p.attributes.textContent : p.value && (M = p.value);
                else return;
                if (M !== null && W.push({
                  str: M
                }), !!p.children)
                  for (const n of p.children)
                    h(n);
              }
              return h(Z), y;
            }
            static shouldBuildText(Z) {
              return !(Z === "textarea" || Z === "input" || Z === "option" || Z === "select");
            }
          }
          c.XfaText = i;
        },
        /* 146 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.NodeStandardFontDataFactory = c.NodeCanvasFactory = c.NodeCMapReaderFactory = void 0;
          var t = i(134);
          const Z = function(p) {
            return new Promise((X, M) => {
              require$$7.readFile(p, (n, V) => {
                if (n || !V) {
                  M(new Error(n));
                  return;
                }
                X(new Uint8Array(V));
              });
            });
          };
          class W extends t.BaseCanvasFactory {
            _createCanvas(X, M) {
              return require$$7.createCanvas(X, M);
            }
          }
          c.NodeCanvasFactory = W;
          class y extends t.BaseCMapReaderFactory {
            _fetchData(X, M) {
              return Z(X).then((x) => ({
                cMapData: x,
                compressionType: M
              }));
            }
          }
          c.NodeCMapReaderFactory = y;
          class h extends t.BaseStandardFontDataFactory {
            _fetchData(X) {
              return Z(X);
            }
          }
          c.NodeStandardFontDataFactory = h;
        },
        /* 147 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.AnnotationEditorLayer = void 0;
          var t = i(132), Z = i(1), W = i(148), y = i(149);
          function h(U, k) {
            M(U, k), k.add(U);
          }
          function p(U, k, q) {
            return k in U ? Object.defineProperty(U, k, { value: q, enumerable: !0, configurable: !0, writable: !0 }) : U[k] = q, U;
          }
          function X(U, k, q) {
            M(U, k), k.set(U, q);
          }
          function M(U, k) {
            if (k.has(U))
              throw new TypeError("Cannot initialize the same private elements twice on an object");
          }
          function x(U, k, q) {
            if (!k.has(U))
              throw new TypeError("attempted to get private field on non-instance");
            return q;
          }
          function n(U, k) {
            var q = o(U, k, "get");
            return V(U, q);
          }
          function V(U, k) {
            return k.get ? k.get.call(U) : k.value;
          }
          function S(U, k, q) {
            var al = o(U, k, "set");
            return R(U, al, q), q;
          }
          function o(U, k, q) {
            if (!k.has(U))
              throw new TypeError("attempted to " + q + " private field on non-instance");
            return k.get(U);
          }
          function R(U, k, q) {
            if (k.set)
              k.set.call(U, q);
            else {
              if (!k.writable)
                throw new TypeError("attempted to set read only private field");
              k.value = q;
            }
          }
          var J = /* @__PURE__ */ new WeakMap(), u = /* @__PURE__ */ new WeakMap(), e = /* @__PURE__ */ new WeakMap(), m = /* @__PURE__ */ new WeakMap(), d = /* @__PURE__ */ new WeakMap(), b = /* @__PURE__ */ new WeakMap(), N = /* @__PURE__ */ new WeakMap(), G = /* @__PURE__ */ new WeakMap(), r = /* @__PURE__ */ new WeakSet(), j = /* @__PURE__ */ new WeakSet(), D = /* @__PURE__ */ new WeakSet(), f = /* @__PURE__ */ new WeakSet();
          class P {
            constructor(k) {
              h(this, f), h(this, D), h(this, j), h(this, r), X(this, J, {
                writable: !0,
                value: void 0
              }), X(this, u, {
                writable: !0,
                value: !1
              }), X(this, e, {
                writable: !0,
                value: this.pointerup.bind(this)
              }), X(this, m, {
                writable: !0,
                value: this.pointerdown.bind(this)
              }), X(this, d, {
                writable: !0,
                value: /* @__PURE__ */ new Map()
              }), X(this, b, {
                writable: !0,
                value: !1
              }), X(this, N, {
                writable: !0,
                value: !1
              }), X(this, G, {
                writable: !0,
                value: void 0
              }), P._initialized || (P._initialized = !0, W.FreeTextEditor.initialize(k.l10n), y.InkEditor.initialize(k.l10n), k.uiManager.registerEditorTypes([W.FreeTextEditor, y.InkEditor])), S(this, G, k.uiManager), this.annotationStorage = k.annotationStorage, this.pageIndex = k.pageIndex, this.div = k.div, S(this, J, k.accessibilityManager), n(this, G).addLayer(this);
            }
            updateToolbar(k) {
              n(this, G).updateToolbar(k);
            }
            updateMode() {
              let k = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : n(this, G).getMode();
              x(this, f, O).call(this), k === Z.AnnotationEditorType.INK ? (this.addInkEditorIfNeeded(!1), this.disableClick()) : this.enableClick(), n(this, G).unselectAll();
            }
            addInkEditorIfNeeded(k) {
              if (!k && n(this, G).getMode() !== Z.AnnotationEditorType.INK)
                return;
              if (!k) {
                for (const al of n(this, d).values())
                  if (al.isEmpty()) {
                    al.setInBackground();
                    return;
                  }
              }
              x(this, D, H).call(this, {
                offsetX: 0,
                offsetY: 0
              }).setInBackground();
            }
            setEditingState(k) {
              n(this, G).setEditingState(k);
            }
            addCommands(k) {
              n(this, G).addCommands(k);
            }
            enable() {
              this.div.style.pointerEvents = "auto";
              for (const k of n(this, d).values())
                k.enableEditing();
            }
            disable() {
              this.div.style.pointerEvents = "none";
              for (const k of n(this, d).values())
                k.disableEditing();
            }
            setActiveEditor(k) {
              n(this, G).getActive() !== k && n(this, G).setActiveEditor(k);
            }
            enableClick() {
              this.div.addEventListener("pointerdown", n(this, m)), this.div.addEventListener("pointerup", n(this, e));
            }
            disableClick() {
              this.div.removeEventListener("pointerdown", n(this, m)), this.div.removeEventListener("pointerup", n(this, e));
            }
            attach(k) {
              n(this, d).set(k.id, k);
            }
            detach(k) {
              var q;
              n(this, d).delete(k.id), (q = n(this, J)) === null || q === void 0 || q.removePointerInTextLayer(k.contentDiv);
            }
            remove(k) {
              n(this, G).removeEditor(k), this.detach(k), this.annotationStorage.remove(k.id), k.div.style.display = "none", setTimeout(() => {
                k.div.style.display = "", k.div.remove(), k.isAttachedToDOM = !1, document.activeElement === document.body && n(this, G).focusMainContainer();
              }, 0), n(this, N) || this.addInkEditorIfNeeded(!1);
            }
            add(k) {
              if (x(this, r, B).call(this, k), n(this, G).addEditor(k), this.attach(k), !k.isAttachedToDOM) {
                const q = k.render();
                this.div.append(q), k.isAttachedToDOM = !0;
              }
              this.moveEditorInDOM(k), k.onceAdded(), this.addToAnnotationStorage(k);
            }
            moveEditorInDOM(k) {
              var q;
              (q = n(this, J)) === null || q === void 0 || q.moveElementInDOM(this.div, k.div, k.contentDiv, !0);
            }
            addToAnnotationStorage(k) {
              !k.isEmpty() && !this.annotationStorage.has(k.id) && this.annotationStorage.setValue(k.id, k);
            }
            addOrRebuild(k) {
              k.needsToBeRebuilt() ? k.rebuild() : this.add(k);
            }
            addANewEditor(k) {
              const q = () => {
                this.addOrRebuild(k);
              }, al = () => {
                k.remove();
              };
              this.addCommands({
                cmd: q,
                undo: al,
                mustExec: !0
              });
            }
            addUndoableEditor(k) {
              const q = () => {
                this.addOrRebuild(k);
              }, al = () => {
                k.remove();
              };
              this.addCommands({
                cmd: q,
                undo: al,
                mustExec: !1
              });
            }
            getNextId() {
              return n(this, G).getId();
            }
            deserialize(k) {
              switch (k.annotationType) {
                case Z.AnnotationEditorType.FREETEXT:
                  return W.FreeTextEditor.deserialize(k, this);
                case Z.AnnotationEditorType.INK:
                  return y.InkEditor.deserialize(k, this);
              }
              return null;
            }
            setSelected(k) {
              n(this, G).setSelected(k);
            }
            toggleSelected(k) {
              n(this, G).toggleSelected(k);
            }
            isSelected(k) {
              return n(this, G).isSelected(k);
            }
            unselect(k) {
              n(this, G).unselect(k);
            }
            pointerup(k) {
              const q = t.KeyboardManager.platform.isMac;
              if (!(k.button !== 0 || k.ctrlKey && q) && k.target === this.div && n(this, b)) {
                if (S(this, b, !1), !n(this, u)) {
                  S(this, u, !0);
                  return;
                }
                x(this, D, H).call(this, k);
              }
            }
            pointerdown(k) {
              const q = t.KeyboardManager.platform.isMac;
              if (k.button !== 0 || k.ctrlKey && q || k.target !== this.div)
                return;
              S(this, b, !0);
              const al = n(this, G).getActive();
              S(this, u, !al || al.isEmpty());
            }
            drop(k) {
              const q = k.dataTransfer.getData("text/plain"), al = n(this, G).getEditor(q);
              if (!al)
                return;
              k.preventDefault(), k.dataTransfer.dropEffect = "move", x(this, r, B).call(this, al);
              const Ml = this.div.getBoundingClientRect(), wl = k.clientX - Ml.x, Q = k.clientY - Ml.y;
              al.translate(wl - al.startX, Q - al.startY), this.moveEditorInDOM(al), al.div.focus();
            }
            dragover(k) {
              k.preventDefault();
            }
            destroy() {
              var k;
              ((k = n(this, G).getActive()) === null || k === void 0 ? void 0 : k.parent) === this && n(this, G).setActiveEditor(null);
              for (const al of n(this, d).values()) {
                var q;
                (q = n(this, J)) === null || q === void 0 || q.removePointerInTextLayer(al.contentDiv), al.isAttachedToDOM = !1, al.div.remove(), al.parent = null;
              }
              this.div = null, n(this, d).clear(), n(this, G).removeLayer(this);
            }
            render(k) {
              this.viewport = k.viewport, (0, t.bindEvents)(this, this.div, ["dragover", "drop"]), this.setDimensions();
              for (const q of n(this, G).getEditors(this.pageIndex))
                this.add(q);
              this.updateMode();
            }
            update(k) {
              this.viewport = k.viewport, this.setDimensions(), this.updateMode();
            }
            get scaleFactor() {
              return this.viewport.scale;
            }
            get pageDimensions() {
              const [k, q, al, Ml] = this.viewport.viewBox, wl = al - k, Q = Ml - q;
              return [wl, Q];
            }
            get viewportBaseDimensions() {
              const {
                width: k,
                height: q,
                rotation: al
              } = this.viewport;
              return al % 180 === 0 ? [k, q] : [q, k];
            }
            setDimensions() {
              const {
                width: k,
                height: q,
                rotation: al
              } = this.viewport, Ml = al % 180 !== 0, wl = Math.floor(k) + "px", Q = Math.floor(q) + "px";
              this.div.style.width = Ml ? Q : wl, this.div.style.height = Ml ? wl : Q, this.div.setAttribute("data-main-rotation", al);
            }
          }
          c.AnnotationEditorLayer = P;
          function B(U) {
            var k;
            U.parent !== this && (this.attach(U), U.pageIndex = this.pageIndex, (k = U.parent) === null || k === void 0 || k.detach(U), U.parent = this, U.div && U.isAttachedToDOM && (U.div.remove(), this.div.append(U.div)));
          }
          function A(U) {
            switch (n(this, G).getMode()) {
              case Z.AnnotationEditorType.FREETEXT:
                return new W.FreeTextEditor(U);
              case Z.AnnotationEditorType.INK:
                return new y.InkEditor(U);
            }
            return null;
          }
          function H(U) {
            const k = this.getNextId(), q = x(this, j, A).call(this, {
              parent: this,
              id: k,
              x: U.offsetX,
              y: U.offsetY
            });
            return q && this.add(q), q;
          }
          function O() {
            S(this, N, !0);
            for (const U of n(this, d).values())
              U.isEmpty() && U.remove();
            S(this, N, !1);
          }
          p(P, "_initialized", !1);
        },
        /* 148 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.FreeTextEditor = void 0;
          var t = i(1), Z = i(132), W = i(131);
          function y(H, O) {
            X(H, O), O.add(H);
          }
          function h(H, O, U) {
            return O in H ? Object.defineProperty(H, O, { value: U, enumerable: !0, configurable: !0, writable: !0 }) : H[O] = U, H;
          }
          function p(H, O, U) {
            X(H, O), O.set(H, U);
          }
          function X(H, O) {
            if (O.has(H))
              throw new TypeError("Cannot initialize the same private elements twice on an object");
          }
          function M(H, O) {
            var U = S(H, O, "get");
            return x(H, U);
          }
          function x(H, O) {
            return O.get ? O.get.call(H) : O.value;
          }
          function n(H, O, U) {
            if (!O.has(H))
              throw new TypeError("attempted to get private field on non-instance");
            return U;
          }
          function V(H, O, U) {
            var k = S(H, O, "set");
            return o(H, k, U), U;
          }
          function S(H, O, U) {
            if (!O.has(H))
              throw new TypeError("attempted to " + U + " private field on non-instance");
            return O.get(H);
          }
          function o(H, O, U) {
            if (O.set)
              O.set.call(H, U);
            else {
              if (!O.writable)
                throw new TypeError("attempted to set read only private field");
              O.value = U;
            }
          }
          var R = /* @__PURE__ */ new WeakMap(), J = /* @__PURE__ */ new WeakMap(), u = /* @__PURE__ */ new WeakMap(), e = /* @__PURE__ */ new WeakMap(), m = /* @__PURE__ */ new WeakMap(), d = /* @__PURE__ */ new WeakMap(), b = /* @__PURE__ */ new WeakMap(), N = /* @__PURE__ */ new WeakSet(), G = /* @__PURE__ */ new WeakSet(), r = /* @__PURE__ */ new WeakSet(), j = /* @__PURE__ */ new WeakSet();
          class D extends W.AnnotationEditor {
            constructor(O) {
              super({
                ...O,
                name: "freeTextEditor"
              }), y(this, j), y(this, r), y(this, G), y(this, N), p(this, R, {
                writable: !0,
                value: this.editorDivBlur.bind(this)
              }), p(this, J, {
                writable: !0,
                value: this.editorDivFocus.bind(this)
              }), p(this, u, {
                writable: !0,
                value: this.editorDivKeydown.bind(this)
              }), p(this, e, {
                writable: !0,
                value: void 0
              }), p(this, m, {
                writable: !0,
                value: ""
              }), p(this, d, {
                writable: !0,
                value: !1
              }), p(this, b, {
                writable: !0,
                value: void 0
              }), V(this, e, O.color || D._defaultColor || W.AnnotationEditor._defaultLineColor), V(this, b, O.fontSize || D._defaultFontSize);
            }
            static initialize(O) {
              this._l10nPromise = new Map(["free_text_default_content", "editor_free_text_aria_label"].map((k) => [k, O.get(k)]));
              const U = getComputedStyle(document.documentElement);
              this._internalPadding = parseFloat(U.getPropertyValue("--freetext-padding"));
            }
            static updateDefaultParams(O, U) {
              switch (O) {
                case t.AnnotationEditorParamsType.FREETEXT_SIZE:
                  D._defaultFontSize = U;
                  break;
                case t.AnnotationEditorParamsType.FREETEXT_COLOR:
                  D._defaultColor = U;
                  break;
              }
            }
            updateParams(O, U) {
              switch (O) {
                case t.AnnotationEditorParamsType.FREETEXT_SIZE:
                  n(this, N, f).call(this, U);
                  break;
                case t.AnnotationEditorParamsType.FREETEXT_COLOR:
                  n(this, G, P).call(this, U);
                  break;
              }
            }
            static get defaultPropertiesToUpdate() {
              return [[t.AnnotationEditorParamsType.FREETEXT_SIZE, D._defaultFontSize], [t.AnnotationEditorParamsType.FREETEXT_COLOR, D._defaultColor || W.AnnotationEditor._defaultLineColor]];
            }
            get propertiesToUpdate() {
              return [[t.AnnotationEditorParamsType.FREETEXT_SIZE, M(this, b)], [t.AnnotationEditorParamsType.FREETEXT_COLOR, M(this, e)]];
            }
            getInitialTranslation() {
              return [-D._internalPadding * this.parent.scaleFactor, -(D._internalPadding + M(this, b)) * this.parent.scaleFactor];
            }
            rebuild() {
              super.rebuild(), this.div !== null && (this.isAttachedToDOM || this.parent.add(this));
            }
            enableEditMode() {
              this.isInEditMode() || (this.parent.setEditingState(!1), this.parent.updateToolbar(t.AnnotationEditorType.FREETEXT), super.enableEditMode(), this.enableEditing(), this.overlayDiv.classList.remove("enabled"), this.editorDiv.contentEditable = !0, this.div.draggable = !1, this.editorDiv.addEventListener("keydown", M(this, u)), this.editorDiv.addEventListener("focus", M(this, J)), this.editorDiv.addEventListener("blur", M(this, R)));
            }
            disableEditMode() {
              this.isInEditMode() && (this.parent.setEditingState(!0), super.disableEditMode(), this.disableEditing(), this.overlayDiv.classList.add("enabled"), this.editorDiv.contentEditable = !1, this.div.draggable = !0, this.editorDiv.removeEventListener("keydown", M(this, u)), this.editorDiv.removeEventListener("focus", M(this, J)), this.editorDiv.removeEventListener("blur", M(this, R)), this.div.focus(), this.isEditing = !1);
            }
            focusin(O) {
              super.focusin(O), O.target !== this.editorDiv && this.editorDiv.focus();
            }
            onceAdded() {
              this.width || (this.enableEditMode(), this.editorDiv.focus());
            }
            isEmpty() {
              return !this.editorDiv || this.editorDiv.innerText.trim() === "";
            }
            remove() {
              this.isEditing = !1, this.parent.setEditingState(!0), super.remove();
            }
            commit() {
              super.commit(), M(this, d) || (V(this, d, !0), this.parent.addUndoableEditor(this)), this.disableEditMode(), V(this, m, n(this, r, B).call(this).trimEnd()), n(this, j, A).call(this);
            }
            shouldGetKeyboardEvents() {
              return this.isInEditMode();
            }
            dblclick(O) {
              this.enableEditMode(), this.editorDiv.focus();
            }
            keydown(O) {
              O.target === this.div && O.key === "Enter" && (this.enableEditMode(), this.editorDiv.focus());
            }
            editorDivKeydown(O) {
              D._keyboardManager.exec(this, O);
            }
            editorDivFocus(O) {
              this.isEditing = !0;
            }
            editorDivBlur(O) {
              this.isEditing = !1;
            }
            disableEditing() {
              this.editorDiv.setAttribute("role", "comment"), this.editorDiv.removeAttribute("aria-multiline");
            }
            enableEditing() {
              this.editorDiv.setAttribute("role", "textbox"), this.editorDiv.setAttribute("aria-multiline", !0);
            }
            render() {
              if (this.div)
                return this.div;
              let O, U;
              this.width && (O = this.x, U = this.y), super.render(), this.editorDiv = document.createElement("div"), this.editorDiv.className = "internal", this.editorDiv.setAttribute("id", `${this.id}-editor`), this.enableEditing(), D._l10nPromise.get("editor_free_text_aria_label").then((q) => {
                var al;
                return (al = this.editorDiv) === null || al === void 0 ? void 0 : al.setAttribute("aria-label", q);
              }), D._l10nPromise.get("free_text_default_content").then((q) => {
                var al;
                return (al = this.editorDiv) === null || al === void 0 ? void 0 : al.setAttribute("default-content", q);
              }), this.editorDiv.contentEditable = !0;
              const {
                style: k
              } = this.editorDiv;
              if (k.fontSize = `calc(${M(this, b)}px * var(--scale-factor))`, k.color = M(this, e), this.div.append(this.editorDiv), this.overlayDiv = document.createElement("div"), this.overlayDiv.classList.add("overlay", "enabled"), this.div.append(this.overlayDiv), (0, Z.bindEvents)(this, this.div, ["dblclick", "keydown"]), this.width) {
                const [q, al] = this.parent.viewportBaseDimensions;
                this.setAt(O * q, U * al, this.width * q, this.height * al);
                for (const Ml of M(this, m).split(`
`)) {
                  const wl = document.createElement("div");
                  wl.append(Ml ? document.createTextNode(Ml) : document.createElement("br")), this.editorDiv.append(wl);
                }
                this.div.draggable = !0, this.editorDiv.contentEditable = !1;
              } else
                this.div.draggable = !1, this.editorDiv.contentEditable = !0;
              return this.div;
            }
            get contentDiv() {
              return this.editorDiv;
            }
            static deserialize(O, U) {
              const k = super.deserialize(O, U);
              return V(k, b, O.fontSize), V(k, e, t.Util.makeHexColor(...O.color)), V(k, m, O.value), k;
            }
            serialize() {
              if (this.isEmpty())
                return null;
              const O = D._internalPadding * this.parent.scaleFactor, U = this.getRect(O, O), k = W.AnnotationEditor._colorManager.convert(getComputedStyle(this.editorDiv).color);
              return {
                annotationType: t.AnnotationEditorType.FREETEXT,
                color: k,
                fontSize: M(this, b),
                value: M(this, m),
                pageIndex: this.parent.pageIndex,
                rect: U,
                rotation: this.rotation
              };
            }
          }
          c.FreeTextEditor = D;
          function f(H) {
            const O = (k) => {
              this.editorDiv.style.fontSize = `calc(${k}px * var(--scale-factor))`, this.translate(0, -(k - M(this, b)) * this.parent.scaleFactor), V(this, b, k), n(this, j, A).call(this);
            }, U = M(this, b);
            this.parent.addCommands({
              cmd: () => {
                O(H);
              },
              undo: () => {
                O(U);
              },
              mustExec: !0,
              type: t.AnnotationEditorParamsType.FREETEXT_SIZE,
              overwriteIfSameType: !0,
              keepUndo: !0
            });
          }
          function P(H) {
            const O = M(this, e);
            this.parent.addCommands({
              cmd: () => {
                V(this, e, H), this.editorDiv.style.color = H;
              },
              undo: () => {
                V(this, e, O), this.editorDiv.style.color = O;
              },
              mustExec: !0,
              type: t.AnnotationEditorParamsType.FREETEXT_COLOR,
              overwriteIfSameType: !0,
              keepUndo: !0
            });
          }
          function B() {
            const H = this.editorDiv.getElementsByTagName("div");
            if (H.length === 0)
              return this.editorDiv.innerText;
            const O = [];
            for (let U = 0, k = H.length; U < k; U++) {
              const al = H[U].firstChild;
              (al == null ? void 0 : al.nodeName) === "#text" ? O.push(al.data) : O.push("");
            }
            return O.join(`
`);
          }
          function A() {
            const [H, O] = this.parent.viewportBaseDimensions, U = this.div.getBoundingClientRect();
            this.width = U.width / H, this.height = U.height / O;
          }
          h(D, "_freeTextDefaultContent", ""), h(D, "_l10nPromise", void 0), h(D, "_internalPadding", 0), h(D, "_defaultColor", null), h(D, "_defaultFontSize", 10), h(D, "_keyboardManager", new Z.KeyboardManager([[["ctrl+Enter", "mac+meta+Enter", "Escape", "mac+Escape"], D.prototype.commitOrRemove]])), h(D, "_type", "freetext");
        },
        /* 149 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.InkEditor = void 0, Object.defineProperty(c, "fitCurve", {
            enumerable: !0,
            get: function() {
              return W.fitCurve;
            }
          });
          var t = i(1), Z = i(131), W = i(150), y = i(132);
          function h(ul, Zl) {
            M(ul, Zl), Zl.add(ul);
          }
          function p(ul, Zl, Ll) {
            return Zl in ul ? Object.defineProperty(ul, Zl, { value: Ll, enumerable: !0, configurable: !0, writable: !0 }) : ul[Zl] = Ll, ul;
          }
          function X(ul, Zl, Ll) {
            M(ul, Zl), Zl.set(ul, Ll);
          }
          function M(ul, Zl) {
            if (Zl.has(ul))
              throw new TypeError("Cannot initialize the same private elements twice on an object");
          }
          function x(ul, Zl, Ll) {
            return n(ul, Zl), Ll;
          }
          function n(ul, Zl) {
            if (ul !== Zl)
              throw new TypeError("Private static access of wrong provenance");
          }
          function V(ul, Zl, Ll) {
            var rl = R(ul, Zl, "set");
            return S(ul, rl, Ll), Ll;
          }
          function S(ul, Zl, Ll) {
            if (Zl.set)
              Zl.set.call(ul, Ll);
            else {
              if (!Zl.writable)
                throw new TypeError("attempted to set read only private field");
              Zl.value = Ll;
            }
          }
          function o(ul, Zl) {
            var Ll = R(ul, Zl, "get");
            return J(ul, Ll);
          }
          function R(ul, Zl, Ll) {
            if (!Zl.has(ul))
              throw new TypeError("attempted to " + Ll + " private field on non-instance");
            return Zl.get(ul);
          }
          function J(ul, Zl) {
            return Zl.get ? Zl.get.call(ul) : Zl.value;
          }
          function u(ul, Zl, Ll) {
            if (!Zl.has(ul))
              throw new TypeError("attempted to get private field on non-instance");
            return Ll;
          }
          const e = 16;
          var m = /* @__PURE__ */ new WeakMap(), d = /* @__PURE__ */ new WeakMap(), b = /* @__PURE__ */ new WeakMap(), N = /* @__PURE__ */ new WeakMap(), G = /* @__PURE__ */ new WeakMap(), r = /* @__PURE__ */ new WeakMap(), j = /* @__PURE__ */ new WeakMap(), D = /* @__PURE__ */ new WeakMap(), f = /* @__PURE__ */ new WeakMap(), P = /* @__PURE__ */ new WeakMap(), B = /* @__PURE__ */ new WeakMap(), A = /* @__PURE__ */ new WeakMap(), H = /* @__PURE__ */ new WeakMap(), O = /* @__PURE__ */ new WeakMap(), U = /* @__PURE__ */ new WeakSet(), k = /* @__PURE__ */ new WeakSet(), q = /* @__PURE__ */ new WeakSet(), al = /* @__PURE__ */ new WeakSet(), Ml = /* @__PURE__ */ new WeakSet(), wl = /* @__PURE__ */ new WeakSet(), Q = /* @__PURE__ */ new WeakSet(), T = /* @__PURE__ */ new WeakSet(), w = /* @__PURE__ */ new WeakSet(), g = /* @__PURE__ */ new WeakSet(), K = /* @__PURE__ */ new WeakSet(), a = /* @__PURE__ */ new WeakSet(), Y = /* @__PURE__ */ new WeakSet(), z = /* @__PURE__ */ new WeakSet(), C = /* @__PURE__ */ new WeakSet(), F = /* @__PURE__ */ new WeakSet(), v = /* @__PURE__ */ new WeakSet(), $ = /* @__PURE__ */ new WeakSet(), il = /* @__PURE__ */ new WeakSet(), dl = /* @__PURE__ */ new WeakSet(), el = /* @__PURE__ */ new WeakSet(), bl = /* @__PURE__ */ new WeakSet();
          class ml extends Z.AnnotationEditor {
            constructor(Zl) {
              super({
                ...Zl,
                name: "inkEditor"
              }), h(this, bl), h(this, el), h(this, dl), h(this, il), h(this, $), h(this, v), h(this, F), h(this, C), h(this, z), h(this, Y), h(this, a), h(this, K), h(this, g), h(this, w), h(this, T), h(this, Q), h(this, wl), h(this, Ml), h(this, al), h(this, q), h(this, k), h(this, U), X(this, m, {
                writable: !0,
                value: 0
              }), X(this, d, {
                writable: !0,
                value: 0
              }), X(this, b, {
                writable: !0,
                value: 0
              }), X(this, N, {
                writable: !0,
                value: this.canvasPointermove.bind(this)
              }), X(this, G, {
                writable: !0,
                value: this.canvasPointerleave.bind(this)
              }), X(this, r, {
                writable: !0,
                value: this.canvasPointerup.bind(this)
              }), X(this, j, {
                writable: !0,
                value: this.canvasPointerdown.bind(this)
              }), X(this, D, {
                writable: !0,
                value: !1
              }), X(this, f, {
                writable: !0,
                value: !1
              }), X(this, P, {
                writable: !0,
                value: null
              }), X(this, B, {
                writable: !0,
                value: null
              }), X(this, A, {
                writable: !0,
                value: 0
              }), X(this, H, {
                writable: !0,
                value: 0
              }), X(this, O, {
                writable: !0,
                value: null
              }), this.color = Zl.color || null, this.thickness = Zl.thickness || null, this.opacity = Zl.opacity || null, this.paths = [], this.bezierPath2D = [], this.currentPath = [], this.scaleFactor = 1, this.translationX = this.translationY = 0, this.x = 0, this.y = 0;
            }
            static initialize(Zl) {
              this._l10nPromise = new Map(["editor_ink_canvas_aria_label", "editor_ink_aria_label"].map((Ll) => [Ll, Zl.get(Ll)]));
            }
            static updateDefaultParams(Zl, Ll) {
              switch (Zl) {
                case t.AnnotationEditorParamsType.INK_THICKNESS:
                  ml._defaultThickness = Ll;
                  break;
                case t.AnnotationEditorParamsType.INK_COLOR:
                  ml._defaultColor = Ll;
                  break;
                case t.AnnotationEditorParamsType.INK_OPACITY:
                  ml._defaultOpacity = Ll / 100;
                  break;
              }
            }
            updateParams(Zl, Ll) {
              switch (Zl) {
                case t.AnnotationEditorParamsType.INK_THICKNESS:
                  u(this, U, Gl).call(this, Ll);
                  break;
                case t.AnnotationEditorParamsType.INK_COLOR:
                  u(this, k, Yl).call(this, Ll);
                  break;
                case t.AnnotationEditorParamsType.INK_OPACITY:
                  u(this, q, yl).call(this, Ll);
                  break;
              }
            }
            static get defaultPropertiesToUpdate() {
              return [[t.AnnotationEditorParamsType.INK_THICKNESS, ml._defaultThickness], [t.AnnotationEditorParamsType.INK_COLOR, ml._defaultColor || Z.AnnotationEditor._defaultLineColor], [t.AnnotationEditorParamsType.INK_OPACITY, Math.round(ml._defaultOpacity * 100)]];
            }
            get propertiesToUpdate() {
              var Zl;
              return [[t.AnnotationEditorParamsType.INK_THICKNESS, this.thickness || ml._defaultThickness], [t.AnnotationEditorParamsType.INK_COLOR, this.color || ml._defaultColor || Z.AnnotationEditor._defaultLineColor], [t.AnnotationEditorParamsType.INK_OPACITY, Math.round(100 * ((Zl = this.opacity) !== null && Zl !== void 0 ? Zl : ml._defaultOpacity))]];
            }
            rebuild() {
              super.rebuild(), this.div !== null && (this.canvas || (u(this, K, cl).call(this), u(this, a, Il).call(this)), this.isAttachedToDOM || (this.parent.add(this), u(this, Y, Jl).call(this)), u(this, el, Cl).call(this));
            }
            remove() {
              this.canvas !== null && (this.isEmpty() || this.commit(), this.canvas.width = this.canvas.height = 0, this.canvas.remove(), this.canvas = null, o(this, B).disconnect(), V(this, B, null), super.remove());
            }
            enableEditMode() {
              o(this, D) || this.canvas === null || (super.enableEditMode(), this.div.draggable = !1, this.canvas.addEventListener("pointerdown", o(this, j)), this.canvas.addEventListener("pointerup", o(this, r)));
            }
            disableEditMode() {
              !this.isInEditMode() || this.canvas === null || (super.disableEditMode(), this.div.draggable = !this.isEmpty(), this.div.classList.remove("editing"), this.canvas.removeEventListener("pointerdown", o(this, j)), this.canvas.removeEventListener("pointerup", o(this, r)));
            }
            onceAdded() {
              this.div.draggable = !this.isEmpty();
            }
            isEmpty() {
              return this.paths.length === 0 || this.paths.length === 1 && this.paths[0].length === 0;
            }
            commit() {
              o(this, D) || (super.commit(), this.isEditing = !1, this.disableEditMode(), this.setInForeground(), V(this, D, !0), this.div.classList.add("disabled"), u(this, el, Cl).call(this, !0), this.parent.addInkEditorIfNeeded(!0), this.parent.moveEditorInDOM(this), this.div.focus());
            }
            focusin(Zl) {
              super.focusin(Zl), this.enableEditMode();
            }
            canvasPointerdown(Zl) {
              Zl.button !== 0 || !this.isInEditMode() || o(this, D) || (this.setInForeground(), Zl.type !== "mouse" && this.div.focus(), Zl.stopPropagation(), this.canvas.addEventListener("pointerleave", o(this, G)), this.canvas.addEventListener("pointermove", o(this, N)), u(this, wl, Xl).call(this, Zl.offsetX, Zl.offsetY));
            }
            canvasPointermove(Zl) {
              Zl.stopPropagation(), u(this, Q, Hl).call(this, Zl.offsetX, Zl.offsetY);
            }
            canvasPointerup(Zl) {
              Zl.button === 0 && this.isInEditMode() && this.currentPath.length !== 0 && (Zl.stopPropagation(), u(this, g, ol).call(this, Zl), this.setInBackground());
            }
            canvasPointerleave(Zl) {
              u(this, g, ol).call(this, Zl), this.setInBackground();
            }
            render() {
              if (this.div)
                return this.div;
              let Zl, Ll;
              this.width && (Zl = this.x, Ll = this.y), super.render(), ml._l10nPromise.get("editor_ink_aria_label").then((El) => {
                var xl;
                return (xl = this.div) === null || xl === void 0 ? void 0 : xl.setAttribute("aria-label", El);
              });
              const [rl, Fl, Kl, Ol] = u(this, al, Vl).call(this);
              if (this.setAt(rl, Fl, 0, 0), this.setDims(Kl, Ol), u(this, K, cl).call(this), this.width) {
                const [El, xl] = this.parent.viewportBaseDimensions;
                this.setAt(Zl * El, Ll * xl, this.width * El, this.height * xl), V(this, f, !0), u(this, Y, Jl).call(this), this.setDims(this.width * El, this.height * xl), u(this, w, Sl).call(this), u(this, bl, jl).call(this), this.div.classList.add("disabled");
              } else
                this.div.classList.add("editing"), this.enableEditMode();
              return u(this, a, Il).call(this), this.div;
            }
            setDimensions(Zl, Ll) {
              const rl = Math.round(Zl), Fl = Math.round(Ll);
              if (o(this, A) === rl && o(this, H) === Fl)
                return;
              V(this, A, rl), V(this, H, Fl), this.canvas.style.visibility = "hidden", o(this, m) && Math.abs(o(this, m) - Zl / Ll) > 0.01 && (Ll = Math.ceil(Zl / o(this, m)), this.setDims(Zl, Ll));
              const [Kl, Ol] = this.parent.viewportBaseDimensions;
              this.width = Zl / Kl, this.height = Ll / Ol, o(this, D) && u(this, z, fl).call(this, Zl, Ll), u(this, Y, Jl).call(this), u(this, w, Sl).call(this), this.canvas.style.visibility = "visible";
            }
            static deserialize(Zl, Ll) {
              const rl = super.deserialize(Zl, Ll);
              rl.thickness = Zl.thickness, rl.color = t.Util.makeHexColor(...Zl.color), rl.opacity = Zl.opacity;
              const [Fl, Kl] = Ll.pageDimensions, Ol = rl.width * Fl, El = rl.height * Kl, xl = Ll.scaleFactor, Bl = Zl.thickness / 2;
              V(rl, m, Ol / El), V(rl, D, !0), V(rl, A, Math.round(Ol)), V(rl, H, Math.round(El));
              for (const {
                bezier: Pl
              } of Zl.paths) {
                const ql = [];
                rl.paths.push(ql);
                let ci = xl * (Pl[0] - Bl), $l = xl * (El - Pl[1] - Bl);
                for (let li = 2, Gi = Pl.length; li < Gi; li += 6) {
                  const Ti = xl * (Pl[li] - Bl), ei = xl * (El - Pl[li + 1] - Bl), Di = xl * (Pl[li + 2] - Bl), Ki = xl * (El - Pl[li + 3] - Bl), xi = xl * (Pl[li + 4] - Bl), mi = xl * (El - Pl[li + 5] - Bl);
                  ql.push([[ci, $l], [Ti, ei], [Di, Ki], [xi, mi]]), ci = xi, $l = mi;
                }
                const Zi = x(this, ml, zl).call(this, ql);
                rl.bezierPath2D.push(Zi);
              }
              const si = u(rl, il, sl).call(rl);
              return V(rl, b, Math.max(e, si[2] - si[0])), V(rl, d, Math.max(e, si[3] - si[1])), u(rl, z, fl).call(rl, Ol, El), rl;
            }
            serialize() {
              if (this.isEmpty())
                return null;
              const Zl = this.getRect(0, 0), Ll = this.rotation % 180 === 0 ? Zl[3] - Zl[1] : Zl[2] - Zl[0], rl = Z.AnnotationEditor._colorManager.convert(this.ctx.strokeStyle);
              return {
                annotationType: t.AnnotationEditorType.INK,
                color: rl,
                thickness: this.thickness,
                opacity: this.opacity,
                paths: u(this, F, kl).call(this, this.scaleFactor / this.parent.scaleFactor, this.translationX, this.translationY, Ll),
                pageIndex: this.parent.pageIndex,
                rect: Zl,
                rotation: this.rotation
              };
            }
          }
          c.InkEditor = ml;
          function Gl(ul) {
            const Zl = this.thickness;
            this.parent.addCommands({
              cmd: () => {
                this.thickness = ul, u(this, el, Cl).call(this);
              },
              undo: () => {
                this.thickness = Zl, u(this, el, Cl).call(this);
              },
              mustExec: !0,
              type: t.AnnotationEditorParamsType.INK_THICKNESS,
              overwriteIfSameType: !0,
              keepUndo: !0
            });
          }
          function Yl(ul) {
            const Zl = this.color;
            this.parent.addCommands({
              cmd: () => {
                this.color = ul, u(this, w, Sl).call(this);
              },
              undo: () => {
                this.color = Zl, u(this, w, Sl).call(this);
              },
              mustExec: !0,
              type: t.AnnotationEditorParamsType.INK_COLOR,
              overwriteIfSameType: !0,
              keepUndo: !0
            });
          }
          function yl(ul) {
            ul /= 100;
            const Zl = this.opacity;
            this.parent.addCommands({
              cmd: () => {
                this.opacity = ul, u(this, w, Sl).call(this);
              },
              undo: () => {
                this.opacity = Zl, u(this, w, Sl).call(this);
              },
              mustExec: !0,
              type: t.AnnotationEditorParamsType.INK_OPACITY,
              overwriteIfSameType: !0,
              keepUndo: !0
            });
          }
          function Vl() {
            const {
              width: ul,
              height: Zl,
              rotation: Ll
            } = this.parent.viewport;
            switch (Ll) {
              case 90:
                return [0, ul, ul, Zl];
              case 180:
                return [ul, Zl, ul, Zl];
              case 270:
                return [Zl, 0, ul, Zl];
              default:
                return [0, 0, ul, Zl];
            }
          }
          function Dl() {
            this.ctx.lineWidth = this.thickness * this.parent.scaleFactor / this.scaleFactor, this.ctx.lineCap = "round", this.ctx.lineJoin = "round", this.ctx.miterLimit = 10, this.ctx.strokeStyle = `${this.color}${(0, y.opacityToHex)(this.opacity)}`;
          }
          function Xl(ul, Zl) {
            if (this.isEditing = !0, !o(this, f)) {
              var Ll;
              V(this, f, !0), u(this, Y, Jl).call(this), this.thickness || (this.thickness = ml._defaultThickness), this.color || (this.color = ml._defaultColor || Z.AnnotationEditor._defaultLineColor), (Ll = this.opacity) !== null && Ll !== void 0 || (this.opacity = ml._defaultOpacity);
            }
            this.currentPath.push([ul, Zl]), V(this, P, null), u(this, Ml, Dl).call(this), this.ctx.beginPath(), this.ctx.moveTo(ul, Zl), V(this, O, () => {
              o(this, O) && (o(this, P) && (this.isEmpty() ? (this.ctx.setTransform(1, 0, 0, 1, 0, 0), this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)) : u(this, w, Sl).call(this), this.ctx.lineTo(...o(this, P)), V(this, P, null), this.ctx.stroke()), window.requestAnimationFrame(o(this, O)));
            }), window.requestAnimationFrame(o(this, O));
          }
          function Hl(ul, Zl) {
            const [Ll, rl] = this.currentPath.at(-1);
            ul === Ll && Zl === rl || (this.currentPath.push([ul, Zl]), V(this, P, [ul, Zl]));
          }
          function Al(ul, Zl) {
            this.ctx.closePath(), V(this, O, null), ul = Math.min(Math.max(ul, 0), this.canvas.width), Zl = Math.min(Math.max(Zl, 0), this.canvas.height);
            const [Ll, rl] = this.currentPath.at(-1);
            (ul !== Ll || Zl !== rl) && this.currentPath.push([ul, Zl]);
            let Fl;
            if (this.currentPath.length !== 1)
              Fl = (0, W.fitCurve)(this.currentPath, 30, null);
            else {
              const xl = [ul, Zl];
              Fl = [[xl, xl.slice(), xl.slice(), xl]];
            }
            const Kl = x(ml, ml, zl).call(ml, Fl);
            this.currentPath.length = 0;
            const Ol = () => {
              this.paths.push(Fl), this.bezierPath2D.push(Kl), this.rebuild();
            }, El = () => {
              this.paths.pop(), this.bezierPath2D.pop(), this.paths.length === 0 ? this.remove() : (this.canvas || (u(this, K, cl).call(this), u(this, a, Il).call(this)), u(this, el, Cl).call(this));
            };
            this.parent.addCommands({
              cmd: Ol,
              undo: El,
              mustExec: !0
            });
          }
          function Sl() {
            if (this.isEmpty()) {
              u(this, C, Nl).call(this);
              return;
            }
            u(this, Ml, Dl).call(this);
            const {
              canvas: ul,
              ctx: Zl
            } = this;
            Zl.setTransform(1, 0, 0, 1, 0, 0), Zl.clearRect(0, 0, ul.width, ul.height), u(this, C, Nl).call(this);
            for (const Ll of this.bezierPath2D)
              Zl.stroke(Ll);
          }
          function ol(ul) {
            u(this, T, Al).call(this, ul.offsetX, ul.offsetY), this.canvas.removeEventListener("pointerleave", o(this, G)), this.canvas.removeEventListener("pointermove", o(this, N)), this.parent.addToAnnotationStorage(this);
          }
          function cl() {
            this.canvas = document.createElement("canvas"), this.canvas.width = this.canvas.height = 0, this.canvas.className = "inkEditorCanvas", ml._l10nPromise.get("editor_ink_canvas_aria_label").then((ul) => {
              var Zl;
              return (Zl = this.canvas) === null || Zl === void 0 ? void 0 : Zl.setAttribute("aria-label", ul);
            }), this.div.append(this.canvas), this.ctx = this.canvas.getContext("2d");
          }
          function Il() {
            V(this, B, new ResizeObserver((ul) => {
              const Zl = ul[0].contentRect;
              Zl.width && Zl.height && this.setDimensions(Zl.width, Zl.height);
            })), o(this, B).observe(this.div);
          }
          function Jl() {
            if (!o(this, f))
              return;
            const [ul, Zl] = this.parent.viewportBaseDimensions;
            this.canvas.width = Math.ceil(this.width * ul), this.canvas.height = Math.ceil(this.height * Zl), u(this, C, Nl).call(this);
          }
          function fl(ul, Zl) {
            const Ll = u(this, dl, hl).call(this), rl = (ul - Ll) / o(this, b), Fl = (Zl - Ll) / o(this, d);
            this.scaleFactor = Math.min(rl, Fl);
          }
          function Nl() {
            const ul = u(this, dl, hl).call(this) / 2;
            this.ctx.setTransform(this.scaleFactor, 0, 0, this.scaleFactor, this.translationX * this.scaleFactor + ul, this.translationY * this.scaleFactor + ul);
          }
          function zl(ul) {
            const Zl = new Path2D();
            for (let Ll = 0, rl = ul.length; Ll < rl; Ll++) {
              const [Fl, Kl, Ol, El] = ul[Ll];
              Ll === 0 && Zl.moveTo(...Fl), Zl.bezierCurveTo(Kl[0], Kl[1], Ol[0], Ol[1], El[0], El[1]);
            }
            return Zl;
          }
          function kl(ul, Zl, Ll, rl) {
            const Kl = [], Ol = this.thickness / 2;
            let El, xl;
            for (const Bl of this.paths) {
              El = [], xl = [];
              for (let si = 0, Pl = Bl.length; si < Pl; si++) {
                const [ql, ci, $l, Zi] = Bl[si], li = ul * (ql[0] + Zl) + Ol, Gi = rl - ul * (ql[1] + Ll) - Ol, Ti = ul * (ci[0] + Zl) + Ol, ei = rl - ul * (ci[1] + Ll) - Ol, Di = ul * ($l[0] + Zl) + Ol, Ki = rl - ul * ($l[1] + Ll) - Ol, xi = ul * (Zi[0] + Zl) + Ol, mi = rl - ul * (Zi[1] + Ll) - Ol;
                si === 0 && (El.push(li, Gi), xl.push(li, Gi)), El.push(Ti, ei, Di, Ki, xi, mi), u(this, v, nl).call(this, li, Gi, Ti, ei, Di, Ki, xi, mi, 4, xl);
              }
              Kl.push({
                bezier: El,
                points: xl
              });
            }
            return Kl;
          }
          function nl(ul, Zl, Ll, rl, Fl, Kl, Ol, El, xl, Bl) {
            if (u(this, $, ll).call(this, ul, Zl, Ll, rl, Fl, Kl, Ol, El)) {
              Bl.push(Ol, El);
              return;
            }
            for (let si = 1; si < xl - 1; si++) {
              const Pl = si / xl, ql = 1 - Pl;
              let ci = Pl * ul + ql * Ll, $l = Pl * Zl + ql * rl, Zi = Pl * Ll + ql * Fl, li = Pl * rl + ql * Kl;
              const Gi = Pl * Fl + ql * Ol, Ti = Pl * Kl + ql * El;
              ci = Pl * ci + ql * Zi, $l = Pl * $l + ql * li, Zi = Pl * Zi + ql * Gi, li = Pl * li + ql * Ti, ci = Pl * ci + ql * Zi, $l = Pl * $l + ql * li, Bl.push(ci, $l);
            }
            Bl.push(Ol, El);
          }
          function ll(ul, Zl, Ll, rl, Fl, Kl, Ol, El) {
            const Bl = (3 * Ll - 2 * ul - Ol) ** 2, si = (3 * rl - 2 * Zl - El) ** 2, Pl = (3 * Fl - ul - 2 * Ol) ** 2, ql = (3 * Kl - Zl - 2 * El) ** 2;
            return Math.max(Bl, Pl) + Math.max(si, ql) <= 10;
          }
          function sl() {
            let ul = 1 / 0, Zl = -1 / 0, Ll = 1 / 0, rl = -1 / 0;
            for (const Fl of this.paths)
              for (const [Kl, Ol, El, xl] of Fl) {
                const Bl = t.Util.bezierBoundingBox(...Kl, ...Ol, ...El, ...xl);
                ul = Math.min(ul, Bl[0]), Ll = Math.min(Ll, Bl[1]), Zl = Math.max(Zl, Bl[2]), rl = Math.max(rl, Bl[3]);
              }
            return [ul, Ll, Zl, rl];
          }
          function hl() {
            return o(this, D) ? Math.ceil(this.thickness * this.parent.scaleFactor) : 0;
          }
          function Cl() {
            let ul = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
            if (this.isEmpty())
              return;
            if (!o(this, D)) {
              u(this, w, Sl).call(this);
              return;
            }
            const Zl = u(this, il, sl).call(this), Ll = u(this, dl, hl).call(this);
            V(this, b, Math.max(e, Zl[2] - Zl[0])), V(this, d, Math.max(e, Zl[3] - Zl[1]));
            const rl = Math.ceil(Ll + o(this, b) * this.scaleFactor), Fl = Math.ceil(Ll + o(this, d) * this.scaleFactor), [Kl, Ol] = this.parent.viewportBaseDimensions;
            this.width = rl / Kl, this.height = Fl / Ol, V(this, m, rl / Fl), u(this, bl, jl).call(this);
            const El = this.translationX, xl = this.translationY;
            this.translationX = -Zl[0], this.translationY = -Zl[1], u(this, Y, Jl).call(this), u(this, w, Sl).call(this), V(this, A, rl), V(this, H, Fl), this.setDims(rl, Fl);
            const Bl = ul ? Ll / this.scaleFactor / 2 : 0;
            this.translate(El - this.translationX - Bl, xl - this.translationY - Bl);
          }
          function jl() {
            const {
              style: ul
            } = this.div;
            o(this, m) >= 1 ? (ul.minHeight = `${e}px`, ul.minWidth = `${Math.round(o(this, m) * e)}px`) : (ul.minWidth = `${e}px`, ul.minHeight = `${Math.round(e / o(this, m))}px`);
          }
          p(ml, "_defaultColor", null), p(ml, "_defaultOpacity", 1), p(ml, "_defaultThickness", 1), p(ml, "_l10nPromise", void 0), p(ml, "_type", "ink");
        },
        /* 150 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.fitCurve = void 0;
          const t = i(151);
          c.fitCurve = t;
        },
        /* 151 */
        /***/
        (L) => {
          function c(S, o, R) {
            if (!Array.isArray(S))
              throw new TypeError("First argument should be an array");
            if (S.forEach((m) => {
              if (!Array.isArray(m) || m.some((d) => typeof d != "number") || m.length !== S[0].length)
                throw Error("Each point should be an array of numbers. Each point should have the same amount of numbers.");
            }), S = S.filter((m, d) => d === 0 || !m.every((b, N) => b === S[d - 1][N])), S.length < 2)
              return [];
            const J = S.length, u = x(S[1], S[0]), e = x(S[J - 2], S[J - 1]);
            return i(S, u, e, o, R);
          }
          function i(S, o, R, J, u) {
            var m, d, b, N, G, r, j, D, f, P, B, A, H;
            if (S.length === 2)
              return A = n.vectorLen(n.subtract(S[0], S[1])) / 3, m = [S[0], n.addArrays(S[0], n.mulItems(o, A)), n.addArrays(S[1], n.mulItems(R, A)), S[1]], [m];
            if (d = h(S), [m, N, r] = t(S, d, d, o, R, u), N === 0 || N < J)
              return [m];
            if (N < J * J)
              for (b = d, G = N, j = r, H = 0; H < 20; H++) {
                if (b = W(m, S, b), [m, N, r] = t(S, d, b, o, R, u), N < J)
                  return [m];
                if (r === j) {
                  let O = N / G;
                  if (O > 0.9999 && O < 1.0001)
                    break;
                }
                G = N, j = r;
              }
            return B = [], D = n.subtract(S[r - 1], S[r + 1]), D.every((O) => O === 0) && (D = n.subtract(S[r - 1], S[r]), [D[0], D[1]] = [-D[1], D[0]]), f = n.normalize(D), P = n.mulItems(f, -1), B = B.concat(i(S.slice(0, r + 1), o, f, J, u)), B = B.concat(i(S.slice(r), P, R, J, u)), B;
          }
          function t(S, o, R, J, u, e) {
            var m, d, b;
            return m = Z(S, R, J, u), [d, b] = p(S, m, o), e && e({
              bez: m,
              points: S,
              params: o,
              maxErr: d,
              maxPoint: b
            }), [m, d, b];
          }
          function Z(S, o, R, J) {
            var u, e, m, d, b, N, G, r, j, D, f, P, B, A, H, O, U, k = S[0], q = S[S.length - 1];
            for (u = [k, null, null, q], e = n.zeros_Xx2x2(o.length), B = 0, A = o.length; B < A; B++)
              O = o[B], U = 1 - O, m = e[B], m[0] = n.mulItems(R, 3 * O * (U * U)), m[1] = n.mulItems(J, 3 * U * (O * O));
            for (d = [[0, 0], [0, 0]], b = [0, 0], B = 0, A = S.length; B < A; B++)
              O = o[B], m = e[B], d[0][0] += n.dot(m[0], m[0]), d[0][1] += n.dot(m[0], m[1]), d[1][0] += n.dot(m[0], m[1]), d[1][1] += n.dot(m[1], m[1]), H = n.subtract(S[B], V.q([k, k, q, q], O)), b[0] += n.dot(m[0], H), b[1] += n.dot(m[1], H);
            return N = d[0][0] * d[1][1] - d[1][0] * d[0][1], G = d[0][0] * b[1] - d[1][0] * b[0], r = b[0] * d[1][1] - b[1] * d[0][1], j = N === 0 ? 0 : r / N, D = N === 0 ? 0 : G / N, P = n.vectorLen(n.subtract(k, q)), f = 1e-6 * P, j < f || D < f ? (u[1] = n.addArrays(k, n.mulItems(R, P / 3)), u[2] = n.addArrays(q, n.mulItems(J, P / 3))) : (u[1] = n.addArrays(k, n.mulItems(R, j)), u[2] = n.addArrays(q, n.mulItems(J, D))), u;
          }
          function W(S, o, R) {
            return R.map((J, u) => y(S, o[u], J));
          }
          function y(S, o, R) {
            var J = n.subtract(V.q(S, R), o), u = V.qprime(S, R), e = n.mulMatrix(J, u), m = n.sum(n.squareItems(u)) + 2 * n.mulMatrix(J, V.qprimeprime(S, R));
            return m === 0 ? R : R - e / m;
          }
          function h(S) {
            var o = [], R, J, u;
            return S.forEach((e, m) => {
              R = m ? J + n.vectorLen(n.subtract(e, u)) : 0, o.push(R), J = R, u = e;
            }), o = o.map((e) => e / J), o;
          }
          function p(S, o, R) {
            var J, u, e, m, d, b, N, G;
            u = 0, e = Math.floor(S.length / 2);
            const r = X(o, 10);
            for (d = 0, b = S.length; d < b; d++)
              N = S[d], G = M(o, R[d], r, 10), m = n.subtract(V.q(o, G), N), J = m[0] * m[0] + m[1] * m[1], J > u && (u = J, e = d);
            return [u, e];
          }
          var X = function(S, o) {
            for (var R, J = [0], u = S[0], e = 0, m = 1; m <= o; m++)
              R = V.q(S, m / o), e += n.vectorLen(n.subtract(R, u)), J.push(e), u = R;
            return J = J.map((d) => d / e), J;
          };
          function M(S, o, R, J) {
            if (o < 0)
              return 0;
            if (o > 1)
              return 1;
            for (var u, e, m, d, b, N = 1; N <= J; N++)
              if (o <= R[N]) {
                d = (N - 1) / J, m = N / J, e = R[N - 1], u = R[N], b = (o - e) / (u - e) * (m - d) + d;
                break;
              }
            return b;
          }
          function x(S, o) {
            return n.normalize(n.subtract(S, o));
          }
          class n {
            static zeros_Xx2x2(o) {
              for (var R = []; o--; )
                R.push([0, 0]);
              return R;
            }
            static mulItems(o, R) {
              return o.map((J) => J * R);
            }
            static mulMatrix(o, R) {
              return o.reduce((J, u, e) => J + u * R[e], 0);
            }
            static subtract(o, R) {
              return o.map((J, u) => J - R[u]);
            }
            static addArrays(o, R) {
              return o.map((J, u) => J + R[u]);
            }
            static addItems(o, R) {
              return o.map((J) => J + R);
            }
            static sum(o) {
              return o.reduce((R, J) => R + J);
            }
            static dot(o, R) {
              return n.mulMatrix(o, R);
            }
            static vectorLen(o) {
              return Math.hypot(...o);
            }
            static divItems(o, R) {
              return o.map((J) => J / R);
            }
            static squareItems(o) {
              return o.map((R) => R * R);
            }
            static normalize(o) {
              return this.divItems(o, this.vectorLen(o));
            }
          }
          class V {
            static q(o, R) {
              var J = 1 - R, u = n.mulItems(o[0], J * J * J), e = n.mulItems(o[1], 3 * J * J * R), m = n.mulItems(o[2], 3 * J * R * R), d = n.mulItems(o[3], R * R * R);
              return n.addArrays(n.addArrays(u, e), n.addArrays(m, d));
            }
            static qprime(o, R) {
              var J = 1 - R, u = n.mulItems(n.subtract(o[1], o[0]), 3 * J * J), e = n.mulItems(n.subtract(o[2], o[1]), 6 * J * R), m = n.mulItems(n.subtract(o[3], o[2]), 3 * R * R);
              return n.addArrays(n.addArrays(u, e), m);
            }
            static qprimeprime(o, R) {
              return n.addArrays(n.mulItems(n.addArrays(n.subtract(o[2], n.mulItems(o[1], 2)), o[0]), 6 * (1 - R)), n.mulItems(n.addArrays(n.subtract(o[3], n.mulItems(o[2], 2)), o[1]), 6 * R));
            }
          }
          L.exports = c, L.exports.fitCubic = i, L.exports.createTangent = x;
        },
        /* 152 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.AnnotationLayer = void 0;
          var t = i(1), Z = i(133), W = i(130), y = i(153), h = i(154);
          function p(K, a, Y) {
            return X(K, a), Y;
          }
          function X(K, a) {
            if (K !== a)
              throw new TypeError("Private static access of wrong provenance");
          }
          const M = 1e3, x = 9, n = /* @__PURE__ */ new WeakSet();
          function V(K) {
            return {
              width: K[2] - K[0],
              height: K[3] - K[1]
            };
          }
          class S {
            static create(a) {
              switch (a.data.annotationType) {
                case t.AnnotationType.LINK:
                  return new R(a);
                case t.AnnotationType.TEXT:
                  return new J(a);
                case t.AnnotationType.WIDGET:
                  switch (a.data.fieldType) {
                    case "Tx":
                      return new e(a);
                    case "Btn":
                      return a.data.radioButton ? new d(a) : a.data.checkBox ? new m(a) : new b(a);
                    case "Ch":
                      return new N(a);
                  }
                  return new u(a);
                case t.AnnotationType.POPUP:
                  return new G(a);
                case t.AnnotationType.FREETEXT:
                  return new j(a);
                case t.AnnotationType.LINE:
                  return new D(a);
                case t.AnnotationType.SQUARE:
                  return new f(a);
                case t.AnnotationType.CIRCLE:
                  return new P(a);
                case t.AnnotationType.POLYLINE:
                  return new B(a);
                case t.AnnotationType.CARET:
                  return new H(a);
                case t.AnnotationType.INK:
                  return new O(a);
                case t.AnnotationType.POLYGON:
                  return new A(a);
                case t.AnnotationType.HIGHLIGHT:
                  return new U(a);
                case t.AnnotationType.UNDERLINE:
                  return new k(a);
                case t.AnnotationType.SQUIGGLY:
                  return new q(a);
                case t.AnnotationType.STRIKEOUT:
                  return new al(a);
                case t.AnnotationType.STAMP:
                  return new Ml(a);
                case t.AnnotationType.FILEATTACHMENT:
                  return new wl(a);
                default:
                  return new o(a);
              }
            }
          }
          class o {
            constructor(a) {
              let {
                isRenderable: Y = !1,
                ignoreBorder: z = !1,
                createQuadrilaterals: C = !1
              } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
              this.isRenderable = Y, this.data = a.data, this.layer = a.layer, this.page = a.page, this.viewport = a.viewport, this.linkService = a.linkService, this.downloadManager = a.downloadManager, this.imageResourcesPath = a.imageResourcesPath, this.renderForms = a.renderForms, this.svgFactory = a.svgFactory, this.annotationStorage = a.annotationStorage, this.enableScripting = a.enableScripting, this.hasJSActions = a.hasJSActions, this._fieldObjects = a.fieldObjects, this._mouseState = a.mouseState, Y && (this.container = this._createContainer(z)), C && (this.quadrilaterals = this._createQuadrilaterals(z));
            }
            _createContainer() {
              let a = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
              const Y = this.data, z = this.page, C = this.viewport, F = document.createElement("section"), {
                width: v,
                height: $
              } = V(Y.rect), [il, dl, el, bl] = C.viewBox, ml = el - il, Gl = bl - dl;
              F.setAttribute("data-annotation-id", Y.id);
              const Yl = t.Util.normalizeRect([Y.rect[0], z.view[3] - Y.rect[1] + z.view[1], Y.rect[2], z.view[3] - Y.rect[3] + z.view[1]]);
              if (!a && Y.borderStyle.width > 0) {
                F.style.borderWidth = `${Y.borderStyle.width}px`;
                const Vl = Y.borderStyle.horizontalCornerRadius, Dl = Y.borderStyle.verticalCornerRadius;
                if (Vl > 0 || Dl > 0) {
                  const Hl = `calc(${Vl}px * var(--scale-factor)) / calc(${Dl}px * var(--scale-factor))`;
                  F.style.borderRadius = Hl;
                } else if (this instanceof d) {
                  const Hl = `calc(${v}px * var(--scale-factor)) / calc(${$}px * var(--scale-factor))`;
                  F.style.borderRadius = Hl;
                }
                switch (Y.borderStyle.style) {
                  case t.AnnotationBorderStyleType.SOLID:
                    F.style.borderStyle = "solid";
                    break;
                  case t.AnnotationBorderStyleType.DASHED:
                    F.style.borderStyle = "dashed";
                    break;
                  case t.AnnotationBorderStyleType.BEVELED:
                    (0, t.warn)("Unimplemented border style: beveled");
                    break;
                  case t.AnnotationBorderStyleType.INSET:
                    (0, t.warn)("Unimplemented border style: inset");
                    break;
                  case t.AnnotationBorderStyleType.UNDERLINE:
                    F.style.borderBottomStyle = "solid";
                    break;
                }
                const Xl = Y.borderColor || null;
                Xl ? F.style.borderColor = t.Util.makeHexColor(Xl[0] | 0, Xl[1] | 0, Xl[2] | 0) : F.style.borderWidth = 0;
              }
              F.style.left = `${100 * (Yl[0] - il) / ml}%`, F.style.top = `${100 * (Yl[1] - dl) / Gl}%`;
              const {
                rotation: yl
              } = Y;
              return Y.hasOwnCanvas || yl === 0 ? (F.style.width = `${100 * v / ml}%`, F.style.height = `${100 * $ / Gl}%`) : this.setRotation(yl, F), F;
            }
            setRotation(a) {
              let Y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.container;
              const [z, C, F, v] = this.viewport.viewBox, $ = F - z, il = v - C, {
                width: dl,
                height: el
              } = V(this.data.rect);
              let bl, ml;
              a % 180 === 0 ? (bl = 100 * dl / $, ml = 100 * el / il) : (bl = 100 * el / $, ml = 100 * dl / il), Y.style.width = `${bl}%`, Y.style.height = `${ml}%`, Y.setAttribute("data-main-rotation", (360 - a) % 360);
            }
            get _commonActions() {
              const a = (Y, z, C) => {
                const F = C.detail[Y];
                C.target.style[z] = y.ColorConverters[`${F[0]}_HTML`](F.slice(1));
              };
              return (0, t.shadow)(this, "_commonActions", {
                display: (Y) => {
                  const z = Y.detail.display % 2 === 1;
                  this.container.style.visibility = z ? "hidden" : "visible", this.annotationStorage.setValue(this.data.id, {
                    hidden: z,
                    print: Y.detail.display === 0 || Y.detail.display === 3
                  });
                },
                print: (Y) => {
                  this.annotationStorage.setValue(this.data.id, {
                    print: Y.detail.print
                  });
                },
                hidden: (Y) => {
                  this.container.style.visibility = Y.detail.hidden ? "hidden" : "visible", this.annotationStorage.setValue(this.data.id, {
                    hidden: Y.detail.hidden
                  });
                },
                focus: (Y) => {
                  setTimeout(() => Y.target.focus({
                    preventScroll: !1
                  }), 0);
                },
                userName: (Y) => {
                  Y.target.title = Y.detail.userName;
                },
                readonly: (Y) => {
                  Y.detail.readonly ? Y.target.setAttribute("readonly", "") : Y.target.removeAttribute("readonly");
                },
                required: (Y) => {
                  this._setRequired(Y.target, Y.detail.required);
                },
                bgColor: (Y) => {
                  a("bgColor", "backgroundColor", Y);
                },
                fillColor: (Y) => {
                  a("fillColor", "backgroundColor", Y);
                },
                fgColor: (Y) => {
                  a("fgColor", "color", Y);
                },
                textColor: (Y) => {
                  a("textColor", "color", Y);
                },
                borderColor: (Y) => {
                  a("borderColor", "borderColor", Y);
                },
                strokeColor: (Y) => {
                  a("strokeColor", "borderColor", Y);
                },
                rotation: (Y) => {
                  const z = Y.detail.rotation;
                  this.setRotation(z), this.annotationStorage.setValue(this.data.id, {
                    rotation: z
                  });
                }
              });
            }
            _dispatchEventFromSandbox(a, Y) {
              const z = this._commonActions;
              for (const C of Object.keys(Y.detail)) {
                const F = a[C] || z[C];
                F && F(Y);
              }
            }
            _setDefaultPropertiesFromJS(a) {
              if (!this.enableScripting)
                return;
              const Y = this.annotationStorage.getRawValue(this.data.id);
              if (!Y)
                return;
              const z = this._commonActions;
              for (const [C, F] of Object.entries(Y)) {
                const v = z[C];
                if (v) {
                  const $ = {
                    detail: {
                      [C]: F
                    },
                    target: a
                  };
                  v($), delete Y[C];
                }
              }
            }
            _createQuadrilaterals() {
              let a = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
              if (!this.data.quadPoints)
                return null;
              const Y = [], z = this.data.rect;
              for (const C of this.data.quadPoints)
                this.data.rect = [C[2].x, C[2].y, C[1].x, C[1].y], Y.push(this._createContainer(a));
              return this.data.rect = z, Y;
            }
            _createPopup(a, Y) {
              let z = this.container;
              this.quadrilaterals && (a = a || this.quadrilaterals, z = this.quadrilaterals[0]), a || (a = document.createElement("div"), a.className = "popupTriggerArea", z.append(a));
              const F = new r({
                container: z,
                trigger: a,
                color: Y.color,
                titleObj: Y.titleObj,
                modificationDate: Y.modificationDate,
                contentsObj: Y.contentsObj,
                richText: Y.richText,
                hideWrapper: !0
              }).render();
              F.style.left = "100%", z.append(F);
            }
            _renderQuadrilaterals(a) {
              for (const Y of this.quadrilaterals)
                Y.className = a;
              return this.quadrilaterals;
            }
            render() {
              (0, t.unreachable)("Abstract method `AnnotationElement.render` called");
            }
            _getElementsByName(a) {
              let Y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              const z = [];
              if (this._fieldObjects) {
                const C = this._fieldObjects[a];
                if (C)
                  for (const {
                    page: F,
                    id: v,
                    exportValues: $
                  } of C) {
                    if (F === -1 || v === Y)
                      continue;
                    const il = typeof $ == "string" ? $ : null, dl = document.querySelector(`[data-element-id="${v}"]`);
                    if (dl && !n.has(dl)) {
                      (0, t.warn)(`_getElementsByName - element not allowed: ${v}`);
                      continue;
                    }
                    z.push({
                      id: v,
                      exportValue: il,
                      domElement: dl
                    });
                  }
                return z;
              }
              for (const C of document.getElementsByName(a)) {
                const {
                  id: F,
                  exportValue: v
                } = C;
                F !== Y && n.has(C) && z.push({
                  id: F,
                  exportValue: v,
                  domElement: C
                });
              }
              return z;
            }
            static get platform() {
              const a = typeof navigator < "u" ? navigator.platform : "";
              return (0, t.shadow)(this, "platform", {
                isWin: a.includes("Win"),
                isMac: a.includes("Mac")
              });
            }
          }
          class R extends o {
            constructor(a) {
              let Y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              super(a, {
                isRenderable: !0,
                ignoreBorder: !!(Y != null && Y.ignoreBorder),
                createQuadrilaterals: !0
              }), this.isTooltipOnly = a.data.isTooltipOnly;
            }
            render() {
              const {
                data: a,
                linkService: Y
              } = this, z = document.createElement("a");
              z.setAttribute("data-element-id", a.id);
              let C = !1;
              return a.url ? (Y.addLinkAttributes(z, a.url, a.newWindow), C = !0) : a.action ? (this._bindNamedAction(z, a.action), C = !0) : a.dest ? (this._bindLink(z, a.dest), C = !0) : (a.actions && (a.actions.Action || a.actions["Mouse Up"] || a.actions["Mouse Down"]) && this.enableScripting && this.hasJSActions && (this._bindJSAction(z, a), C = !0), a.resetForm ? (this._bindResetFormAction(z, a.resetForm), C = !0) : this.isTooltipOnly && !C && (this._bindLink(z, ""), C = !0)), this.quadrilaterals ? this._renderQuadrilaterals("linkAnnotation").map((F, v) => {
                const $ = v === 0 ? z : z.cloneNode();
                return F.append($), F;
              }) : (this.container.className = "linkAnnotation", C && this.container.append(z), this.container);
            }
            _bindLink(a, Y) {
              a.href = this.linkService.getDestinationHash(Y), a.onclick = () => (Y && this.linkService.goToDestination(Y), !1), (Y || Y === "") && (a.className = "internalLink");
            }
            _bindNamedAction(a, Y) {
              a.href = this.linkService.getAnchorUrl(""), a.onclick = () => (this.linkService.executeNamedAction(Y), !1), a.className = "internalLink";
            }
            _bindJSAction(a, Y) {
              a.href = this.linkService.getAnchorUrl("");
              const z = /* @__PURE__ */ new Map([["Action", "onclick"], ["Mouse Up", "onmouseup"], ["Mouse Down", "onmousedown"]]);
              for (const C of Object.keys(Y.actions)) {
                const F = z.get(C);
                F && (a[F] = () => {
                  var v;
                  return (v = this.linkService.eventBus) === null || v === void 0 || v.dispatch("dispatcheventinsandbox", {
                    source: this,
                    detail: {
                      id: Y.id,
                      name: C
                    }
                  }), !1;
                });
              }
              a.onclick || (a.onclick = () => !1), a.className = "internalLink";
            }
            _bindResetFormAction(a, Y) {
              const z = a.onclick;
              if (z || (a.href = this.linkService.getAnchorUrl("")), a.className = "internalLink", !this._fieldObjects) {
                (0, t.warn)('_bindResetFormAction - "resetForm" action not supported, ensure that the `fieldObjects` parameter is provided.'), z || (a.onclick = () => !1);
                return;
              }
              a.onclick = () => {
                z && z();
                const {
                  fields: C,
                  refs: F,
                  include: v
                } = Y, $ = [];
                if (C.length !== 0 || F.length !== 0) {
                  const bl = new Set(F);
                  for (const ml of C) {
                    const Gl = this._fieldObjects[ml] || [];
                    for (const {
                      id: Yl
                    } of Gl)
                      bl.add(Yl);
                  }
                  for (const ml of Object.values(this._fieldObjects))
                    for (const Gl of ml)
                      bl.has(Gl.id) === v && $.push(Gl);
                } else
                  for (const bl of Object.values(this._fieldObjects))
                    $.push(...bl);
                const il = this.annotationStorage, dl = [];
                for (const bl of $) {
                  const {
                    id: ml
                  } = bl;
                  switch (dl.push(ml), bl.type) {
                    case "text": {
                      const Yl = bl.defaultValue || "";
                      il.setValue(ml, {
                        value: Yl
                      });
                      break;
                    }
                    case "checkbox":
                    case "radiobutton": {
                      const Yl = bl.defaultValue === bl.exportValues;
                      il.setValue(ml, {
                        value: Yl
                      });
                      break;
                    }
                    case "combobox":
                    case "listbox": {
                      const Yl = bl.defaultValue || "";
                      il.setValue(ml, {
                        value: Yl
                      });
                      break;
                    }
                    default:
                      continue;
                  }
                  const Gl = document.querySelector(`[data-element-id="${ml}"]`);
                  if (Gl) {
                    if (!n.has(Gl)) {
                      (0, t.warn)(`_bindResetFormAction - element not allowed: ${ml}`);
                      continue;
                    }
                  } else continue;
                  Gl.dispatchEvent(new Event("resetform"));
                }
                if (this.enableScripting) {
                  var el;
                  (el = this.linkService.eventBus) === null || el === void 0 || el.dispatch("dispatcheventinsandbox", {
                    source: this,
                    detail: {
                      id: "app",
                      ids: dl,
                      name: "ResetForm"
                    }
                  });
                }
                return !1;
              };
            }
          }
          class J extends o {
            constructor(a) {
              var Y, z, C;
              const F = !!(a.data.hasPopup || (Y = a.data.titleObj) !== null && Y !== void 0 && Y.str || (z = a.data.contentsObj) !== null && z !== void 0 && z.str || (C = a.data.richText) !== null && C !== void 0 && C.str);
              super(a, {
                isRenderable: F
              });
            }
            render() {
              this.container.className = "textAnnotation";
              const a = document.createElement("img");
              return a.src = this.imageResourcesPath + "annotation-" + this.data.name.toLowerCase() + ".svg", a.alt = "[{{type}} Annotation]", a.dataset.l10nId = "text_annotation_type", a.dataset.l10nArgs = JSON.stringify({
                type: this.data.name
              }), this.data.hasPopup || this._createPopup(a, this.data), this.container.append(a), this.container;
            }
          }
          class u extends o {
            render() {
              return this.data.alternativeText && (this.container.title = this.data.alternativeText), this.container;
            }
            _getKeyModifier(a) {
              const {
                isWin: Y,
                isMac: z
              } = o.platform;
              return Y && a.ctrlKey || z && a.metaKey;
            }
            _setEventListener(a, Y, z, C) {
              Y.includes("mouse") ? a.addEventListener(Y, (F) => {
                var v;
                (v = this.linkService.eventBus) === null || v === void 0 || v.dispatch("dispatcheventinsandbox", {
                  source: this,
                  detail: {
                    id: this.data.id,
                    name: z,
                    value: C(F),
                    shift: F.shiftKey,
                    modifier: this._getKeyModifier(F)
                  }
                });
              }) : a.addEventListener(Y, (F) => {
                var v;
                (v = this.linkService.eventBus) === null || v === void 0 || v.dispatch("dispatcheventinsandbox", {
                  source: this,
                  detail: {
                    id: this.data.id,
                    name: z,
                    value: C(F)
                  }
                });
              });
            }
            _setEventListeners(a, Y, z) {
              for (const [F, v] of Y) {
                var C;
                (v === "Action" || (C = this.data.actions) !== null && C !== void 0 && C[v]) && this._setEventListener(a, F, v, z);
              }
            }
            _setBackgroundColor(a) {
              const Y = this.data.backgroundColor || null;
              a.style.backgroundColor = Y === null ? "transparent" : t.Util.makeHexColor(Y[0], Y[1], Y[2]);
            }
            _setTextStyle(a) {
              const Y = ["left", "center", "right"], {
                fontColor: z
              } = this.data.defaultAppearanceData, C = this.data.defaultAppearanceData.fontSize || x, F = a.style;
              let v;
              if (this.data.multiLine) {
                const $ = Math.abs(this.data.rect[3] - this.data.rect[1]), il = Math.round($ / (t.LINE_FACTOR * C)) || 1, dl = $ / il;
                v = Math.min(C, Math.round(dl / t.LINE_FACTOR));
              } else {
                const $ = Math.abs(this.data.rect[3] - this.data.rect[1]);
                v = Math.min(C, Math.round($ / t.LINE_FACTOR));
              }
              F.fontSize = `calc(${v}px * var(--scale-factor))`, F.color = t.Util.makeHexColor(z[0], z[1], z[2]), this.data.textAlignment !== null && (F.textAlign = Y[this.data.textAlignment]);
            }
            _setRequired(a, Y) {
              Y ? a.setAttribute("required", !0) : a.removeAttribute("required"), a.setAttribute("aria-required", Y);
            }
          }
          class e extends u {
            constructor(a) {
              const Y = a.renderForms || !a.data.hasAppearance && !!a.data.fieldValue;
              super(a, {
                isRenderable: Y
              });
            }
            setPropertyOnSiblings(a, Y, z, C) {
              const F = this.annotationStorage;
              for (const v of this._getElementsByName(a.name, a.id))
                v.domElement && (v.domElement[Y] = z), F.setValue(v.id, {
                  [C]: z
                });
            }
            render() {
              const a = this.annotationStorage, Y = this.data.id;
              this.container.className = "textWidgetAnnotation";
              let z = null;
              if (this.renderForms) {
                const F = a.getValue(Y, {
                  value: this.data.fieldValue
                });
                let v = F.formattedValue || F.value || "";
                const $ = a.getValue(Y, {
                  charLimit: this.data.maxLen
                }).charLimit;
                $ && v.length > $ && (v = v.slice(0, $));
                const il = {
                  userValue: v,
                  formattedValue: null,
                  valueOnFocus: ""
                };
                this.data.multiLine ? (z = document.createElement("textarea"), z.textContent = v, this.data.doNotScroll && (z.style.overflowY = "hidden")) : (z = document.createElement("input"), z.type = "text", z.setAttribute("value", v), this.data.doNotScroll && (z.style.overflowX = "hidden")), n.add(z), z.setAttribute("data-element-id", Y), z.disabled = this.data.readOnly, z.name = this.data.fieldName, z.tabIndex = M, this._setRequired(z, this.data.required), $ && (z.maxLength = $), z.addEventListener("input", (el) => {
                  a.setValue(Y, {
                    value: el.target.value
                  }), this.setPropertyOnSiblings(z, "value", el.target.value, "value");
                }), z.addEventListener("resetform", (el) => {
                  var bl;
                  const ml = (bl = this.data.defaultFieldValue) !== null && bl !== void 0 ? bl : "";
                  z.value = il.userValue = ml, il.formattedValue = null;
                });
                let dl = (el) => {
                  const {
                    formattedValue: bl
                  } = il;
                  bl != null && (el.target.value = bl), el.target.scrollLeft = 0;
                };
                if (this.enableScripting && this.hasJSActions) {
                  var C;
                  z.addEventListener("focus", (bl) => {
                    il.userValue && (bl.target.value = il.userValue), il.valueOnFocus = bl.target.value;
                  }), z.addEventListener("updatefromsandbox", (bl) => {
                    const ml = {
                      value(Gl) {
                        var Yl;
                        il.userValue = (Yl = Gl.detail.value) !== null && Yl !== void 0 ? Yl : "", a.setValue(Y, {
                          value: il.userValue.toString()
                        }), Gl.target.value = il.userValue;
                      },
                      formattedValue(Gl) {
                        const {
                          formattedValue: Yl
                        } = Gl.detail;
                        il.formattedValue = Yl, Yl != null && Gl.target !== document.activeElement && (Gl.target.value = Yl), a.setValue(Y, {
                          formattedValue: Yl
                        });
                      },
                      selRange(Gl) {
                        Gl.target.setSelectionRange(...Gl.detail.selRange);
                      },
                      charLimit: (Gl) => {
                        var Yl;
                        const {
                          charLimit: yl
                        } = Gl.detail, {
                          target: Vl
                        } = Gl;
                        if (yl === 0) {
                          Vl.removeAttribute("maxLength");
                          return;
                        }
                        Vl.setAttribute("maxLength", yl);
                        let Dl = il.userValue;
                        !Dl || Dl.length <= yl || (Dl = Dl.slice(0, yl), Vl.value = il.userValue = Dl, a.setValue(Y, {
                          value: Dl
                        }), (Yl = this.linkService.eventBus) === null || Yl === void 0 || Yl.dispatch("dispatcheventinsandbox", {
                          source: this,
                          detail: {
                            id: Y,
                            name: "Keystroke",
                            value: Dl,
                            willCommit: !0,
                            commitKey: 1,
                            selStart: Vl.selectionStart,
                            selEnd: Vl.selectionEnd
                          }
                        }));
                      }
                    };
                    this._dispatchEventFromSandbox(ml, bl);
                  }), z.addEventListener("keydown", (bl) => {
                    var ml;
                    let Gl = -1;
                    if (bl.key === "Escape" ? Gl = 0 : bl.key === "Enter" ? Gl = 2 : bl.key === "Tab" && (Gl = 3), Gl === -1)
                      return;
                    const {
                      value: Yl
                    } = bl.target;
                    il.valueOnFocus !== Yl && (il.userValue = Yl, (ml = this.linkService.eventBus) === null || ml === void 0 || ml.dispatch("dispatcheventinsandbox", {
                      source: this,
                      detail: {
                        id: Y,
                        name: "Keystroke",
                        value: Yl,
                        willCommit: !0,
                        commitKey: Gl,
                        selStart: bl.target.selectionStart,
                        selEnd: bl.target.selectionEnd
                      }
                    }));
                  });
                  const el = dl;
                  dl = null, z.addEventListener("blur", (bl) => {
                    const {
                      value: ml
                    } = bl.target;
                    if (il.userValue = ml, this._mouseState.isDown && il.valueOnFocus !== ml) {
                      var Gl;
                      (Gl = this.linkService.eventBus) === null || Gl === void 0 || Gl.dispatch("dispatcheventinsandbox", {
                        source: this,
                        detail: {
                          id: Y,
                          name: "Keystroke",
                          value: ml,
                          willCommit: !0,
                          commitKey: 1,
                          selStart: bl.target.selectionStart,
                          selEnd: bl.target.selectionEnd
                        }
                      });
                    }
                    el(bl);
                  }), (C = this.data.actions) !== null && C !== void 0 && C.Keystroke && z.addEventListener("beforeinput", (bl) => {
                    var ml;
                    const {
                      data: Gl,
                      target: Yl
                    } = bl, {
                      value: yl,
                      selectionStart: Vl,
                      selectionEnd: Dl
                    } = Yl;
                    let Xl = Vl, Hl = Dl;
                    switch (bl.inputType) {
                      case "deleteWordBackward": {
                        const Al = yl.substring(0, Vl).match(/\w*[^\w]*$/);
                        Al && (Xl -= Al[0].length);
                        break;
                      }
                      case "deleteWordForward": {
                        const Al = yl.substring(Vl).match(/^[^\w]*\w*/);
                        Al && (Hl += Al[0].length);
                        break;
                      }
                      case "deleteContentBackward":
                        Vl === Dl && (Xl -= 1);
                        break;
                      case "deleteContentForward":
                        Vl === Dl && (Hl += 1);
                        break;
                    }
                    bl.preventDefault(), (ml = this.linkService.eventBus) === null || ml === void 0 || ml.dispatch("dispatcheventinsandbox", {
                      source: this,
                      detail: {
                        id: Y,
                        name: "Keystroke",
                        value: yl,
                        change: Gl || "",
                        willCommit: !1,
                        selStart: Xl,
                        selEnd: Hl
                      }
                    });
                  }), this._setEventListeners(z, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], (bl) => bl.target.value);
                }
                if (dl && z.addEventListener("blur", dl), this.data.comb) {
                  const bl = (this.data.rect[2] - this.data.rect[0]) / $;
                  z.classList.add("comb"), z.style.letterSpacing = `calc(${bl}px * var(--scale-factor) - 1ch)`;
                }
              } else
                z = document.createElement("div"), z.textContent = this.data.fieldValue, z.style.verticalAlign = "middle", z.style.display = "table-cell";
              return this._setTextStyle(z), this._setBackgroundColor(z), this._setDefaultPropertiesFromJS(z), this.container.append(z), this.container;
            }
          }
          class m extends u {
            constructor(a) {
              super(a, {
                isRenderable: a.renderForms
              });
            }
            render() {
              const a = this.annotationStorage, Y = this.data, z = Y.id;
              let C = a.getValue(z, {
                value: Y.exportValue === Y.fieldValue
              }).value;
              typeof C == "string" && (C = C !== "Off", a.setValue(z, {
                value: C
              })), this.container.className = "buttonWidgetAnnotation checkBox";
              const F = document.createElement("input");
              return n.add(F), F.setAttribute("data-element-id", z), F.disabled = Y.readOnly, this._setRequired(F, this.data.required), F.type = "checkbox", F.name = Y.fieldName, C && F.setAttribute("checked", !0), F.setAttribute("exportValue", Y.exportValue), F.tabIndex = M, F.addEventListener("change", (v) => {
                const {
                  name: $,
                  checked: il
                } = v.target;
                for (const dl of this._getElementsByName($, z)) {
                  const el = il && dl.exportValue === Y.exportValue;
                  dl.domElement && (dl.domElement.checked = el), a.setValue(dl.id, {
                    value: el
                  });
                }
                a.setValue(z, {
                  value: il
                });
              }), F.addEventListener("resetform", (v) => {
                const $ = Y.defaultFieldValue || "Off";
                v.target.checked = $ === Y.exportValue;
              }), this.enableScripting && this.hasJSActions && (F.addEventListener("updatefromsandbox", (v) => {
                const $ = {
                  value(il) {
                    il.target.checked = il.detail.value !== "Off", a.setValue(z, {
                      value: il.target.checked
                    });
                  }
                };
                this._dispatchEventFromSandbox($, v);
              }), this._setEventListeners(F, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], (v) => v.target.checked)), this._setBackgroundColor(F), this._setDefaultPropertiesFromJS(F), this.container.append(F), this.container;
            }
          }
          class d extends u {
            constructor(a) {
              super(a, {
                isRenderable: a.renderForms
              });
            }
            render() {
              this.container.className = "buttonWidgetAnnotation radioButton";
              const a = this.annotationStorage, Y = this.data, z = Y.id;
              let C = a.getValue(z, {
                value: Y.fieldValue === Y.buttonValue
              }).value;
              typeof C == "string" && (C = C !== Y.buttonValue, a.setValue(z, {
                value: C
              }));
              const F = document.createElement("input");
              if (n.add(F), F.setAttribute("data-element-id", z), F.disabled = Y.readOnly, this._setRequired(F, this.data.required), F.type = "radio", F.name = Y.fieldName, C && F.setAttribute("checked", !0), F.tabIndex = M, F.addEventListener("change", (v) => {
                const {
                  name: $,
                  checked: il
                } = v.target;
                for (const dl of this._getElementsByName($, z))
                  a.setValue(dl.id, {
                    value: !1
                  });
                a.setValue(z, {
                  value: il
                });
              }), F.addEventListener("resetform", (v) => {
                const $ = Y.defaultFieldValue;
                v.target.checked = $ != null && $ === Y.buttonValue;
              }), this.enableScripting && this.hasJSActions) {
                const v = Y.buttonValue;
                F.addEventListener("updatefromsandbox", ($) => {
                  const il = {
                    value: (dl) => {
                      const el = v === dl.detail.value;
                      for (const bl of this._getElementsByName(dl.target.name)) {
                        const ml = el && bl.id === z;
                        bl.domElement && (bl.domElement.checked = ml), a.setValue(bl.id, {
                          value: ml
                        });
                      }
                    }
                  };
                  this._dispatchEventFromSandbox(il, $);
                }), this._setEventListeners(F, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], ($) => $.target.checked);
              }
              return this._setBackgroundColor(F), this._setDefaultPropertiesFromJS(F), this.container.append(F), this.container;
            }
          }
          class b extends R {
            constructor(a) {
              super(a, {
                ignoreBorder: a.data.hasAppearance
              });
            }
            render() {
              const a = super.render();
              a.className = "buttonWidgetAnnotation pushButton", this.data.alternativeText && (a.title = this.data.alternativeText);
              const Y = a.lastChild;
              return this.enableScripting && this.hasJSActions && Y && (this._setDefaultPropertiesFromJS(Y), Y.addEventListener("updatefromsandbox", (z) => {
                this._dispatchEventFromSandbox({}, z);
              })), a;
            }
          }
          class N extends u {
            constructor(a) {
              super(a, {
                isRenderable: a.renderForms
              });
            }
            render() {
              this.container.className = "choiceWidgetAnnotation";
              const a = this.annotationStorage, Y = this.data.id, z = a.getValue(Y, {
                value: this.data.fieldValue
              }), C = document.createElement("select");
              n.add(C), C.setAttribute("data-element-id", Y), C.disabled = this.data.readOnly, this._setRequired(C, this.data.required), C.name = this.data.fieldName, C.tabIndex = M;
              let F = this.data.combo && this.data.options.length > 0;
              this.data.combo || (C.size = this.data.options.length, this.data.multiSelect && (C.multiple = !0)), C.addEventListener("resetform", (dl) => {
                const el = this.data.defaultFieldValue;
                for (const bl of C.options)
                  bl.selected = bl.value === el;
              });
              for (const dl of this.data.options) {
                const el = document.createElement("option");
                el.textContent = dl.displayValue, el.value = dl.exportValue, z.value.includes(dl.exportValue) && (el.setAttribute("selected", !0), F = !1), C.append(el);
              }
              let v = null;
              if (F) {
                const dl = document.createElement("option");
                dl.value = " ", dl.setAttribute("hidden", !0), dl.setAttribute("selected", !0), C.prepend(dl), v = () => {
                  dl.remove(), C.removeEventListener("input", v), v = null;
                }, C.addEventListener("input", v);
              }
              const $ = (dl, el) => {
                const bl = el ? "value" : "textContent", ml = dl.target.options;
                return dl.target.multiple ? Array.prototype.filter.call(ml, (Gl) => Gl.selected).map((Gl) => Gl[bl]) : ml.selectedIndex === -1 ? null : ml[ml.selectedIndex][bl];
              }, il = (dl) => {
                const el = dl.target.options;
                return Array.prototype.map.call(el, (bl) => ({
                  displayValue: bl.textContent,
                  exportValue: bl.value
                }));
              };
              return this.enableScripting && this.hasJSActions ? (C.addEventListener("updatefromsandbox", (dl) => {
                const el = {
                  value(bl) {
                    var ml;
                    (ml = v) === null || ml === void 0 || ml();
                    const Gl = bl.detail.value, Yl = new Set(Array.isArray(Gl) ? Gl : [Gl]);
                    for (const yl of C.options)
                      yl.selected = Yl.has(yl.value);
                    a.setValue(Y, {
                      value: $(bl, !0)
                    });
                  },
                  multipleSelection(bl) {
                    C.multiple = !0;
                  },
                  remove(bl) {
                    const ml = C.options, Gl = bl.detail.remove;
                    ml[Gl].selected = !1, C.remove(Gl), ml.length > 0 && Array.prototype.findIndex.call(ml, (yl) => yl.selected) === -1 && (ml[0].selected = !0), a.setValue(Y, {
                      value: $(bl, !0),
                      items: il(bl)
                    });
                  },
                  clear(bl) {
                    for (; C.length !== 0; )
                      C.remove(0);
                    a.setValue(Y, {
                      value: null,
                      items: []
                    });
                  },
                  insert(bl) {
                    const {
                      index: ml,
                      displayValue: Gl,
                      exportValue: Yl
                    } = bl.detail.insert, yl = C.children[ml], Vl = document.createElement("option");
                    Vl.textContent = Gl, Vl.value = Yl, yl ? yl.before(Vl) : C.append(Vl), a.setValue(Y, {
                      value: $(bl, !0),
                      items: il(bl)
                    });
                  },
                  items(bl) {
                    const {
                      items: ml
                    } = bl.detail;
                    for (; C.length !== 0; )
                      C.remove(0);
                    for (const Gl of ml) {
                      const {
                        displayValue: Yl,
                        exportValue: yl
                      } = Gl, Vl = document.createElement("option");
                      Vl.textContent = Yl, Vl.value = yl, C.append(Vl);
                    }
                    C.options.length > 0 && (C.options[0].selected = !0), a.setValue(Y, {
                      value: $(bl, !0),
                      items: il(bl)
                    });
                  },
                  indices(bl) {
                    const ml = new Set(bl.detail.indices);
                    for (const Gl of bl.target.options)
                      Gl.selected = ml.has(Gl.index);
                    a.setValue(Y, {
                      value: $(bl, !0)
                    });
                  },
                  editable(bl) {
                    bl.target.disabled = !bl.detail.editable;
                  }
                };
                this._dispatchEventFromSandbox(el, dl);
              }), C.addEventListener("input", (dl) => {
                var el;
                const bl = $(dl, !0), ml = $(dl, !1);
                a.setValue(Y, {
                  value: bl
                }), (el = this.linkService.eventBus) === null || el === void 0 || el.dispatch("dispatcheventinsandbox", {
                  source: this,
                  detail: {
                    id: Y,
                    name: "Keystroke",
                    value: ml,
                    changeEx: bl,
                    willCommit: !0,
                    commitKey: 1,
                    keyDown: !1
                  }
                });
              }), this._setEventListeners(C, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"], ["input", "Action"]], (dl) => dl.target.checked)) : C.addEventListener("input", function(dl) {
                a.setValue(Y, {
                  value: $(dl, !0)
                });
              }), this.data.combo && this._setTextStyle(C), this._setBackgroundColor(C), this._setDefaultPropertiesFromJS(C), this.container.append(C), this.container;
            }
          }
          class G extends o {
            constructor(a) {
              var Y, z, C;
              const F = !!((Y = a.data.titleObj) !== null && Y !== void 0 && Y.str || (z = a.data.contentsObj) !== null && z !== void 0 && z.str || (C = a.data.richText) !== null && C !== void 0 && C.str);
              super(a, {
                isRenderable: F
              });
            }
            render() {
              const a = ["Line", "Square", "Circle", "PolyLine", "Polygon", "Ink"];
              if (this.container.className = "popupAnnotation", a.includes(this.data.parentType))
                return this.container;
              const Y = `[data-annotation-id="${this.data.parentId}"]`, z = this.layer.querySelectorAll(Y);
              if (z.length === 0)
                return this.container;
              const C = new r({
                container: this.container,
                trigger: Array.from(z),
                color: this.data.color,
                titleObj: this.data.titleObj,
                modificationDate: this.data.modificationDate,
                contentsObj: this.data.contentsObj,
                richText: this.data.richText
              }), F = this.page, v = t.Util.normalizeRect([this.data.parentRect[0], F.view[3] - this.data.parentRect[1] + F.view[1], this.data.parentRect[2], F.view[3] - this.data.parentRect[3] + F.view[1]]), $ = v[0] + this.data.parentRect[2] - this.data.parentRect[0], il = v[1], [dl, el, bl, ml] = this.viewport.viewBox, Gl = bl - dl, Yl = ml - el;
              return this.container.style.left = `${100 * ($ - dl) / Gl}%`, this.container.style.top = `${100 * (il - el) / Yl}%`, this.container.append(C.render()), this.container;
            }
          }
          class r {
            constructor(a) {
              this.container = a.container, this.trigger = a.trigger, this.color = a.color, this.titleObj = a.titleObj, this.modificationDate = a.modificationDate, this.contentsObj = a.contentsObj, this.richText = a.richText, this.hideWrapper = a.hideWrapper || !1, this.pinned = !1;
            }
            render() {
              var a, Y;
              const C = document.createElement("div");
              C.className = "popupWrapper", this.hideElement = this.hideWrapper ? C : this.container, this.hideElement.hidden = !0;
              const F = document.createElement("div");
              F.className = "popup";
              const v = this.color;
              if (v) {
                const dl = 0.7 * (255 - v[0]) + v[0], el = 0.7 * (255 - v[1]) + v[1], bl = 0.7 * (255 - v[2]) + v[2];
                F.style.backgroundColor = t.Util.makeHexColor(dl | 0, el | 0, bl | 0);
              }
              const $ = document.createElement("h1");
              $.dir = this.titleObj.dir, $.textContent = this.titleObj.str, F.append($);
              const il = Z.PDFDateString.toDateObject(this.modificationDate);
              if (il) {
                const dl = document.createElement("span");
                dl.className = "popupDate", dl.textContent = "{{date}}, {{time}}", dl.dataset.l10nId = "annotation_date_string", dl.dataset.l10nArgs = JSON.stringify({
                  date: il.toLocaleDateString(),
                  time: il.toLocaleTimeString()
                }), F.append(dl);
              }
              if ((a = this.richText) !== null && a !== void 0 && a.str && (!((Y = this.contentsObj) !== null && Y !== void 0 && Y.str) || this.contentsObj.str === this.richText.str))
                h.XfaLayer.render({
                  xfaHtml: this.richText.html,
                  intent: "richText",
                  div: F
                }), F.lastChild.className = "richText popupContent";
              else {
                const dl = this._formatContents(this.contentsObj);
                F.append(dl);
              }
              Array.isArray(this.trigger) || (this.trigger = [this.trigger]);
              for (const dl of this.trigger)
                dl.addEventListener("click", this._toggle.bind(this)), dl.addEventListener("mouseover", this._show.bind(this, !1)), dl.addEventListener("mouseout", this._hide.bind(this, !1));
              return F.addEventListener("click", this._hide.bind(this, !0)), C.append(F), C;
            }
            _formatContents(a) {
              let {
                str: Y,
                dir: z
              } = a;
              const C = document.createElement("p");
              C.className = "popupContent", C.dir = z;
              const F = Y.split(/(?:\r\n?|\n)/);
              for (let v = 0, $ = F.length; v < $; ++v) {
                const il = F[v];
                C.append(document.createTextNode(il)), v < $ - 1 && C.append(document.createElement("br"));
              }
              return C;
            }
            _toggle() {
              this.pinned ? this._hide(!0) : this._show(!0);
            }
            _show() {
              (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1) && (this.pinned = !0), this.hideElement.hidden && (this.hideElement.hidden = !1, this.container.style.zIndex = parseInt(this.container.style.zIndex) + 1e3);
            }
            _hide() {
              (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0) && (this.pinned = !1), !this.hideElement.hidden && !this.pinned && (this.hideElement.hidden = !0, this.container.style.zIndex = parseInt(this.container.style.zIndex) - 1e3);
            }
          }
          class j extends o {
            constructor(a) {
              var Y, z, C;
              const F = !!(a.data.hasPopup || (Y = a.data.titleObj) !== null && Y !== void 0 && Y.str || (z = a.data.contentsObj) !== null && z !== void 0 && z.str || (C = a.data.richText) !== null && C !== void 0 && C.str);
              super(a, {
                isRenderable: F,
                ignoreBorder: !0
              }), this.textContent = a.data.textContent;
            }
            render() {
              if (this.container.className = "freeTextAnnotation", this.textContent) {
                const a = document.createElement("div");
                a.className = "annotationTextContent", a.setAttribute("role", "comment");
                for (const Y of this.textContent) {
                  const z = document.createElement("span");
                  z.textContent = Y, a.append(z);
                }
                this.container.append(a);
              }
              return this.data.hasPopup || this._createPopup(null, this.data), this.container;
            }
          }
          class D extends o {
            constructor(a) {
              var Y, z, C;
              const F = !!(a.data.hasPopup || (Y = a.data.titleObj) !== null && Y !== void 0 && Y.str || (z = a.data.contentsObj) !== null && z !== void 0 && z.str || (C = a.data.richText) !== null && C !== void 0 && C.str);
              super(a, {
                isRenderable: F,
                ignoreBorder: !0
              });
            }
            render() {
              this.container.className = "lineAnnotation";
              const a = this.data, {
                width: Y,
                height: z
              } = V(a.rect), C = this.svgFactory.create(Y, z, !0), F = this.svgFactory.createElement("svg:line");
              return F.setAttribute("x1", a.rect[2] - a.lineCoordinates[0]), F.setAttribute("y1", a.rect[3] - a.lineCoordinates[1]), F.setAttribute("x2", a.rect[2] - a.lineCoordinates[2]), F.setAttribute("y2", a.rect[3] - a.lineCoordinates[3]), F.setAttribute("stroke-width", a.borderStyle.width || 1), F.setAttribute("stroke", "transparent"), F.setAttribute("fill", "transparent"), C.append(F), this.container.append(C), this._createPopup(F, a), this.container;
            }
          }
          class f extends o {
            constructor(a) {
              var Y, z, C;
              const F = !!(a.data.hasPopup || (Y = a.data.titleObj) !== null && Y !== void 0 && Y.str || (z = a.data.contentsObj) !== null && z !== void 0 && z.str || (C = a.data.richText) !== null && C !== void 0 && C.str);
              super(a, {
                isRenderable: F,
                ignoreBorder: !0
              });
            }
            render() {
              this.container.className = "squareAnnotation";
              const a = this.data, {
                width: Y,
                height: z
              } = V(a.rect), C = this.svgFactory.create(Y, z, !0), F = a.borderStyle.width, v = this.svgFactory.createElement("svg:rect");
              return v.setAttribute("x", F / 2), v.setAttribute("y", F / 2), v.setAttribute("width", Y - F), v.setAttribute("height", z - F), v.setAttribute("stroke-width", F || 1), v.setAttribute("stroke", "transparent"), v.setAttribute("fill", "transparent"), C.append(v), this.container.append(C), this._createPopup(v, a), this.container;
            }
          }
          class P extends o {
            constructor(a) {
              var Y, z, C;
              const F = !!(a.data.hasPopup || (Y = a.data.titleObj) !== null && Y !== void 0 && Y.str || (z = a.data.contentsObj) !== null && z !== void 0 && z.str || (C = a.data.richText) !== null && C !== void 0 && C.str);
              super(a, {
                isRenderable: F,
                ignoreBorder: !0
              });
            }
            render() {
              this.container.className = "circleAnnotation";
              const a = this.data, {
                width: Y,
                height: z
              } = V(a.rect), C = this.svgFactory.create(Y, z, !0), F = a.borderStyle.width, v = this.svgFactory.createElement("svg:ellipse");
              return v.setAttribute("cx", Y / 2), v.setAttribute("cy", z / 2), v.setAttribute("rx", Y / 2 - F / 2), v.setAttribute("ry", z / 2 - F / 2), v.setAttribute("stroke-width", F || 1), v.setAttribute("stroke", "transparent"), v.setAttribute("fill", "transparent"), C.append(v), this.container.append(C), this._createPopup(v, a), this.container;
            }
          }
          class B extends o {
            constructor(a) {
              var Y, z, C;
              const F = !!(a.data.hasPopup || (Y = a.data.titleObj) !== null && Y !== void 0 && Y.str || (z = a.data.contentsObj) !== null && z !== void 0 && z.str || (C = a.data.richText) !== null && C !== void 0 && C.str);
              super(a, {
                isRenderable: F,
                ignoreBorder: !0
              }), this.containerClassName = "polylineAnnotation", this.svgElementName = "svg:polyline";
            }
            render() {
              this.container.className = this.containerClassName;
              const a = this.data, {
                width: Y,
                height: z
              } = V(a.rect), C = this.svgFactory.create(Y, z, !0);
              let F = [];
              for (const $ of a.vertices) {
                const il = $.x - a.rect[0], dl = a.rect[3] - $.y;
                F.push(il + "," + dl);
              }
              F = F.join(" ");
              const v = this.svgFactory.createElement(this.svgElementName);
              return v.setAttribute("points", F), v.setAttribute("stroke-width", a.borderStyle.width || 1), v.setAttribute("stroke", "transparent"), v.setAttribute("fill", "transparent"), C.append(v), this.container.append(C), this._createPopup(v, a), this.container;
            }
          }
          class A extends B {
            constructor(a) {
              super(a), this.containerClassName = "polygonAnnotation", this.svgElementName = "svg:polygon";
            }
          }
          class H extends o {
            constructor(a) {
              var Y, z, C;
              const F = !!(a.data.hasPopup || (Y = a.data.titleObj) !== null && Y !== void 0 && Y.str || (z = a.data.contentsObj) !== null && z !== void 0 && z.str || (C = a.data.richText) !== null && C !== void 0 && C.str);
              super(a, {
                isRenderable: F,
                ignoreBorder: !0
              });
            }
            render() {
              return this.container.className = "caretAnnotation", this.data.hasPopup || this._createPopup(null, this.data), this.container;
            }
          }
          class O extends o {
            constructor(a) {
              var Y, z, C;
              const F = !!(a.data.hasPopup || (Y = a.data.titleObj) !== null && Y !== void 0 && Y.str || (z = a.data.contentsObj) !== null && z !== void 0 && z.str || (C = a.data.richText) !== null && C !== void 0 && C.str);
              super(a, {
                isRenderable: F,
                ignoreBorder: !0
              }), this.containerClassName = "inkAnnotation", this.svgElementName = "svg:polyline";
            }
            render() {
              this.container.className = this.containerClassName;
              const a = this.data, {
                width: Y,
                height: z
              } = V(a.rect), C = this.svgFactory.create(Y, z, !0);
              for (const F of a.inkLists) {
                let v = [];
                for (const il of F) {
                  const dl = il.x - a.rect[0], el = a.rect[3] - il.y;
                  v.push(`${dl},${el}`);
                }
                v = v.join(" ");
                const $ = this.svgFactory.createElement(this.svgElementName);
                $.setAttribute("points", v), $.setAttribute("stroke-width", a.borderStyle.width || 1), $.setAttribute("stroke", "transparent"), $.setAttribute("fill", "transparent"), this._createPopup($, a), C.append($);
              }
              return this.container.append(C), this.container;
            }
          }
          class U extends o {
            constructor(a) {
              var Y, z, C;
              const F = !!(a.data.hasPopup || (Y = a.data.titleObj) !== null && Y !== void 0 && Y.str || (z = a.data.contentsObj) !== null && z !== void 0 && z.str || (C = a.data.richText) !== null && C !== void 0 && C.str);
              super(a, {
                isRenderable: F,
                ignoreBorder: !0,
                createQuadrilaterals: !0
              });
            }
            render() {
              return this.data.hasPopup || this._createPopup(null, this.data), this.quadrilaterals ? this._renderQuadrilaterals("highlightAnnotation") : (this.container.className = "highlightAnnotation", this.container);
            }
          }
          class k extends o {
            constructor(a) {
              var Y, z, C;
              const F = !!(a.data.hasPopup || (Y = a.data.titleObj) !== null && Y !== void 0 && Y.str || (z = a.data.contentsObj) !== null && z !== void 0 && z.str || (C = a.data.richText) !== null && C !== void 0 && C.str);
              super(a, {
                isRenderable: F,
                ignoreBorder: !0,
                createQuadrilaterals: !0
              });
            }
            render() {
              return this.data.hasPopup || this._createPopup(null, this.data), this.quadrilaterals ? this._renderQuadrilaterals("underlineAnnotation") : (this.container.className = "underlineAnnotation", this.container);
            }
          }
          class q extends o {
            constructor(a) {
              var Y, z, C;
              const F = !!(a.data.hasPopup || (Y = a.data.titleObj) !== null && Y !== void 0 && Y.str || (z = a.data.contentsObj) !== null && z !== void 0 && z.str || (C = a.data.richText) !== null && C !== void 0 && C.str);
              super(a, {
                isRenderable: F,
                ignoreBorder: !0,
                createQuadrilaterals: !0
              });
            }
            render() {
              return this.data.hasPopup || this._createPopup(null, this.data), this.quadrilaterals ? this._renderQuadrilaterals("squigglyAnnotation") : (this.container.className = "squigglyAnnotation", this.container);
            }
          }
          class al extends o {
            constructor(a) {
              var Y, z, C;
              const F = !!(a.data.hasPopup || (Y = a.data.titleObj) !== null && Y !== void 0 && Y.str || (z = a.data.contentsObj) !== null && z !== void 0 && z.str || (C = a.data.richText) !== null && C !== void 0 && C.str);
              super(a, {
                isRenderable: F,
                ignoreBorder: !0,
                createQuadrilaterals: !0
              });
            }
            render() {
              return this.data.hasPopup || this._createPopup(null, this.data), this.quadrilaterals ? this._renderQuadrilaterals("strikeoutAnnotation") : (this.container.className = "strikeoutAnnotation", this.container);
            }
          }
          class Ml extends o {
            constructor(a) {
              var Y, z, C;
              const F = !!(a.data.hasPopup || (Y = a.data.titleObj) !== null && Y !== void 0 && Y.str || (z = a.data.contentsObj) !== null && z !== void 0 && z.str || (C = a.data.richText) !== null && C !== void 0 && C.str);
              super(a, {
                isRenderable: F,
                ignoreBorder: !0
              });
            }
            render() {
              return this.container.className = "stampAnnotation", this.data.hasPopup || this._createPopup(null, this.data), this.container;
            }
          }
          class wl extends o {
            constructor(a) {
              var Y;
              super(a, {
                isRenderable: !0
              });
              const {
                filename: z,
                content: C
              } = this.data.file;
              this.filename = (0, Z.getFilenameFromUrl)(z), this.content = C, (Y = this.linkService.eventBus) === null || Y === void 0 || Y.dispatch("fileattachmentannotation", {
                source: this,
                filename: z,
                content: C
              });
            }
            render() {
              var a, Y;
              this.container.className = "fileAttachmentAnnotation";
              const z = document.createElement("div");
              return z.className = "popupTriggerArea", z.addEventListener("dblclick", this._download.bind(this)), !this.data.hasPopup && ((a = this.data.titleObj) !== null && a !== void 0 && a.str || (Y = this.data.contentsObj) !== null && Y !== void 0 && Y.str || this.data.richText) && this._createPopup(z, this.data), this.container.append(z), this.container;
            }
            _download() {
              var a;
              (a = this.downloadManager) === null || a === void 0 || a.openOrDownloadData(this.container, this.content, this.filename);
            }
          }
          class Q {
            static render(a) {
              const {
                annotations: Y,
                div: z,
                viewport: C,
                accessibilityManager: F
              } = a;
              p(this, Q, w).call(this, z, C);
              let v = 0;
              for (const $ of Y) {
                if ($.annotationType !== t.AnnotationType.POPUP) {
                  const {
                    width: dl,
                    height: el
                  } = V($.rect);
                  if (dl <= 0 || el <= 0)
                    continue;
                }
                const il = S.create({
                  data: $,
                  layer: z,
                  page: a.page,
                  viewport: C,
                  linkService: a.linkService,
                  downloadManager: a.downloadManager,
                  imageResourcesPath: a.imageResourcesPath || "",
                  renderForms: a.renderForms !== !1,
                  svgFactory: new Z.DOMSVGFactory(),
                  annotationStorage: a.annotationStorage || new W.AnnotationStorage(),
                  enableScripting: a.enableScripting,
                  hasJSActions: a.hasJSActions,
                  fieldObjects: a.fieldObjects,
                  mouseState: a.mouseState || {
                    isDown: !1
                  }
                });
                if (il.isRenderable) {
                  const dl = il.render();
                  if ($.hidden && (dl.style.visibility = "hidden"), Array.isArray(dl))
                    for (const el of dl)
                      el.style.zIndex = v++, p(Q, Q, T).call(Q, el, $.id, z, F);
                  else
                    dl.style.zIndex = v++, il instanceof G ? z.prepend(dl) : p(Q, Q, T).call(Q, dl, $.id, z, F);
                }
              }
              p(this, Q, g).call(this, z, a.annotationCanvasMap);
            }
            static update(a) {
              const {
                annotationCanvasMap: Y,
                div: z,
                viewport: C
              } = a;
              p(this, Q, w).call(this, z, C), p(this, Q, g).call(this, z, Y), z.hidden = !1;
            }
          }
          c.AnnotationLayer = Q;
          function T(K, a, Y, z) {
            const C = K.firstChild || K;
            C.id = `${Z.AnnotationPrefix}${a}`, Y.append(K), z == null || z.moveElementInDOM(Y, K, C, !1);
          }
          function w(K, a) {
            let {
              width: Y,
              height: z,
              rotation: C
            } = a;
            const {
              style: F
            } = K, v = C % 180 !== 0, $ = Math.floor(Y) + "px", il = Math.floor(z) + "px";
            F.width = v ? il : $, F.height = v ? $ : il, K.setAttribute("data-main-rotation", C);
          }
          function g(K, a) {
            if (a) {
              for (const [Y, z] of a) {
                const C = K.querySelector(`[data-annotation-id="${Y}"]`);
                if (!C)
                  continue;
                const {
                  firstChild: F
                } = C;
                F ? F.nodeName === "CANVAS" ? F.replaceWith(z) : F.before(z) : C.append(z);
              }
              a.clear();
            }
          }
        },
        /* 153 */
        /***/
        (L, c) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.ColorConverters = void 0;
          function i(Z) {
            return Math.floor(Math.max(0, Math.min(1, Z)) * 255).toString(16).padStart(2, "0");
          }
          class t {
            static CMYK_G(W) {
              let [y, h, p, X] = W;
              return ["G", 1 - Math.min(1, 0.3 * y + 0.59 * p + 0.11 * h + X)];
            }
            static G_CMYK(W) {
              let [y] = W;
              return ["CMYK", 0, 0, 0, 1 - y];
            }
            static G_RGB(W) {
              let [y] = W;
              return ["RGB", y, y, y];
            }
            static G_HTML(W) {
              let [y] = W;
              const h = i(y);
              return `#${h}${h}${h}`;
            }
            static RGB_G(W) {
              let [y, h, p] = W;
              return ["G", 0.3 * y + 0.59 * h + 0.11 * p];
            }
            static RGB_HTML(W) {
              let [y, h, p] = W;
              const X = i(y), M = i(h), x = i(p);
              return `#${X}${M}${x}`;
            }
            static T_HTML() {
              return "#00000000";
            }
            static CMYK_RGB(W) {
              let [y, h, p, X] = W;
              return ["RGB", 1 - Math.min(1, y + X), 1 - Math.min(1, p + X), 1 - Math.min(1, h + X)];
            }
            static CMYK_HTML(W) {
              const y = this.CMYK_RGB(W).slice(1);
              return this.RGB_HTML(y);
            }
            static RGB_CMYK(W) {
              let [y, h, p] = W;
              const X = 1 - y, M = 1 - h, x = 1 - p, n = Math.min(X, M, x);
              return ["CMYK", X, M, x, n];
            }
          }
          c.ColorConverters = t;
        },
        /* 154 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.XfaLayer = void 0;
          var t = i(145);
          class Z {
            static setupStorage(y, h, p, X, M) {
              const x = X.getValue(h, {
                value: null
              });
              switch (p.name) {
                case "textarea":
                  if (x.value !== null && (y.textContent = x.value), M === "print")
                    break;
                  y.addEventListener("input", (n) => {
                    X.setValue(h, {
                      value: n.target.value
                    });
                  });
                  break;
                case "input":
                  if (p.attributes.type === "radio" || p.attributes.type === "checkbox") {
                    if (x.value === p.attributes.xfaOn ? y.setAttribute("checked", !0) : x.value === p.attributes.xfaOff && y.removeAttribute("checked"), M === "print")
                      break;
                    y.addEventListener("change", (n) => {
                      X.setValue(h, {
                        value: n.target.checked ? n.target.getAttribute("xfaOn") : n.target.getAttribute("xfaOff")
                      });
                    });
                  } else {
                    if (x.value !== null && y.setAttribute("value", x.value), M === "print")
                      break;
                    y.addEventListener("input", (n) => {
                      X.setValue(h, {
                        value: n.target.value
                      });
                    });
                  }
                  break;
                case "select":
                  if (x.value !== null)
                    for (const n of p.children)
                      n.attributes.value === x.value && (n.attributes.selected = !0);
                  y.addEventListener("input", (n) => {
                    const V = n.target.options, S = V.selectedIndex === -1 ? "" : V[V.selectedIndex].value;
                    X.setValue(h, {
                      value: S
                    });
                  });
                  break;
              }
            }
            static setAttributes(y) {
              let {
                html: h,
                element: p,
                storage: X = null,
                intent: M,
                linkService: x
              } = y;
              const {
                attributes: n
              } = p, V = h instanceof HTMLAnchorElement;
              n.type === "radio" && (n.name = `${n.name}-${M}`);
              for (const [S, o] of Object.entries(n))
                if (o != null)
                  switch (S) {
                    case "class":
                      o.length && h.setAttribute(S, o.join(" "));
                      break;
                    case "dataId":
                      break;
                    case "id":
                      h.setAttribute("data-element-id", o);
                      break;
                    case "style":
                      Object.assign(h.style, o);
                      break;
                    case "textContent":
                      h.textContent = o;
                      break;
                    default:
                      (!V || S !== "href" && S !== "newWindow") && h.setAttribute(S, o);
                  }
              V && x.addLinkAttributes(h, n.href, n.newWindow), X && n.dataId && this.setupStorage(h, n.dataId, p, X);
            }
            static render(y) {
              const h = y.annotationStorage, p = y.linkService, X = y.xfaHtml, M = y.intent || "display", x = document.createElement(X.name);
              X.attributes && this.setAttributes({
                html: x,
                element: X,
                intent: M,
                linkService: p
              });
              const n = [[X, -1, x]], V = y.div;
              if (V.append(x), y.viewport) {
                const R = `matrix(${y.viewport.transform.join(",")})`;
                V.style.transform = R;
              }
              M !== "richText" && V.setAttribute("class", "xfaLayer xfaFont");
              const S = [];
              for (; n.length > 0; ) {
                var o;
                const [R, J, u] = n.at(-1);
                if (J + 1 === R.children.length) {
                  n.pop();
                  continue;
                }
                const e = R.children[++n.at(-1)[1]];
                if (e === null)
                  continue;
                const {
                  name: m
                } = e;
                if (m === "#text") {
                  const b = document.createTextNode(e.value);
                  S.push(b), u.append(b);
                  continue;
                }
                let d;
                if (e != null && (o = e.attributes) !== null && o !== void 0 && o.xmlns ? d = document.createElementNS(e.attributes.xmlns, m) : d = document.createElement(m), u.append(d), e.attributes && this.setAttributes({
                  html: d,
                  element: e,
                  storage: h,
                  intent: M,
                  linkService: p
                }), e.children && e.children.length > 0)
                  n.push([e, -1, d]);
                else if (e.value) {
                  const b = document.createTextNode(e.value);
                  t.XfaText.shouldBuildText(m) && S.push(b), d.append(b);
                }
              }
              for (const R of V.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea"))
                R.setAttribute("readOnly", !0);
              return {
                textDivs: S
              };
            }
            static update(y) {
              const h = `matrix(${y.viewport.transform.join(",")})`;
              y.div.style.transform = h, y.div.hidden = !1;
            }
          }
          c.XfaLayer = Z;
        },
        /* 155 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.TextLayerRenderTask = void 0, c.renderTextLayer = u;
          var t = i(1), Z = i(133);
          const W = 1e5, y = 30, h = 0.8, p = /* @__PURE__ */ new Map(), X = /^\s+$/g;
          function M(e, m) {
            const d = p.get(e);
            if (d)
              return d;
            m.save(), m.font = `${y}px ${e}`;
            const b = m.measureText("");
            let N = b.fontBoundingBoxAscent, G = Math.abs(b.fontBoundingBoxDescent);
            if (N) {
              m.restore();
              const j = N / (N + G);
              return p.set(e, j), j;
            }
            m.strokeStyle = "red", m.clearRect(0, 0, y, y), m.strokeText("g", 0, 0);
            let r = m.getImageData(0, 0, y, y).data;
            G = 0;
            for (let j = r.length - 1 - 3; j >= 0; j -= 4)
              if (r[j] > 0) {
                G = Math.ceil(j / 4 / y);
                break;
              }
            m.clearRect(0, 0, y, y), m.strokeText("A", 0, y), r = m.getImageData(0, 0, y, y).data, N = 0;
            for (let j = 0, D = r.length; j < D; j += 4)
              if (r[j] > 0) {
                N = y - Math.floor(j / 4 / y);
                break;
              }
            if (m.restore(), N) {
              const j = N / (N + G);
              return p.set(e, j), j;
            }
            return p.set(e, h), h;
          }
          function x(e, m, d, b) {
            const N = document.createElement("span"), G = e._enhanceTextSelection ? {
              angle: 0,
              canvasWidth: 0,
              hasText: m.str !== "",
              hasEOL: m.hasEOL,
              originalTransform: null,
              paddingBottom: 0,
              paddingLeft: 0,
              paddingRight: 0,
              paddingTop: 0,
              scale: 1,
              fontSize: 0
            } : {
              angle: 0,
              canvasWidth: 0,
              hasText: m.str !== "",
              hasEOL: m.hasEOL,
              fontSize: 0
            };
            e._textDivs.push(N);
            const r = t.Util.transform(e._viewport.transform, m.transform);
            let j = Math.atan2(r[1], r[0]);
            const D = d[m.fontName];
            D.vertical && (j += Math.PI / 2);
            const f = Math.hypot(r[2], r[3]), P = f * M(D.fontFamily, b);
            let B, A;
            j === 0 ? (B = r[4], A = r[5] - P) : (B = r[4] + P * Math.sin(j), A = r[5] - P * Math.cos(j)), N.style.left = `${B}px`, N.style.top = `${A}px`, N.style.fontSize = `${f}px`, N.style.fontFamily = D.fontFamily, G.fontSize = f, N.setAttribute("role", "presentation"), N.textContent = m.str, N.dir = m.dir, e._fontInspectorEnabled && (N.dataset.fontName = m.fontName), j !== 0 && (G.angle = j * (180 / Math.PI));
            let H = !1;
            if (m.str.length > 1 || e._enhanceTextSelection && X.test(m.str))
              H = !0;
            else if (m.str !== " " && m.transform[0] !== m.transform[3]) {
              const O = Math.abs(m.transform[0]), U = Math.abs(m.transform[3]);
              O !== U && Math.max(O, U) / Math.min(O, U) > 1.5 && (H = !0);
            }
            if (H && (D.vertical ? G.canvasWidth = m.height * e._viewport.scale : G.canvasWidth = m.width * e._viewport.scale), e._textDivProperties.set(N, G), e._textContentStream && e._layoutText(N), e._enhanceTextSelection && G.hasText) {
              let O = 1, U = 0;
              j !== 0 && (O = Math.cos(j), U = Math.sin(j));
              const k = (D.vertical ? m.height : m.width) * e._viewport.scale, q = f;
              let al, Ml;
              j !== 0 ? (al = [O, U, -U, O, B, A], Ml = t.Util.getAxialAlignedBoundingBox([0, 0, k, q], al)) : Ml = [B, A, B + k, A + q], e._bounds.push({
                left: Ml[0],
                top: Ml[1],
                right: Ml[2],
                bottom: Ml[3],
                div: N,
                size: [k, q],
                m: al
              });
            }
          }
          function n(e) {
            if (e._canceled)
              return;
            const m = e._textDivs, d = e._capability, b = m.length;
            if (b > W) {
              e._renderingDone = !0, d.resolve();
              return;
            }
            if (!e._textContentStream)
              for (let N = 0; N < b; N++)
                e._layoutText(m[N]);
            e._renderingDone = !0, d.resolve();
          }
          function V(e, m, d) {
            let b = 0;
            for (let N = 0; N < d; N++) {
              const G = e[m++];
              G > 0 && (b = b ? Math.min(G, b) : G);
            }
            return b;
          }
          function S(e) {
            const m = e._bounds, d = e._viewport, b = o(d.width, d.height, m);
            for (let N = 0; N < b.length; N++) {
              const G = m[N].div, r = e._textDivProperties.get(G);
              if (r.angle === 0) {
                r.paddingLeft = m[N].left - b[N].left, r.paddingTop = m[N].top - b[N].top, r.paddingRight = b[N].right - m[N].right, r.paddingBottom = b[N].bottom - m[N].bottom, e._textDivProperties.set(G, r);
                continue;
              }
              const j = b[N], D = m[N], f = D.m, P = f[0], B = f[1], A = [[0, 0], [0, D.size[1]], [D.size[0], 0], D.size], H = new Float64Array(64);
              for (let U = 0, k = A.length; U < k; U++) {
                const q = t.Util.applyTransform(A[U], f);
                H[U + 0] = P && (j.left - q[0]) / P, H[U + 4] = B && (j.top - q[1]) / B, H[U + 8] = P && (j.right - q[0]) / P, H[U + 12] = B && (j.bottom - q[1]) / B, H[U + 16] = B && (j.left - q[0]) / -B, H[U + 20] = P && (j.top - q[1]) / P, H[U + 24] = B && (j.right - q[0]) / -B, H[U + 28] = P && (j.bottom - q[1]) / P, H[U + 32] = P && (j.left - q[0]) / -P, H[U + 36] = B && (j.top - q[1]) / -B, H[U + 40] = P && (j.right - q[0]) / -P, H[U + 44] = B && (j.bottom - q[1]) / -B, H[U + 48] = B && (j.left - q[0]) / B, H[U + 52] = P && (j.top - q[1]) / -P, H[U + 56] = B && (j.right - q[0]) / B, H[U + 60] = P && (j.bottom - q[1]) / -P;
              }
              const O = 1 + Math.min(Math.abs(P), Math.abs(B));
              r.paddingLeft = V(H, 32, 16) / O, r.paddingTop = V(H, 48, 16) / O, r.paddingRight = V(H, 0, 16) / O, r.paddingBottom = V(H, 16, 16) / O, e._textDivProperties.set(G, r);
            }
          }
          function o(e, m, d) {
            const b = d.map(function(G, r) {
              return {
                x1: G.left,
                y1: G.top,
                x2: G.right,
                y2: G.bottom,
                index: r,
                x1New: void 0,
                x2New: void 0
              };
            });
            R(e, b);
            const N = new Array(d.length);
            for (const G of b) {
              const r = G.index;
              N[r] = {
                left: G.x1New,
                top: 0,
                right: G.x2New,
                bottom: 0
              };
            }
            d.map(function(G, r) {
              const j = N[r], D = b[r];
              D.x1 = G.top, D.y1 = e - j.right, D.x2 = G.bottom, D.y2 = e - j.left, D.index = r, D.x1New = void 0, D.x2New = void 0;
            }), R(m, b);
            for (const G of b) {
              const r = G.index;
              N[r].top = G.x1New, N[r].bottom = G.x2New;
            }
            return N;
          }
          function R(e, m) {
            m.sort(function(N, G) {
              return N.x1 - G.x1 || N.index - G.index;
            });
            const b = [{
              start: -1 / 0,
              end: 1 / 0,
              boundary: {
                x1: -1 / 0,
                y1: -1 / 0,
                x2: 0,
                y2: 1 / 0,
                index: -1,
                x1New: 0,
                x2New: 0
              }
            }];
            for (const N of m) {
              let G = 0;
              for (; G < b.length && b[G].end <= N.y1; )
                G++;
              let r = b.length - 1;
              for (; r >= 0 && b[r].start >= N.y2; )
                r--;
              let j, D, f, P, B = -1 / 0;
              for (f = G; f <= r; f++) {
                j = b[f], D = j.boundary;
                let O;
                D.x2 > N.x1 ? O = D.index > N.index ? D.x1New : N.x1 : D.x2New === void 0 ? O = (D.x2 + N.x1) / 2 : O = D.x2New, O > B && (B = O);
              }
              for (N.x1New = B, f = G; f <= r; f++)
                j = b[f], D = j.boundary, D.x2New === void 0 ? D.x2 > N.x1 ? D.index > N.index && (D.x2New = D.x2) : D.x2New = B : D.x2New > B && (D.x2New = Math.max(B, D.x2));
              const A = [];
              let H = null;
              for (f = G; f <= r; f++) {
                j = b[f], D = j.boundary;
                const O = D.x2 > N.x2 ? D : N;
                H === O ? A.at(-1).end = j.end : (A.push({
                  start: j.start,
                  end: j.end,
                  boundary: O
                }), H = O);
              }
              for (b[G].start < N.y1 && (A[0].start = N.y1, A.unshift({
                start: b[G].start,
                end: N.y1,
                boundary: b[G].boundary
              })), N.y2 < b[r].end && (A.at(-1).end = N.y2, A.push({
                start: N.y2,
                end: b[r].end,
                boundary: b[r].boundary
              })), f = G; f <= r; f++) {
                if (j = b[f], D = j.boundary, D.x2New !== void 0)
                  continue;
                let O = !1;
                for (P = G - 1; !O && P >= 0 && b[P].start >= D.y1; P--)
                  O = b[P].boundary === D;
                for (P = r + 1; !O && P < b.length && b[P].end <= D.y2; P++)
                  O = b[P].boundary === D;
                for (P = 0; !O && P < A.length; P++)
                  O = A[P].boundary === D;
                O || (D.x2New = B);
              }
              Array.prototype.splice.apply(b, [G, r - G + 1, ...A]);
            }
            for (const N of b) {
              const G = N.boundary;
              G.x2New === void 0 && (G.x2New = Math.max(e, G.x2));
            }
          }
          class J {
            constructor(m) {
              var d;
              let {
                textContent: b,
                textContentStream: N,
                container: G,
                viewport: r,
                textDivs: j,
                textContentItemsStr: D,
                enhanceTextSelection: f
              } = m;
              f && (0, Z.deprecated)("The `enhanceTextSelection` functionality will be removed in the future."), this._textContent = b, this._textContentStream = N, this._container = G, this._document = G.ownerDocument, this._viewport = r, this._textDivs = j || [], this._textContentItemsStr = D || [], this._enhanceTextSelection = !!f, this._fontInspectorEnabled = !!((d = globalThis.FontInspector) !== null && d !== void 0 && d.enabled), this._reader = null, this._layoutTextLastFontSize = null, this._layoutTextLastFontFamily = null, this._layoutTextCtx = null, this._textDivProperties = /* @__PURE__ */ new WeakMap(), this._renderingDone = !1, this._canceled = !1, this._capability = (0, t.createPromiseCapability)(), this._renderTimer = null, this._bounds = [], this._devicePixelRatio = globalThis.devicePixelRatio || 1, this._capability.promise.finally(() => {
                this._enhanceTextSelection || (this._textDivProperties = null), this._layoutTextCtx && (this._layoutTextCtx.canvas.width = 0, this._layoutTextCtx.canvas.height = 0, this._layoutTextCtx = null);
              }).catch(() => {
              });
            }
            get promise() {
              return this._capability.promise;
            }
            cancel() {
              this._canceled = !0, this._reader && (this._reader.cancel(new t.AbortException("TextLayer task cancelled.")).catch(() => {
              }), this._reader = null), this._renderTimer !== null && (clearTimeout(this._renderTimer), this._renderTimer = null), this._capability.reject(new Error("TextLayer task cancelled."));
            }
            _processItems(m, d) {
              for (let b = 0, N = m.length; b < N; b++) {
                if (m[b].str === void 0) {
                  if (m[b].type === "beginMarkedContentProps" || m[b].type === "beginMarkedContent") {
                    const G = this._container;
                    this._container = document.createElement("span"), this._container.classList.add("markedContent"), m[b].id !== null && this._container.setAttribute("id", `${m[b].id}`), G.append(this._container);
                  } else m[b].type === "endMarkedContent" && (this._container = this._container.parentNode);
                  continue;
                }
                this._textContentItemsStr.push(m[b].str), x(this, m[b], d, this._layoutTextCtx);
              }
            }
            _layoutText(m) {
              const d = this._textDivProperties.get(m);
              let b = "";
              if (d.canvasWidth !== 0 && d.hasText) {
                const {
                  fontFamily: N
                } = m.style, {
                  fontSize: G
                } = d;
                (G !== this._layoutTextLastFontSize || N !== this._layoutTextLastFontFamily) && (this._layoutTextCtx.font = `${G * this._devicePixelRatio}px ${N}`, this._layoutTextLastFontSize = G, this._layoutTextLastFontFamily = N);
                const {
                  width: r
                } = this._layoutTextCtx.measureText(m.textContent);
                if (r > 0) {
                  const j = this._devicePixelRatio * d.canvasWidth / r;
                  this._enhanceTextSelection && (d.scale = j), b = `scaleX(${j})`;
                }
              }
              if (d.angle !== 0 && (b = `rotate(${d.angle}deg) ${b}`), b.length > 0 && (this._enhanceTextSelection && (d.originalTransform = b), m.style.transform = b), d.hasText && this._container.append(m), d.hasEOL) {
                const N = document.createElement("br");
                N.setAttribute("role", "presentation"), this._container.append(N);
              }
            }
            _render() {
              let m = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
              const d = (0, t.createPromiseCapability)();
              let b = /* @__PURE__ */ Object.create(null);
              const N = this._document.createElement("canvas");
              if (N.height = N.width = y, this._layoutTextCtx = N.getContext("2d", {
                alpha: !1
              }), this._textContent) {
                const G = this._textContent.items, r = this._textContent.styles;
                this._processItems(G, r), d.resolve();
              } else if (this._textContentStream) {
                const G = () => {
                  this._reader.read().then((r) => {
                    let {
                      value: j,
                      done: D
                    } = r;
                    if (D) {
                      d.resolve();
                      return;
                    }
                    Object.assign(b, j.styles), this._processItems(j.items, b), G();
                  }, d.reject);
                };
                this._reader = this._textContentStream.getReader(), G();
              } else
                throw new Error('Neither "textContent" nor "textContentStream" parameters specified.');
              d.promise.then(() => {
                b = null, m ? this._renderTimer = setTimeout(() => {
                  n(this), this._renderTimer = null;
                }, m) : n(this);
              }, this._capability.reject);
            }
            expandTextDivs() {
              let m = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
              if (!this._enhanceTextSelection || !this._renderingDone)
                return;
              this._bounds !== null && (S(this), this._bounds = null);
              const d = [], b = [];
              for (let N = 0, G = this._textDivs.length; N < G; N++) {
                const r = this._textDivs[N], j = this._textDivProperties.get(r);
                j.hasText && (m ? (d.length = 0, b.length = 0, j.originalTransform && d.push(j.originalTransform), j.paddingTop > 0 ? (b.push(`${j.paddingTop}px`), d.push(`translateY(${-j.paddingTop}px)`)) : b.push(0), j.paddingRight > 0 ? b.push(`${j.paddingRight / j.scale}px`) : b.push(0), j.paddingBottom > 0 ? b.push(`${j.paddingBottom}px`) : b.push(0), j.paddingLeft > 0 ? (b.push(`${j.paddingLeft / j.scale}px`), d.push(`translateX(${-j.paddingLeft / j.scale}px)`)) : b.push(0), r.style.padding = b.join(" "), d.length && (r.style.transform = d.join(" "))) : (r.style.padding = null, r.style.transform = j.originalTransform));
              }
            }
          }
          c.TextLayerRenderTask = J;
          function u(e) {
            const m = new J({
              textContent: e.textContent,
              textContentStream: e.textContentStream,
              container: e.container,
              viewport: e.viewport,
              textDivs: e.textDivs,
              textContentItemsStr: e.textContentItemsStr,
              enhanceTextSelection: e.enhanceTextSelection
            });
            return m._render(e.timeout), m;
          }
        },
        /* 156 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.SVGGraphics = void 0;
          var t = i(133), Z = i(1), W = i(3);
          let y = class {
            constructor() {
              (0, Z.unreachable)("Not implemented: SVGGraphics");
            }
          };
          c.SVGGraphics = y;
          {
            let o = function(d) {
              let b = [];
              const N = [];
              for (const G of d) {
                if (G.fn === "save") {
                  b.push({
                    fnId: 92,
                    fn: "group",
                    items: []
                  }), N.push(b), b = b.at(-1).items;
                  continue;
                }
                G.fn === "restore" ? b = N.pop() : b.push(G);
              }
              return b;
            }, R = function(d) {
              if (Number.isInteger(d))
                return d.toString();
              const b = d.toFixed(10);
              let N = b.length - 1;
              if (b[N] !== "0")
                return b;
              do
                N--;
              while (b[N] === "0");
              return b.substring(0, b[N] === "." ? N : N + 1);
            }, J = function(d) {
              if (d[4] === 0 && d[5] === 0) {
                if (d[1] === 0 && d[2] === 0)
                  return d[0] === 1 && d[3] === 1 ? "" : `scale(${R(d[0])} ${R(d[3])})`;
                if (d[0] === d[3] && d[1] === -d[2]) {
                  const b = Math.acos(d[0]) * 180 / Math.PI;
                  return `rotate(${R(b)})`;
                }
              } else if (d[0] === 1 && d[1] === 0 && d[2] === 0 && d[3] === 1)
                return `translate(${R(d[4])} ${R(d[5])})`;
              return `matrix(${R(d[0])} ${R(d[1])} ${R(d[2])} ${R(d[3])} ${R(d[4])} ${R(d[5])})`;
            };
            const h = {
              fontStyle: "normal",
              fontWeight: "normal",
              fillColor: "#000000"
            }, p = "http://www.w3.org/XML/1998/namespace", X = "http://www.w3.org/1999/xlink", M = ["butt", "round", "square"], x = ["miter", "round", "bevel"], n = function(d) {
              let b = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "", N = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
              if (URL.createObjectURL && typeof Blob < "u" && !N)
                return URL.createObjectURL(new Blob([d], {
                  type: b
                }));
              const G = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
              let r = `data:${b};base64,`;
              for (let j = 0, D = d.length; j < D; j += 3) {
                const f = d[j] & 255, P = d[j + 1] & 255, B = d[j + 2] & 255, A = f >> 2, H = (f & 3) << 4 | P >> 4, O = j + 1 < D ? (P & 15) << 2 | B >> 6 : 64, U = j + 2 < D ? B & 63 : 64;
                r += G[A] + G[H] + G[O] + G[U];
              }
              return r;
            }, V = function() {
              const d = new Uint8Array([137, 80, 78, 71, 13, 10, 26, 10]), b = 12, N = new Int32Array(256);
              for (let B = 0; B < 256; B++) {
                let A = B;
                for (let H = 0; H < 8; H++)
                  A & 1 ? A = 3988292384 ^ A >> 1 & 2147483647 : A = A >> 1 & 2147483647;
                N[B] = A;
              }
              function G(B, A, H) {
                let O = -1;
                for (let U = A; U < H; U++) {
                  const k = (O ^ B[U]) & 255, q = N[k];
                  O = O >>> 8 ^ q;
                }
                return O ^ -1;
              }
              function r(B, A, H, O) {
                let U = O;
                const k = A.length;
                H[U] = k >> 24 & 255, H[U + 1] = k >> 16 & 255, H[U + 2] = k >> 8 & 255, H[U + 3] = k & 255, U += 4, H[U] = B.charCodeAt(0) & 255, H[U + 1] = B.charCodeAt(1) & 255, H[U + 2] = B.charCodeAt(2) & 255, H[U + 3] = B.charCodeAt(3) & 255, U += 4, H.set(A, U), U += A.length;
                const q = G(H, O + 4, U);
                H[U] = q >> 24 & 255, H[U + 1] = q >> 16 & 255, H[U + 2] = q >> 8 & 255, H[U + 3] = q & 255;
              }
              function j(B, A, H) {
                let O = 1, U = 0;
                for (let k = A; k < H; ++k)
                  O = (O + (B[k] & 255)) % 65521, U = (U + O) % 65521;
                return U << 16 | O;
              }
              function D(B) {
                if (!W.isNodeJS)
                  return f(B);
                try {
                  let A;
                  parseInt(process.versions.node) >= 8 ? A = B : A = Buffer.from(B);
                  const H = require$$7.deflateSync(A, {
                    level: 9
                  });
                  return H instanceof Uint8Array ? H : new Uint8Array(H);
                } catch (A) {
                  (0, Z.warn)("Not compressing PNG because zlib.deflateSync is unavailable: " + A);
                }
                return f(B);
              }
              function f(B) {
                let A = B.length;
                const H = 65535, O = Math.ceil(A / H), U = new Uint8Array(2 + A + O * 5 + 4);
                let k = 0;
                U[k++] = 120, U[k++] = 156;
                let q = 0;
                for (; A > H; )
                  U[k++] = 0, U[k++] = 255, U[k++] = 255, U[k++] = 0, U[k++] = 0, U.set(B.subarray(q, q + H), k), k += H, q += H, A -= H;
                U[k++] = 1, U[k++] = A & 255, U[k++] = A >> 8 & 255, U[k++] = ~A & 65535 & 255, U[k++] = (~A & 65535) >> 8 & 255, U.set(B.subarray(q), k), k += B.length - q;
                const al = j(B, 0, B.length);
                return U[k++] = al >> 24 & 255, U[k++] = al >> 16 & 255, U[k++] = al >> 8 & 255, U[k++] = al & 255, U;
              }
              function P(B, A, H, O) {
                const U = B.width, k = B.height;
                let q, al, Ml;
                const wl = B.data;
                switch (A) {
                  case Z.ImageKind.GRAYSCALE_1BPP:
                    al = 0, q = 1, Ml = U + 7 >> 3;
                    break;
                  case Z.ImageKind.RGB_24BPP:
                    al = 2, q = 8, Ml = U * 3;
                    break;
                  case Z.ImageKind.RGBA_32BPP:
                    al = 6, q = 8, Ml = U * 4;
                    break;
                  default:
                    throw new Error("invalid format");
                }
                const Q = new Uint8Array((1 + Ml) * k);
                let T = 0, w = 0;
                for (let C = 0; C < k; ++C)
                  Q[T++] = 0, Q.set(wl.subarray(w, w + Ml), T), w += Ml, T += Ml;
                if (A === Z.ImageKind.GRAYSCALE_1BPP && O) {
                  T = 0;
                  for (let C = 0; C < k; C++) {
                    T++;
                    for (let F = 0; F < Ml; F++)
                      Q[T++] ^= 255;
                  }
                }
                const g = new Uint8Array([U >> 24 & 255, U >> 16 & 255, U >> 8 & 255, U & 255, k >> 24 & 255, k >> 16 & 255, k >> 8 & 255, k & 255, q, al, 0, 0, 0]), K = D(Q), a = d.length + b * 3 + g.length + K.length, Y = new Uint8Array(a);
                let z = 0;
                return Y.set(d, z), z += d.length, r("IHDR", g, Y, z), z += b + g.length, r("IDATA", K, Y, z), z += b + K.length, r("IEND", new Uint8Array(0), Y, z), n(Y, "image/png", H);
              }
              return function(A, H, O) {
                const U = A.kind === void 0 ? Z.ImageKind.GRAYSCALE_1BPP : A.kind;
                return P(A, U, H, O);
              };
            }();
            class S {
              constructor() {
                this.fontSizeScale = 1, this.fontWeight = h.fontWeight, this.fontSize = 0, this.textMatrix = Z.IDENTITY_MATRIX, this.fontMatrix = Z.FONT_IDENTITY_MATRIX, this.leading = 0, this.textRenderingMode = Z.TextRenderingMode.FILL, this.textMatrixScale = 1, this.x = 0, this.y = 0, this.lineX = 0, this.lineY = 0, this.charSpacing = 0, this.wordSpacing = 0, this.textHScale = 1, this.textRise = 0, this.fillColor = h.fillColor, this.strokeColor = "#000000", this.fillAlpha = 1, this.strokeAlpha = 1, this.lineWidth = 1, this.lineJoin = "", this.lineCap = "", this.miterLimit = 0, this.dashArray = [], this.dashPhase = 0, this.dependencies = [], this.activeClipUrl = null, this.clipGroup = null, this.maskId = "";
              }
              clone() {
                return Object.create(this);
              }
              setCurrentPoint(b, N) {
                this.x = b, this.y = N;
              }
            }
            let u = 0, e = 0, m = 0;
            c.SVGGraphics = y = class {
              constructor(d, b) {
                let N = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
                (0, t.deprecated)("The SVG back-end is no longer maintained and *may* be removed in the future."), this.svgFactory = new t.DOMSVGFactory(), this.current = new S(), this.transformMatrix = Z.IDENTITY_MATRIX, this.transformStack = [], this.extraStack = [], this.commonObjs = d, this.objs = b, this.pendingClip = null, this.pendingEOFill = !1, this.embedFonts = !1, this.embeddedFonts = /* @__PURE__ */ Object.create(null), this.cssStyle = null, this.forceDataSchema = !!N, this._operatorIdMapping = [];
                for (const G in Z.OPS)
                  this._operatorIdMapping[Z.OPS[G]] = G;
              }
              save() {
                this.transformStack.push(this.transformMatrix);
                const d = this.current;
                this.extraStack.push(d), this.current = d.clone();
              }
              restore() {
                this.transformMatrix = this.transformStack.pop(), this.current = this.extraStack.pop(), this.pendingClip = null, this.tgrp = null;
              }
              group(d) {
                this.save(), this.executeOpTree(d), this.restore();
              }
              loadDependencies(d) {
                const b = d.fnArray, N = d.argsArray;
                for (let G = 0, r = b.length; G < r; G++)
                  if (b[G] === Z.OPS.dependency)
                    for (const j of N[G]) {
                      const D = j.startsWith("g_") ? this.commonObjs : this.objs, f = new Promise((P) => {
                        D.get(j, P);
                      });
                      this.current.dependencies.push(f);
                    }
                return Promise.all(this.current.dependencies);
              }
              transform(d, b, N, G, r, j) {
                const D = [d, b, N, G, r, j];
                this.transformMatrix = Z.Util.transform(this.transformMatrix, D), this.tgrp = null;
              }
              getSVG(d, b) {
                this.viewport = b;
                const N = this._initialize(b);
                return this.loadDependencies(d).then(() => (this.transformMatrix = Z.IDENTITY_MATRIX, this.executeOpTree(this.convertOpList(d)), N));
              }
              convertOpList(d) {
                const b = this._operatorIdMapping, N = d.argsArray, G = d.fnArray, r = [];
                for (let j = 0, D = G.length; j < D; j++) {
                  const f = G[j];
                  r.push({
                    fnId: f,
                    fn: b[f],
                    args: N[j]
                  });
                }
                return o(r);
              }
              executeOpTree(d) {
                for (const b of d) {
                  const N = b.fn, G = b.fnId, r = b.args;
                  switch (G | 0) {
                    case Z.OPS.beginText:
                      this.beginText();
                      break;
                    case Z.OPS.dependency:
                      break;
                    case Z.OPS.setLeading:
                      this.setLeading(r);
                      break;
                    case Z.OPS.setLeadingMoveText:
                      this.setLeadingMoveText(r[0], r[1]);
                      break;
                    case Z.OPS.setFont:
                      this.setFont(r);
                      break;
                    case Z.OPS.showText:
                      this.showText(r[0]);
                      break;
                    case Z.OPS.showSpacedText:
                      this.showText(r[0]);
                      break;
                    case Z.OPS.endText:
                      this.endText();
                      break;
                    case Z.OPS.moveText:
                      this.moveText(r[0], r[1]);
                      break;
                    case Z.OPS.setCharSpacing:
                      this.setCharSpacing(r[0]);
                      break;
                    case Z.OPS.setWordSpacing:
                      this.setWordSpacing(r[0]);
                      break;
                    case Z.OPS.setHScale:
                      this.setHScale(r[0]);
                      break;
                    case Z.OPS.setTextMatrix:
                      this.setTextMatrix(r[0], r[1], r[2], r[3], r[4], r[5]);
                      break;
                    case Z.OPS.setTextRise:
                      this.setTextRise(r[0]);
                      break;
                    case Z.OPS.setTextRenderingMode:
                      this.setTextRenderingMode(r[0]);
                      break;
                    case Z.OPS.setLineWidth:
                      this.setLineWidth(r[0]);
                      break;
                    case Z.OPS.setLineJoin:
                      this.setLineJoin(r[0]);
                      break;
                    case Z.OPS.setLineCap:
                      this.setLineCap(r[0]);
                      break;
                    case Z.OPS.setMiterLimit:
                      this.setMiterLimit(r[0]);
                      break;
                    case Z.OPS.setFillRGBColor:
                      this.setFillRGBColor(r[0], r[1], r[2]);
                      break;
                    case Z.OPS.setStrokeRGBColor:
                      this.setStrokeRGBColor(r[0], r[1], r[2]);
                      break;
                    case Z.OPS.setStrokeColorN:
                      this.setStrokeColorN(r);
                      break;
                    case Z.OPS.setFillColorN:
                      this.setFillColorN(r);
                      break;
                    case Z.OPS.shadingFill:
                      this.shadingFill(r[0]);
                      break;
                    case Z.OPS.setDash:
                      this.setDash(r[0], r[1]);
                      break;
                    case Z.OPS.setRenderingIntent:
                      this.setRenderingIntent(r[0]);
                      break;
                    case Z.OPS.setFlatness:
                      this.setFlatness(r[0]);
                      break;
                    case Z.OPS.setGState:
                      this.setGState(r[0]);
                      break;
                    case Z.OPS.fill:
                      this.fill();
                      break;
                    case Z.OPS.eoFill:
                      this.eoFill();
                      break;
                    case Z.OPS.stroke:
                      this.stroke();
                      break;
                    case Z.OPS.fillStroke:
                      this.fillStroke();
                      break;
                    case Z.OPS.eoFillStroke:
                      this.eoFillStroke();
                      break;
                    case Z.OPS.clip:
                      this.clip("nonzero");
                      break;
                    case Z.OPS.eoClip:
                      this.clip("evenodd");
                      break;
                    case Z.OPS.paintSolidColorImageMask:
                      this.paintSolidColorImageMask();
                      break;
                    case Z.OPS.paintImageXObject:
                      this.paintImageXObject(r[0]);
                      break;
                    case Z.OPS.paintInlineImageXObject:
                      this.paintInlineImageXObject(r[0]);
                      break;
                    case Z.OPS.paintImageMaskXObject:
                      this.paintImageMaskXObject(r[0]);
                      break;
                    case Z.OPS.paintFormXObjectBegin:
                      this.paintFormXObjectBegin(r[0], r[1]);
                      break;
                    case Z.OPS.paintFormXObjectEnd:
                      this.paintFormXObjectEnd();
                      break;
                    case Z.OPS.closePath:
                      this.closePath();
                      break;
                    case Z.OPS.closeStroke:
                      this.closeStroke();
                      break;
                    case Z.OPS.closeFillStroke:
                      this.closeFillStroke();
                      break;
                    case Z.OPS.closeEOFillStroke:
                      this.closeEOFillStroke();
                      break;
                    case Z.OPS.nextLine:
                      this.nextLine();
                      break;
                    case Z.OPS.transform:
                      this.transform(r[0], r[1], r[2], r[3], r[4], r[5]);
                      break;
                    case Z.OPS.constructPath:
                      this.constructPath(r[0], r[1]);
                      break;
                    case Z.OPS.endPath:
                      this.endPath();
                      break;
                    case 92:
                      this.group(b.items);
                      break;
                    default:
                      (0, Z.warn)(`Unimplemented operator ${N}`);
                      break;
                  }
                }
              }
              setWordSpacing(d) {
                this.current.wordSpacing = d;
              }
              setCharSpacing(d) {
                this.current.charSpacing = d;
              }
              nextLine() {
                this.moveText(0, this.current.leading);
              }
              setTextMatrix(d, b, N, G, r, j) {
                const D = this.current;
                D.textMatrix = D.lineMatrix = [d, b, N, G, r, j], D.textMatrixScale = Math.hypot(d, b), D.x = D.lineX = 0, D.y = D.lineY = 0, D.xcoords = [], D.ycoords = [], D.tspan = this.svgFactory.createElement("svg:tspan"), D.tspan.setAttributeNS(null, "font-family", D.fontFamily), D.tspan.setAttributeNS(null, "font-size", `${R(D.fontSize)}px`), D.tspan.setAttributeNS(null, "y", R(-D.y)), D.txtElement = this.svgFactory.createElement("svg:text"), D.txtElement.append(D.tspan);
              }
              beginText() {
                const d = this.current;
                d.x = d.lineX = 0, d.y = d.lineY = 0, d.textMatrix = Z.IDENTITY_MATRIX, d.lineMatrix = Z.IDENTITY_MATRIX, d.textMatrixScale = 1, d.tspan = this.svgFactory.createElement("svg:tspan"), d.txtElement = this.svgFactory.createElement("svg:text"), d.txtgrp = this.svgFactory.createElement("svg:g"), d.xcoords = [], d.ycoords = [];
              }
              moveText(d, b) {
                const N = this.current;
                N.x = N.lineX += d, N.y = N.lineY += b, N.xcoords = [], N.ycoords = [], N.tspan = this.svgFactory.createElement("svg:tspan"), N.tspan.setAttributeNS(null, "font-family", N.fontFamily), N.tspan.setAttributeNS(null, "font-size", `${R(N.fontSize)}px`), N.tspan.setAttributeNS(null, "y", R(-N.y));
              }
              showText(d) {
                const b = this.current, N = b.font, G = b.fontSize;
                if (G === 0)
                  return;
                const r = b.fontSizeScale, j = b.charSpacing, D = b.wordSpacing, f = b.fontDirection, P = b.textHScale * f, B = N.vertical, A = B ? 1 : -1, H = N.defaultVMetrics, O = G * b.fontMatrix[0];
                let U = 0;
                for (const al of d) {
                  if (al === null) {
                    U += f * D;
                    continue;
                  } else if (typeof al == "number") {
                    U += A * al * G / 1e3;
                    continue;
                  }
                  const Ml = (al.isSpace ? D : 0) + j, wl = al.fontChar;
                  let Q, T, w = al.width;
                  if (B) {
                    let K;
                    const a = al.vmetric || H;
                    K = al.vmetric ? a[1] : w * 0.5, K = -K * O;
                    const Y = a[2] * O;
                    w = a ? -a[0] : w, Q = K / r, T = (U + Y) / r;
                  } else
                    Q = U / r, T = 0;
                  (al.isInFont || N.missingFile) && (b.xcoords.push(b.x + Q), B && b.ycoords.push(-b.y + T), b.tspan.textContent += wl);
                  let g;
                  B ? g = w * O - Ml * f : g = w * O + Ml * f, U += g;
                }
                b.tspan.setAttributeNS(null, "x", b.xcoords.map(R).join(" ")), B ? b.tspan.setAttributeNS(null, "y", b.ycoords.map(R).join(" ")) : b.tspan.setAttributeNS(null, "y", R(-b.y)), B ? b.y -= U : b.x += U * P, b.tspan.setAttributeNS(null, "font-family", b.fontFamily), b.tspan.setAttributeNS(null, "font-size", `${R(b.fontSize)}px`), b.fontStyle !== h.fontStyle && b.tspan.setAttributeNS(null, "font-style", b.fontStyle), b.fontWeight !== h.fontWeight && b.tspan.setAttributeNS(null, "font-weight", b.fontWeight);
                const k = b.textRenderingMode & Z.TextRenderingMode.FILL_STROKE_MASK;
                if (k === Z.TextRenderingMode.FILL || k === Z.TextRenderingMode.FILL_STROKE ? (b.fillColor !== h.fillColor && b.tspan.setAttributeNS(null, "fill", b.fillColor), b.fillAlpha < 1 && b.tspan.setAttributeNS(null, "fill-opacity", b.fillAlpha)) : b.textRenderingMode === Z.TextRenderingMode.ADD_TO_PATH ? b.tspan.setAttributeNS(null, "fill", "transparent") : b.tspan.setAttributeNS(null, "fill", "none"), k === Z.TextRenderingMode.STROKE || k === Z.TextRenderingMode.FILL_STROKE) {
                  const al = 1 / (b.textMatrixScale || 1);
                  this._setStrokeAttributes(b.tspan, al);
                }
                let q = b.textMatrix;
                b.textRise !== 0 && (q = q.slice(), q[5] += b.textRise), b.txtElement.setAttributeNS(null, "transform", `${J(q)} scale(${R(P)}, -1)`), b.txtElement.setAttributeNS(p, "xml:space", "preserve"), b.txtElement.append(b.tspan), b.txtgrp.append(b.txtElement), this._ensureTransformGroup().append(b.txtElement);
              }
              setLeadingMoveText(d, b) {
                this.setLeading(-b), this.moveText(d, b);
              }
              addFontStyle(d) {
                if (!d.data)
                  throw new Error('addFontStyle: No font data available, ensure that the "fontExtraProperties" API parameter is set.');
                this.cssStyle || (this.cssStyle = this.svgFactory.createElement("svg:style"), this.cssStyle.setAttributeNS(null, "type", "text/css"), this.defs.append(this.cssStyle));
                const b = n(d.data, d.mimetype, this.forceDataSchema);
                this.cssStyle.textContent += `@font-face { font-family: "${d.loadedName}"; src: url(${b}); }
`;
              }
              setFont(d) {
                const b = this.current, N = this.commonObjs.get(d[0]);
                let G = d[1];
                b.font = N, this.embedFonts && !N.missingFile && !this.embeddedFonts[N.loadedName] && (this.addFontStyle(N), this.embeddedFonts[N.loadedName] = N), b.fontMatrix = N.fontMatrix || Z.FONT_IDENTITY_MATRIX;
                let r = "normal";
                N.black ? r = "900" : N.bold && (r = "bold");
                const j = N.italic ? "italic" : "normal";
                G < 0 ? (G = -G, b.fontDirection = -1) : b.fontDirection = 1, b.fontSize = G, b.fontFamily = N.loadedName, b.fontWeight = r, b.fontStyle = j, b.tspan = this.svgFactory.createElement("svg:tspan"), b.tspan.setAttributeNS(null, "y", R(-b.y)), b.xcoords = [], b.ycoords = [];
              }
              endText() {
                var d;
                const b = this.current;
                b.textRenderingMode & Z.TextRenderingMode.ADD_TO_PATH_FLAG && (d = b.txtElement) !== null && d !== void 0 && d.hasChildNodes() && (b.element = b.txtElement, this.clip("nonzero"), this.endPath());
              }
              setLineWidth(d) {
                d > 0 && (this.current.lineWidth = d);
              }
              setLineCap(d) {
                this.current.lineCap = M[d];
              }
              setLineJoin(d) {
                this.current.lineJoin = x[d];
              }
              setMiterLimit(d) {
                this.current.miterLimit = d;
              }
              setStrokeAlpha(d) {
                this.current.strokeAlpha = d;
              }
              setStrokeRGBColor(d, b, N) {
                this.current.strokeColor = Z.Util.makeHexColor(d, b, N);
              }
              setFillAlpha(d) {
                this.current.fillAlpha = d;
              }
              setFillRGBColor(d, b, N) {
                this.current.fillColor = Z.Util.makeHexColor(d, b, N), this.current.tspan = this.svgFactory.createElement("svg:tspan"), this.current.xcoords = [], this.current.ycoords = [];
              }
              setStrokeColorN(d) {
                this.current.strokeColor = this._makeColorN_Pattern(d);
              }
              setFillColorN(d) {
                this.current.fillColor = this._makeColorN_Pattern(d);
              }
              shadingFill(d) {
                const b = this.viewport.width, N = this.viewport.height, G = Z.Util.inverseTransform(this.transformMatrix), r = Z.Util.applyTransform([0, 0], G), j = Z.Util.applyTransform([0, N], G), D = Z.Util.applyTransform([b, 0], G), f = Z.Util.applyTransform([b, N], G), P = Math.min(r[0], j[0], D[0], f[0]), B = Math.min(r[1], j[1], D[1], f[1]), A = Math.max(r[0], j[0], D[0], f[0]), H = Math.max(r[1], j[1], D[1], f[1]), O = this.svgFactory.createElement("svg:rect");
                O.setAttributeNS(null, "x", P), O.setAttributeNS(null, "y", B), O.setAttributeNS(null, "width", A - P), O.setAttributeNS(null, "height", H - B), O.setAttributeNS(null, "fill", this._makeShadingPattern(d)), this.current.fillAlpha < 1 && O.setAttributeNS(null, "fill-opacity", this.current.fillAlpha), this._ensureTransformGroup().append(O);
              }
              _makeColorN_Pattern(d) {
                return d[0] === "TilingPattern" ? this._makeTilingPattern(d) : this._makeShadingPattern(d);
              }
              _makeTilingPattern(d) {
                const b = d[1], N = d[2], G = d[3] || Z.IDENTITY_MATRIX, [r, j, D, f] = d[4], P = d[5], B = d[6], A = d[7], H = `shading${m++}`, [O, U, k, q] = Z.Util.normalizeRect([...Z.Util.applyTransform([r, j], G), ...Z.Util.applyTransform([D, f], G)]), [al, Ml] = Z.Util.singularValueDecompose2dScale(G), wl = P * al, Q = B * Ml, T = this.svgFactory.createElement("svg:pattern");
                T.setAttributeNS(null, "id", H), T.setAttributeNS(null, "patternUnits", "userSpaceOnUse"), T.setAttributeNS(null, "width", wl), T.setAttributeNS(null, "height", Q), T.setAttributeNS(null, "x", `${O}`), T.setAttributeNS(null, "y", `${U}`);
                const w = this.svg, g = this.transformMatrix, K = this.current.fillColor, a = this.current.strokeColor, Y = this.svgFactory.create(k - O, q - U);
                if (this.svg = Y, this.transformMatrix = G, A === 2) {
                  const z = Z.Util.makeHexColor(...b);
                  this.current.fillColor = z, this.current.strokeColor = z;
                }
                return this.executeOpTree(this.convertOpList(N)), this.svg = w, this.transformMatrix = g, this.current.fillColor = K, this.current.strokeColor = a, T.append(Y.childNodes[0]), this.defs.append(T), `url(#${H})`;
              }
              _makeShadingPattern(d) {
                switch (typeof d == "string" && (d = this.objs.get(d)), d[0]) {
                  case "RadialAxial":
                    const b = `shading${m++}`, N = d[3];
                    let G;
                    switch (d[1]) {
                      case "axial":
                        const r = d[4], j = d[5];
                        G = this.svgFactory.createElement("svg:linearGradient"), G.setAttributeNS(null, "id", b), G.setAttributeNS(null, "gradientUnits", "userSpaceOnUse"), G.setAttributeNS(null, "x1", r[0]), G.setAttributeNS(null, "y1", r[1]), G.setAttributeNS(null, "x2", j[0]), G.setAttributeNS(null, "y2", j[1]);
                        break;
                      case "radial":
                        const D = d[4], f = d[5], P = d[6], B = d[7];
                        G = this.svgFactory.createElement("svg:radialGradient"), G.setAttributeNS(null, "id", b), G.setAttributeNS(null, "gradientUnits", "userSpaceOnUse"), G.setAttributeNS(null, "cx", f[0]), G.setAttributeNS(null, "cy", f[1]), G.setAttributeNS(null, "r", B), G.setAttributeNS(null, "fx", D[0]), G.setAttributeNS(null, "fy", D[1]), G.setAttributeNS(null, "fr", P);
                        break;
                      default:
                        throw new Error(`Unknown RadialAxial type: ${d[1]}`);
                    }
                    for (const r of N) {
                      const j = this.svgFactory.createElement("svg:stop");
                      j.setAttributeNS(null, "offset", r[0]), j.setAttributeNS(null, "stop-color", r[1]), G.append(j);
                    }
                    return this.defs.append(G), `url(#${b})`;
                  case "Mesh":
                    return (0, Z.warn)("Unimplemented pattern Mesh"), null;
                  case "Dummy":
                    return "hotpink";
                  default:
                    throw new Error(`Unknown IR type: ${d[0]}`);
                }
              }
              setDash(d, b) {
                this.current.dashArray = d, this.current.dashPhase = b;
              }
              constructPath(d, b) {
                const N = this.current;
                let G = N.x, r = N.y, j = [], D = 0;
                for (const f of d)
                  switch (f | 0) {
                    case Z.OPS.rectangle:
                      G = b[D++], r = b[D++];
                      const P = b[D++], B = b[D++], A = G + P, H = r + B;
                      j.push("M", R(G), R(r), "L", R(A), R(r), "L", R(A), R(H), "L", R(G), R(H), "Z");
                      break;
                    case Z.OPS.moveTo:
                      G = b[D++], r = b[D++], j.push("M", R(G), R(r));
                      break;
                    case Z.OPS.lineTo:
                      G = b[D++], r = b[D++], j.push("L", R(G), R(r));
                      break;
                    case Z.OPS.curveTo:
                      G = b[D + 4], r = b[D + 5], j.push("C", R(b[D]), R(b[D + 1]), R(b[D + 2]), R(b[D + 3]), R(G), R(r)), D += 6;
                      break;
                    case Z.OPS.curveTo2:
                      j.push("C", R(G), R(r), R(b[D]), R(b[D + 1]), R(b[D + 2]), R(b[D + 3])), G = b[D + 2], r = b[D + 3], D += 4;
                      break;
                    case Z.OPS.curveTo3:
                      G = b[D + 2], r = b[D + 3], j.push("C", R(b[D]), R(b[D + 1]), R(G), R(r), R(G), R(r)), D += 4;
                      break;
                    case Z.OPS.closePath:
                      j.push("Z");
                      break;
                  }
                j = j.join(" "), N.path && d.length > 0 && d[0] !== Z.OPS.rectangle && d[0] !== Z.OPS.moveTo ? j = N.path.getAttributeNS(null, "d") + j : (N.path = this.svgFactory.createElement("svg:path"), this._ensureTransformGroup().append(N.path)), N.path.setAttributeNS(null, "d", j), N.path.setAttributeNS(null, "fill", "none"), N.element = N.path, N.setCurrentPoint(G, r);
              }
              endPath() {
                const d = this.current;
                if (d.path = null, !this.pendingClip)
                  return;
                if (!d.element) {
                  this.pendingClip = null;
                  return;
                }
                const b = `clippath${u++}`, N = this.svgFactory.createElement("svg:clipPath");
                N.setAttributeNS(null, "id", b), N.setAttributeNS(null, "transform", J(this.transformMatrix));
                const G = d.element.cloneNode(!0);
                if (this.pendingClip === "evenodd" ? G.setAttributeNS(null, "clip-rule", "evenodd") : G.setAttributeNS(null, "clip-rule", "nonzero"), this.pendingClip = null, N.append(G), this.defs.append(N), d.activeClipUrl) {
                  d.clipGroup = null;
                  for (const r of this.extraStack)
                    r.clipGroup = null;
                  N.setAttributeNS(null, "clip-path", d.activeClipUrl);
                }
                d.activeClipUrl = `url(#${b})`, this.tgrp = null;
              }
              clip(d) {
                this.pendingClip = d;
              }
              closePath() {
                const d = this.current;
                if (d.path) {
                  const b = `${d.path.getAttributeNS(null, "d")}Z`;
                  d.path.setAttributeNS(null, "d", b);
                }
              }
              setLeading(d) {
                this.current.leading = -d;
              }
              setTextRise(d) {
                this.current.textRise = d;
              }
              setTextRenderingMode(d) {
                this.current.textRenderingMode = d;
              }
              setHScale(d) {
                this.current.textHScale = d / 100;
              }
              setRenderingIntent(d) {
              }
              setFlatness(d) {
              }
              setGState(d) {
                for (const [b, N] of d)
                  switch (b) {
                    case "LW":
                      this.setLineWidth(N);
                      break;
                    case "LC":
                      this.setLineCap(N);
                      break;
                    case "LJ":
                      this.setLineJoin(N);
                      break;
                    case "ML":
                      this.setMiterLimit(N);
                      break;
                    case "D":
                      this.setDash(N[0], N[1]);
                      break;
                    case "RI":
                      this.setRenderingIntent(N);
                      break;
                    case "FL":
                      this.setFlatness(N);
                      break;
                    case "Font":
                      this.setFont(N);
                      break;
                    case "CA":
                      this.setStrokeAlpha(N);
                      break;
                    case "ca":
                      this.setFillAlpha(N);
                      break;
                    default:
                      (0, Z.warn)(`Unimplemented graphic state operator ${b}`);
                      break;
                  }
              }
              fill() {
                const d = this.current;
                d.element && (d.element.setAttributeNS(null, "fill", d.fillColor), d.element.setAttributeNS(null, "fill-opacity", d.fillAlpha), this.endPath());
              }
              stroke() {
                const d = this.current;
                d.element && (this._setStrokeAttributes(d.element), d.element.setAttributeNS(null, "fill", "none"), this.endPath());
              }
              _setStrokeAttributes(d) {
                let b = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
                const N = this.current;
                let G = N.dashArray;
                b !== 1 && G.length > 0 && (G = G.map(function(r) {
                  return b * r;
                })), d.setAttributeNS(null, "stroke", N.strokeColor), d.setAttributeNS(null, "stroke-opacity", N.strokeAlpha), d.setAttributeNS(null, "stroke-miterlimit", R(N.miterLimit)), d.setAttributeNS(null, "stroke-linecap", N.lineCap), d.setAttributeNS(null, "stroke-linejoin", N.lineJoin), d.setAttributeNS(null, "stroke-width", R(b * N.lineWidth) + "px"), d.setAttributeNS(null, "stroke-dasharray", G.map(R).join(" ")), d.setAttributeNS(null, "stroke-dashoffset", R(b * N.dashPhase) + "px");
              }
              eoFill() {
                this.current.element && this.current.element.setAttributeNS(null, "fill-rule", "evenodd"), this.fill();
              }
              fillStroke() {
                this.stroke(), this.fill();
              }
              eoFillStroke() {
                this.current.element && this.current.element.setAttributeNS(null, "fill-rule", "evenodd"), this.fillStroke();
              }
              closeStroke() {
                this.closePath(), this.stroke();
              }
              closeFillStroke() {
                this.closePath(), this.fillStroke();
              }
              closeEOFillStroke() {
                this.closePath(), this.eoFillStroke();
              }
              paintSolidColorImageMask() {
                const d = this.svgFactory.createElement("svg:rect");
                d.setAttributeNS(null, "x", "0"), d.setAttributeNS(null, "y", "0"), d.setAttributeNS(null, "width", "1px"), d.setAttributeNS(null, "height", "1px"), d.setAttributeNS(null, "fill", this.current.fillColor), this._ensureTransformGroup().append(d);
              }
              paintImageXObject(d) {
                const b = d.startsWith("g_") ? this.commonObjs.get(d) : this.objs.get(d);
                if (!b) {
                  (0, Z.warn)(`Dependent image with object ID ${d} is not ready yet`);
                  return;
                }
                this.paintInlineImageXObject(b);
              }
              paintInlineImageXObject(d, b) {
                const N = d.width, G = d.height, r = V(d, this.forceDataSchema, !!b), j = this.svgFactory.createElement("svg:rect");
                j.setAttributeNS(null, "x", "0"), j.setAttributeNS(null, "y", "0"), j.setAttributeNS(null, "width", R(N)), j.setAttributeNS(null, "height", R(G)), this.current.element = j, this.clip("nonzero");
                const D = this.svgFactory.createElement("svg:image");
                D.setAttributeNS(X, "xlink:href", r), D.setAttributeNS(null, "x", "0"), D.setAttributeNS(null, "y", R(-G)), D.setAttributeNS(null, "width", R(N) + "px"), D.setAttributeNS(null, "height", R(G) + "px"), D.setAttributeNS(null, "transform", `scale(${R(1 / N)} ${R(-1 / G)})`), b ? b.append(D) : this._ensureTransformGroup().append(D);
              }
              paintImageMaskXObject(d) {
                const b = this.current, N = d.width, G = d.height, r = b.fillColor;
                b.maskId = `mask${e++}`;
                const j = this.svgFactory.createElement("svg:mask");
                j.setAttributeNS(null, "id", b.maskId);
                const D = this.svgFactory.createElement("svg:rect");
                D.setAttributeNS(null, "x", "0"), D.setAttributeNS(null, "y", "0"), D.setAttributeNS(null, "width", R(N)), D.setAttributeNS(null, "height", R(G)), D.setAttributeNS(null, "fill", r), D.setAttributeNS(null, "mask", `url(#${b.maskId})`), this.defs.append(j), this._ensureTransformGroup().append(D), this.paintInlineImageXObject(d, j);
              }
              paintFormXObjectBegin(d, b) {
                if (Array.isArray(d) && d.length === 6 && this.transform(d[0], d[1], d[2], d[3], d[4], d[5]), b) {
                  const N = b[2] - b[0], G = b[3] - b[1], r = this.svgFactory.createElement("svg:rect");
                  r.setAttributeNS(null, "x", b[0]), r.setAttributeNS(null, "y", b[1]), r.setAttributeNS(null, "width", R(N)), r.setAttributeNS(null, "height", R(G)), this.current.element = r, this.clip("nonzero"), this.endPath();
                }
              }
              paintFormXObjectEnd() {
              }
              _initialize(d) {
                const b = this.svgFactory.create(d.width, d.height), N = this.svgFactory.createElement("svg:defs");
                b.append(N), this.defs = N;
                const G = this.svgFactory.createElement("svg:g");
                return G.setAttributeNS(null, "transform", J(d.transform)), b.append(G), this.svg = G, b;
              }
              _ensureClipGroup() {
                if (!this.current.clipGroup) {
                  const d = this.svgFactory.createElement("svg:g");
                  d.setAttributeNS(null, "clip-path", this.current.activeClipUrl), this.svg.append(d), this.current.clipGroup = d;
                }
                return this.current.clipGroup;
              }
              _ensureTransformGroup() {
                return this.tgrp || (this.tgrp = this.svgFactory.createElement("svg:g"), this.tgrp.setAttributeNS(null, "transform", J(this.transformMatrix)), this.current.activeClipUrl ? this._ensureClipGroup().append(this.tgrp) : this.svg.append(this.tgrp)), this.tgrp;
              }
            };
          }
        },
        /* 157 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.PDFNodeStream = void 0;
          var t = i(1), Z = i(158);
          const W = require$$7, y = require$$7, h = require$$7, p = require$$7, X = /^file:\/\/\/[a-zA-Z]:\//;
          function M(e) {
            const m = p.parse(e);
            return m.protocol === "file:" || m.host ? m : /^[a-z]:[/\\]/i.test(e) ? p.parse(`file:///${e}`) : (m.host || (m.protocol = "file:"), m);
          }
          class x {
            constructor(m) {
              this.source = m, this.url = M(m.url), this.isHttp = this.url.protocol === "http:" || this.url.protocol === "https:", this.isFsUrl = this.url.protocol === "file:", this.httpHeaders = this.isHttp && m.httpHeaders || {}, this._fullRequestReader = null, this._rangeRequestReaders = [];
            }
            get _progressiveDataLength() {
              var m, d;
              return (m = (d = this._fullRequestReader) === null || d === void 0 ? void 0 : d._loaded) !== null && m !== void 0 ? m : 0;
            }
            getFullReader() {
              return (0, t.assert)(!this._fullRequestReader, "PDFNodeStream.getFullReader can only be called once."), this._fullRequestReader = this.isFsUrl ? new J(this) : new o(this), this._fullRequestReader;
            }
            getRangeReader(m, d) {
              if (d <= this._progressiveDataLength)
                return null;
              const b = this.isFsUrl ? new u(this, m, d) : new R(this, m, d);
              return this._rangeRequestReaders.push(b), b;
            }
            cancelAllRequests(m) {
              this._fullRequestReader && this._fullRequestReader.cancel(m);
              for (const d of this._rangeRequestReaders.slice(0))
                d.cancel(m);
            }
          }
          c.PDFNodeStream = x;
          class n {
            constructor(m) {
              this._url = m.url, this._done = !1, this._storedError = null, this.onProgress = null;
              const d = m.source;
              this._contentLength = d.length, this._loaded = 0, this._filename = null, this._disableRange = d.disableRange || !1, this._rangeChunkSize = d.rangeChunkSize, !this._rangeChunkSize && !this._disableRange && (this._disableRange = !0), this._isStreamingSupported = !d.disableStream, this._isRangeSupported = !d.disableRange, this._readableStream = null, this._readCapability = (0, t.createPromiseCapability)(), this._headersCapability = (0, t.createPromiseCapability)();
            }
            get headersReady() {
              return this._headersCapability.promise;
            }
            get filename() {
              return this._filename;
            }
            get contentLength() {
              return this._contentLength;
            }
            get isRangeSupported() {
              return this._isRangeSupported;
            }
            get isStreamingSupported() {
              return this._isStreamingSupported;
            }
            async read() {
              if (await this._readCapability.promise, this._done)
                return {
                  value: void 0,
                  done: !0
                };
              if (this._storedError)
                throw this._storedError;
              const m = this._readableStream.read();
              return m === null ? (this._readCapability = (0, t.createPromiseCapability)(), this.read()) : (this._loaded += m.length, this.onProgress && this.onProgress({
                loaded: this._loaded,
                total: this._contentLength
              }), {
                value: new Uint8Array(m).buffer,
                done: !1
              });
            }
            cancel(m) {
              if (!this._readableStream) {
                this._error(m);
                return;
              }
              this._readableStream.destroy(m);
            }
            _error(m) {
              this._storedError = m, this._readCapability.resolve();
            }
            _setReadableStream(m) {
              this._readableStream = m, m.on("readable", () => {
                this._readCapability.resolve();
              }), m.on("end", () => {
                m.destroy(), this._done = !0, this._readCapability.resolve();
              }), m.on("error", (d) => {
                this._error(d);
              }), !this._isStreamingSupported && this._isRangeSupported && this._error(new t.AbortException("streaming is disabled")), this._storedError && this._readableStream.destroy(this._storedError);
            }
          }
          class V {
            constructor(m) {
              this._url = m.url, this._done = !1, this._storedError = null, this.onProgress = null, this._loaded = 0, this._readableStream = null, this._readCapability = (0, t.createPromiseCapability)();
              const d = m.source;
              this._isStreamingSupported = !d.disableStream;
            }
            get isStreamingSupported() {
              return this._isStreamingSupported;
            }
            async read() {
              if (await this._readCapability.promise, this._done)
                return {
                  value: void 0,
                  done: !0
                };
              if (this._storedError)
                throw this._storedError;
              const m = this._readableStream.read();
              return m === null ? (this._readCapability = (0, t.createPromiseCapability)(), this.read()) : (this._loaded += m.length, this.onProgress && this.onProgress({
                loaded: this._loaded
              }), {
                value: new Uint8Array(m).buffer,
                done: !1
              });
            }
            cancel(m) {
              if (!this._readableStream) {
                this._error(m);
                return;
              }
              this._readableStream.destroy(m);
            }
            _error(m) {
              this._storedError = m, this._readCapability.resolve();
            }
            _setReadableStream(m) {
              this._readableStream = m, m.on("readable", () => {
                this._readCapability.resolve();
              }), m.on("end", () => {
                m.destroy(), this._done = !0, this._readCapability.resolve();
              }), m.on("error", (d) => {
                this._error(d);
              }), this._storedError && this._readableStream.destroy(this._storedError);
            }
          }
          function S(e, m) {
            return {
              protocol: e.protocol,
              auth: e.auth,
              host: e.hostname,
              port: e.port,
              path: e.path,
              method: "GET",
              headers: m
            };
          }
          class o extends n {
            constructor(m) {
              super(m);
              const d = (b) => {
                if (b.statusCode === 404) {
                  const j = new t.MissingPDFException(`Missing PDF "${this._url}".`);
                  this._storedError = j, this._headersCapability.reject(j);
                  return;
                }
                this._headersCapability.resolve(), this._setReadableStream(b);
                const N = (j) => this._readableStream.headers[j.toLowerCase()], {
                  allowRangeRequests: G,
                  suggestedLength: r
                } = (0, Z.validateRangeRequestCapabilities)({
                  getResponseHeader: N,
                  isHttp: m.isHttp,
                  rangeChunkSize: this._rangeChunkSize,
                  disableRange: this._disableRange
                });
                this._isRangeSupported = G, this._contentLength = r || this._contentLength, this._filename = (0, Z.extractFilenameFromHeader)(N);
              };
              this._request = null, this._url.protocol === "http:" ? this._request = y.request(S(this._url, m.httpHeaders), d) : this._request = h.request(S(this._url, m.httpHeaders), d), this._request.on("error", (b) => {
                this._storedError = b, this._headersCapability.reject(b);
              }), this._request.end();
            }
          }
          class R extends V {
            constructor(m, d, b) {
              super(m), this._httpHeaders = {};
              for (const G in m.httpHeaders) {
                const r = m.httpHeaders[G];
                typeof r > "u" || (this._httpHeaders[G] = r);
              }
              this._httpHeaders.Range = `bytes=${d}-${b - 1}`;
              const N = (G) => {
                if (G.statusCode === 404) {
                  const r = new t.MissingPDFException(`Missing PDF "${this._url}".`);
                  this._storedError = r;
                  return;
                }
                this._setReadableStream(G);
              };
              this._request = null, this._url.protocol === "http:" ? this._request = y.request(S(this._url, this._httpHeaders), N) : this._request = h.request(S(this._url, this._httpHeaders), N), this._request.on("error", (G) => {
                this._storedError = G;
              }), this._request.end();
            }
          }
          class J extends n {
            constructor(m) {
              super(m);
              let d = decodeURIComponent(this._url.path);
              X.test(this._url.href) && (d = d.replace(/^\//, "")), W.lstat(d, (b, N) => {
                if (b) {
                  b.code === "ENOENT" && (b = new t.MissingPDFException(`Missing PDF "${d}".`)), this._storedError = b, this._headersCapability.reject(b);
                  return;
                }
                this._contentLength = N.size, this._setReadableStream(W.createReadStream(d)), this._headersCapability.resolve();
              });
            }
          }
          class u extends V {
            constructor(m, d, b) {
              super(m);
              let N = decodeURIComponent(this._url.path);
              X.test(this._url.href) && (N = N.replace(/^\//, "")), this._setReadableStream(W.createReadStream(N, {
                start: d,
                end: b - 1
              }));
            }
          }
        },
        /* 158 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.createResponseStatusError = p, c.extractFilenameFromHeader = h, c.validateRangeRequestCapabilities = y, c.validateResponseStatus = X;
          var t = i(1), Z = i(159), W = i(133);
          function y(M) {
            let {
              getResponseHeader: x,
              isHttp: n,
              rangeChunkSize: V,
              disableRange: S
            } = M;
            const o = {
              allowRangeRequests: !1,
              suggestedLength: void 0
            }, R = parseInt(x("Content-Length"), 10);
            return !Number.isInteger(R) || (o.suggestedLength = R, R <= 2 * V) || S || !n || x("Accept-Ranges") !== "bytes" || (x("Content-Encoding") || "identity") !== "identity" || (o.allowRangeRequests = !0), o;
          }
          function h(M) {
            const x = M("Content-Disposition");
            if (x) {
              let n = (0, Z.getFilenameFromContentDispositionHeader)(x);
              if (n.includes("%"))
                try {
                  n = decodeURIComponent(n);
                } catch {
                }
              if ((0, W.isPdfFile)(n))
                return n;
            }
            return null;
          }
          function p(M, x) {
            return M === 404 || M === 0 && x.startsWith("file:") ? new t.MissingPDFException('Missing PDF "' + x + '".') : new t.UnexpectedResponseException(`Unexpected server response (${M}) while retrieving PDF "${x}".`, M);
          }
          function X(M) {
            return M === 200 || M === 206;
          }
        },
        /* 159 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.getFilenameFromContentDispositionHeader = Z;
          var t = i(1);
          function Z(W) {
            let y = !0, h = p("filename\\*", "i").exec(W);
            if (h) {
              h = h[1];
              let o = n(h);
              return o = unescape(o), o = V(o), o = S(o), M(o);
            }
            if (h = x(W), h) {
              const o = S(h);
              return M(o);
            }
            if (h = p("filename", "i").exec(W), h) {
              h = h[1];
              let o = n(h);
              return o = S(o), M(o);
            }
            function p(o, R) {
              return new RegExp("(?:^|;)\\s*" + o + '\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)', R);
            }
            function X(o, R) {
              if (o) {
                if (!/^[\x00-\xFF]+$/.test(R))
                  return R;
                try {
                  const J = new TextDecoder(o, {
                    fatal: !0
                  }), u = (0, t.stringToBytes)(R);
                  R = J.decode(u), y = !1;
                } catch {
                }
              }
              return R;
            }
            function M(o) {
              return y && /[\x80-\xff]/.test(o) && (o = X("utf-8", o), y && (o = X("iso-8859-1", o))), o;
            }
            function x(o) {
              const R = [];
              let J;
              const u = p("filename\\*((?!0\\d)\\d+)(\\*?)", "ig");
              for (; (J = u.exec(o)) !== null; ) {
                let [, m, d, b] = J;
                if (m = parseInt(m, 10), m in R) {
                  if (m === 0)
                    break;
                  continue;
                }
                R[m] = [d, b];
              }
              const e = [];
              for (let m = 0; m < R.length && m in R; ++m) {
                let [d, b] = R[m];
                b = n(b), d && (b = unescape(b), m === 0 && (b = V(b))), e.push(b);
              }
              return e.join("");
            }
            function n(o) {
              if (o.startsWith('"')) {
                const R = o.slice(1).split('\\"');
                for (let J = 0; J < R.length; ++J) {
                  const u = R[J].indexOf('"');
                  u !== -1 && (R[J] = R[J].slice(0, u), R.length = J + 1), R[J] = R[J].replace(/\\(.)/g, "$1");
                }
                o = R.join('"');
              }
              return o;
            }
            function V(o) {
              const R = o.indexOf("'");
              if (R === -1)
                return o;
              const J = o.slice(0, R), e = o.slice(R + 1).replace(/^[^']*'/, "");
              return X(J, e);
            }
            function S(o) {
              return !o.startsWith("=?") || /[\x00-\x19\x80-\xff]/.test(o) ? o : o.replace(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g, function(R, J, u, e) {
                if (u === "q" || u === "Q")
                  return e = e.replace(/_/g, " "), e = e.replace(/=([0-9a-fA-F]{2})/g, function(m, d) {
                    return String.fromCharCode(parseInt(d, 16));
                  }), X(J, e);
                try {
                  e = atob(e);
                } catch {
                }
                return X(J, e);
              });
            }
            return "";
          }
        },
        /* 160 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.PDFNetworkStream = void 0;
          var t = i(1), Z = i(158);
          const W = 200, y = 206;
          function h(n) {
            const V = n.response;
            return typeof V != "string" ? V : (0, t.stringToBytes)(V).buffer;
          }
          class p {
            constructor(V) {
              let S = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
              this.url = V, this.isHttp = /^https?:/i.test(V), this.httpHeaders = this.isHttp && S.httpHeaders || /* @__PURE__ */ Object.create(null), this.withCredentials = S.withCredentials || !1, this.getXhr = S.getXhr || function() {
                return new XMLHttpRequest();
              }, this.currXhrId = 0, this.pendingRequests = /* @__PURE__ */ Object.create(null);
            }
            requestRange(V, S, o) {
              const R = {
                begin: V,
                end: S
              };
              for (const J in o)
                R[J] = o[J];
              return this.request(R);
            }
            requestFull(V) {
              return this.request(V);
            }
            request(V) {
              const S = this.getXhr(), o = this.currXhrId++, R = this.pendingRequests[o] = {
                xhr: S
              };
              S.open("GET", this.url), S.withCredentials = this.withCredentials;
              for (const J in this.httpHeaders) {
                const u = this.httpHeaders[J];
                typeof u > "u" || S.setRequestHeader(J, u);
              }
              return this.isHttp && "begin" in V && "end" in V ? (S.setRequestHeader("Range", `bytes=${V.begin}-${V.end - 1}`), R.expectedStatus = y) : R.expectedStatus = W, S.responseType = "arraybuffer", V.onError && (S.onerror = function(J) {
                V.onError(S.status);
              }), S.onreadystatechange = this.onStateChange.bind(this, o), S.onprogress = this.onProgress.bind(this, o), R.onHeadersReceived = V.onHeadersReceived, R.onDone = V.onDone, R.onError = V.onError, R.onProgress = V.onProgress, S.send(null), o;
            }
            onProgress(V, S) {
              var o;
              const R = this.pendingRequests[V];
              R && ((o = R.onProgress) === null || o === void 0 || o.call(R, S));
            }
            onStateChange(V, S) {
              const o = this.pendingRequests[V];
              if (!o)
                return;
              const R = o.xhr;
              if (R.readyState >= 2 && o.onHeadersReceived && (o.onHeadersReceived(), delete o.onHeadersReceived), R.readyState !== 4 || !(V in this.pendingRequests))
                return;
              if (delete this.pendingRequests[V], R.status === 0 && this.isHttp) {
                var J;
                (J = o.onError) === null || J === void 0 || J.call(o, R.status);
                return;
              }
              const u = R.status || W;
              if (!(u === W && o.expectedStatus === y) && u !== o.expectedStatus) {
                var m;
                (m = o.onError) === null || m === void 0 || m.call(o, R.status);
                return;
              }
              const d = h(R);
              if (u === y) {
                const N = R.getResponseHeader("Content-Range"), G = /bytes (\d+)-(\d+)\/(\d+)/.exec(N);
                o.onDone({
                  begin: parseInt(G[1], 10),
                  chunk: d
                });
              } else if (d)
                o.onDone({
                  begin: 0,
                  chunk: d
                });
              else {
                var b;
                (b = o.onError) === null || b === void 0 || b.call(o, R.status);
              }
            }
            getRequestXhr(V) {
              return this.pendingRequests[V].xhr;
            }
            isPendingRequest(V) {
              return V in this.pendingRequests;
            }
            abortRequest(V) {
              const S = this.pendingRequests[V].xhr;
              delete this.pendingRequests[V], S.abort();
            }
          }
          class X {
            constructor(V) {
              this._source = V, this._manager = new p(V.url, {
                httpHeaders: V.httpHeaders,
                withCredentials: V.withCredentials
              }), this._rangeChunkSize = V.rangeChunkSize, this._fullRequestReader = null, this._rangeRequestReaders = [];
            }
            _onRangeRequestReaderClosed(V) {
              const S = this._rangeRequestReaders.indexOf(V);
              S >= 0 && this._rangeRequestReaders.splice(S, 1);
            }
            getFullReader() {
              return (0, t.assert)(!this._fullRequestReader, "PDFNetworkStream.getFullReader can only be called once."), this._fullRequestReader = new M(this._manager, this._source), this._fullRequestReader;
            }
            getRangeReader(V, S) {
              const o = new x(this._manager, V, S);
              return o.onClosed = this._onRangeRequestReaderClosed.bind(this), this._rangeRequestReaders.push(o), o;
            }
            cancelAllRequests(V) {
              var S;
              (S = this._fullRequestReader) === null || S === void 0 || S.cancel(V);
              for (const o of this._rangeRequestReaders.slice(0))
                o.cancel(V);
            }
          }
          c.PDFNetworkStream = X;
          class M {
            constructor(V, S) {
              this._manager = V;
              const o = {
                onHeadersReceived: this._onHeadersReceived.bind(this),
                onDone: this._onDone.bind(this),
                onError: this._onError.bind(this),
                onProgress: this._onProgress.bind(this)
              };
              this._url = S.url, this._fullRequestId = V.requestFull(o), this._headersReceivedCapability = (0, t.createPromiseCapability)(), this._disableRange = S.disableRange || !1, this._contentLength = S.length, this._rangeChunkSize = S.rangeChunkSize, !this._rangeChunkSize && !this._disableRange && (this._disableRange = !0), this._isStreamingSupported = !1, this._isRangeSupported = !1, this._cachedChunks = [], this._requests = [], this._done = !1, this._storedError = void 0, this._filename = null, this.onProgress = null;
            }
            _onHeadersReceived() {
              const V = this._fullRequestId, S = this._manager.getRequestXhr(V), o = (u) => S.getResponseHeader(u), {
                allowRangeRequests: R,
                suggestedLength: J
              } = (0, Z.validateRangeRequestCapabilities)({
                getResponseHeader: o,
                isHttp: this._manager.isHttp,
                rangeChunkSize: this._rangeChunkSize,
                disableRange: this._disableRange
              });
              R && (this._isRangeSupported = !0), this._contentLength = J || this._contentLength, this._filename = (0, Z.extractFilenameFromHeader)(o), this._isRangeSupported && this._manager.abortRequest(V), this._headersReceivedCapability.resolve();
            }
            _onDone(V) {
              if (V && (this._requests.length > 0 ? this._requests.shift().resolve({
                value: V.chunk,
                done: !1
              }) : this._cachedChunks.push(V.chunk)), this._done = !0, !(this._cachedChunks.length > 0)) {
                for (const S of this._requests)
                  S.resolve({
                    value: void 0,
                    done: !0
                  });
                this._requests.length = 0;
              }
            }
            _onError(V) {
              this._storedError = (0, Z.createResponseStatusError)(V, this._url), this._headersReceivedCapability.reject(this._storedError);
              for (const S of this._requests)
                S.reject(this._storedError);
              this._requests.length = 0, this._cachedChunks.length = 0;
            }
            _onProgress(V) {
              var S;
              (S = this.onProgress) === null || S === void 0 || S.call(this, {
                loaded: V.loaded,
                total: V.lengthComputable ? V.total : this._contentLength
              });
            }
            get filename() {
              return this._filename;
            }
            get isRangeSupported() {
              return this._isRangeSupported;
            }
            get isStreamingSupported() {
              return this._isStreamingSupported;
            }
            get contentLength() {
              return this._contentLength;
            }
            get headersReady() {
              return this._headersReceivedCapability.promise;
            }
            async read() {
              if (this._storedError)
                throw this._storedError;
              if (this._cachedChunks.length > 0)
                return {
                  value: this._cachedChunks.shift(),
                  done: !1
                };
              if (this._done)
                return {
                  value: void 0,
                  done: !0
                };
              const V = (0, t.createPromiseCapability)();
              return this._requests.push(V), V.promise;
            }
            cancel(V) {
              this._done = !0, this._headersReceivedCapability.reject(V);
              for (const S of this._requests)
                S.resolve({
                  value: void 0,
                  done: !0
                });
              this._requests.length = 0, this._manager.isPendingRequest(this._fullRequestId) && this._manager.abortRequest(this._fullRequestId), this._fullRequestReader = null;
            }
          }
          class x {
            constructor(V, S, o) {
              this._manager = V;
              const R = {
                onDone: this._onDone.bind(this),
                onError: this._onError.bind(this),
                onProgress: this._onProgress.bind(this)
              };
              this._url = V.url, this._requestId = V.requestRange(S, o, R), this._requests = [], this._queuedChunk = null, this._done = !1, this._storedError = void 0, this.onProgress = null, this.onClosed = null;
            }
            _close() {
              var V;
              (V = this.onClosed) === null || V === void 0 || V.call(this, this);
            }
            _onDone(V) {
              const S = V.chunk;
              this._requests.length > 0 ? this._requests.shift().resolve({
                value: S,
                done: !1
              }) : this._queuedChunk = S, this._done = !0;
              for (const o of this._requests)
                o.resolve({
                  value: void 0,
                  done: !0
                });
              this._requests.length = 0, this._close();
            }
            _onError(V) {
              this._storedError = (0, Z.createResponseStatusError)(V, this._url);
              for (const S of this._requests)
                S.reject(this._storedError);
              this._requests.length = 0, this._queuedChunk = null;
            }
            _onProgress(V) {
              if (!this.isStreamingSupported) {
                var S;
                (S = this.onProgress) === null || S === void 0 || S.call(this, {
                  loaded: V.loaded
                });
              }
            }
            get isStreamingSupported() {
              return !1;
            }
            async read() {
              if (this._storedError)
                throw this._storedError;
              if (this._queuedChunk !== null) {
                const S = this._queuedChunk;
                return this._queuedChunk = null, {
                  value: S,
                  done: !1
                };
              }
              if (this._done)
                return {
                  value: void 0,
                  done: !0
                };
              const V = (0, t.createPromiseCapability)();
              return this._requests.push(V), V.promise;
            }
            cancel(V) {
              this._done = !0;
              for (const S of this._requests)
                S.resolve({
                  value: void 0,
                  done: !0
                });
              this._requests.length = 0, this._manager.isPendingRequest(this._requestId) && this._manager.abortRequest(this._requestId), this._close();
            }
          }
        },
        /* 161 */
        /***/
        (L, c, i) => {
          Object.defineProperty(c, "__esModule", {
            value: !0
          }), c.PDFFetchStream = void 0;
          var t = i(1), Z = i(158);
          function W(M, x, n) {
            return {
              method: "GET",
              headers: M,
              signal: n.signal,
              mode: "cors",
              credentials: x ? "include" : "same-origin",
              redirect: "follow"
            };
          }
          function y(M) {
            const x = new Headers();
            for (const n in M) {
              const V = M[n];
              typeof V > "u" || x.append(n, V);
            }
            return x;
          }
          class h {
            constructor(x) {
              this.source = x, this.isHttp = /^https?:/i.test(x.url), this.httpHeaders = this.isHttp && x.httpHeaders || {}, this._fullRequestReader = null, this._rangeRequestReaders = [];
            }
            get _progressiveDataLength() {
              var x, n;
              return (x = (n = this._fullRequestReader) === null || n === void 0 ? void 0 : n._loaded) !== null && x !== void 0 ? x : 0;
            }
            getFullReader() {
              return (0, t.assert)(!this._fullRequestReader, "PDFFetchStream.getFullReader can only be called once."), this._fullRequestReader = new p(this), this._fullRequestReader;
            }
            getRangeReader(x, n) {
              if (n <= this._progressiveDataLength)
                return null;
              const V = new X(this, x, n);
              return this._rangeRequestReaders.push(V), V;
            }
            cancelAllRequests(x) {
              this._fullRequestReader && this._fullRequestReader.cancel(x);
              for (const n of this._rangeRequestReaders.slice(0))
                n.cancel(x);
            }
          }
          c.PDFFetchStream = h;
          class p {
            constructor(x) {
              this._stream = x, this._reader = null, this._loaded = 0, this._filename = null;
              const n = x.source;
              this._withCredentials = n.withCredentials || !1, this._contentLength = n.length, this._headersCapability = (0, t.createPromiseCapability)(), this._disableRange = n.disableRange || !1, this._rangeChunkSize = n.rangeChunkSize, !this._rangeChunkSize && !this._disableRange && (this._disableRange = !0), this._abortController = new AbortController(), this._isStreamingSupported = !n.disableStream, this._isRangeSupported = !n.disableRange, this._headers = y(this._stream.httpHeaders);
              const V = n.url;
              fetch(V, W(this._headers, this._withCredentials, this._abortController)).then((S) => {
                if (!(0, Z.validateResponseStatus)(S.status))
                  throw (0, Z.createResponseStatusError)(S.status, V);
                this._reader = S.body.getReader(), this._headersCapability.resolve();
                const o = (u) => S.headers.get(u), {
                  allowRangeRequests: R,
                  suggestedLength: J
                } = (0, Z.validateRangeRequestCapabilities)({
                  getResponseHeader: o,
                  isHttp: this._stream.isHttp,
                  rangeChunkSize: this._rangeChunkSize,
                  disableRange: this._disableRange
                });
                this._isRangeSupported = R, this._contentLength = J || this._contentLength, this._filename = (0, Z.extractFilenameFromHeader)(o), !this._isStreamingSupported && this._isRangeSupported && this.cancel(new t.AbortException("Streaming is disabled."));
              }).catch(this._headersCapability.reject), this.onProgress = null;
            }
            get headersReady() {
              return this._headersCapability.promise;
            }
            get filename() {
              return this._filename;
            }
            get contentLength() {
              return this._contentLength;
            }
            get isRangeSupported() {
              return this._isRangeSupported;
            }
            get isStreamingSupported() {
              return this._isStreamingSupported;
            }
            async read() {
              await this._headersCapability.promise;
              const {
                value: x,
                done: n
              } = await this._reader.read();
              return n ? {
                value: x,
                done: n
              } : (this._loaded += x.byteLength, this.onProgress && this.onProgress({
                loaded: this._loaded,
                total: this._contentLength
              }), {
                value: new Uint8Array(x).buffer,
                done: !1
              });
            }
            cancel(x) {
              this._reader && this._reader.cancel(x), this._abortController.abort();
            }
          }
          class X {
            constructor(x, n, V) {
              this._stream = x, this._reader = null, this._loaded = 0;
              const S = x.source;
              this._withCredentials = S.withCredentials || !1, this._readCapability = (0, t.createPromiseCapability)(), this._isStreamingSupported = !S.disableStream, this._abortController = new AbortController(), this._headers = y(this._stream.httpHeaders), this._headers.append("Range", `bytes=${n}-${V - 1}`);
              const o = S.url;
              fetch(o, W(this._headers, this._withCredentials, this._abortController)).then((R) => {
                if (!(0, Z.validateResponseStatus)(R.status))
                  throw (0, Z.createResponseStatusError)(R.status, o);
                this._readCapability.resolve(), this._reader = R.body.getReader();
              }).catch(this._readCapability.reject), this.onProgress = null;
            }
            get isStreamingSupported() {
              return this._isStreamingSupported;
            }
            async read() {
              await this._readCapability.promise;
              const {
                value: x,
                done: n
              } = await this._reader.read();
              return n ? {
                value: x,
                done: n
              } : (this._loaded += x.byteLength, this.onProgress && this.onProgress({
                loaded: this._loaded
              }), {
                value: new Uint8Array(x).buffer,
                done: !1
              });
            }
            cancel(x) {
              this._reader && this._reader.cancel(x), this._abortController.abort();
            }
          }
        }
        /******/
      ], __webpack_module_cache__ = {};
      function __w_pdfjs_require__(L) {
        var c = __webpack_module_cache__[L];
        if (c !== void 0)
          return c.exports;
        var i = __webpack_module_cache__[L] = {
          /******/
          // no module.id needed
          /******/
          // no module.loaded needed
          /******/
          exports: {}
          /******/
        };
        return __webpack_modules__[L](i, i.exports, __w_pdfjs_require__), i.exports;
      }
      var __webpack_exports__ = {};
      return (() => {
        var L = __webpack_exports__;
        Object.defineProperty(L, "__esModule", {
          value: !0
        }), Object.defineProperty(L, "AnnotationEditorLayer", {
          enumerable: !0,
          get: function() {
            return Z.AnnotationEditorLayer;
          }
        }), Object.defineProperty(L, "AnnotationEditorParamsType", {
          enumerable: !0,
          get: function() {
            return c.AnnotationEditorParamsType;
          }
        }), Object.defineProperty(L, "AnnotationEditorType", {
          enumerable: !0,
          get: function() {
            return c.AnnotationEditorType;
          }
        }), Object.defineProperty(L, "AnnotationEditorUIManager", {
          enumerable: !0,
          get: function() {
            return W.AnnotationEditorUIManager;
          }
        }), Object.defineProperty(L, "AnnotationLayer", {
          enumerable: !0,
          get: function() {
            return y.AnnotationLayer;
          }
        }), Object.defineProperty(L, "AnnotationMode", {
          enumerable: !0,
          get: function() {
            return c.AnnotationMode;
          }
        }), Object.defineProperty(L, "CMapCompressionType", {
          enumerable: !0,
          get: function() {
            return c.CMapCompressionType;
          }
        }), Object.defineProperty(L, "GlobalWorkerOptions", {
          enumerable: !0,
          get: function() {
            return h.GlobalWorkerOptions;
          }
        }), Object.defineProperty(L, "InvalidPDFException", {
          enumerable: !0,
          get: function() {
            return c.InvalidPDFException;
          }
        }), Object.defineProperty(L, "LoopbackPort", {
          enumerable: !0,
          get: function() {
            return i.LoopbackPort;
          }
        }), Object.defineProperty(L, "MissingPDFException", {
          enumerable: !0,
          get: function() {
            return c.MissingPDFException;
          }
        }), Object.defineProperty(L, "OPS", {
          enumerable: !0,
          get: function() {
            return c.OPS;
          }
        }), Object.defineProperty(L, "PDFDataRangeTransport", {
          enumerable: !0,
          get: function() {
            return i.PDFDataRangeTransport;
          }
        }), Object.defineProperty(L, "PDFDateString", {
          enumerable: !0,
          get: function() {
            return t.PDFDateString;
          }
        }), Object.defineProperty(L, "PDFWorker", {
          enumerable: !0,
          get: function() {
            return i.PDFWorker;
          }
        }), Object.defineProperty(L, "PasswordResponses", {
          enumerable: !0,
          get: function() {
            return c.PasswordResponses;
          }
        }), Object.defineProperty(L, "PermissionFlag", {
          enumerable: !0,
          get: function() {
            return c.PermissionFlag;
          }
        }), Object.defineProperty(L, "PixelsPerInch", {
          enumerable: !0,
          get: function() {
            return t.PixelsPerInch;
          }
        }), Object.defineProperty(L, "RenderingCancelledException", {
          enumerable: !0,
          get: function() {
            return t.RenderingCancelledException;
          }
        }), Object.defineProperty(L, "SVGGraphics", {
          enumerable: !0,
          get: function() {
            return M.SVGGraphics;
          }
        }), Object.defineProperty(L, "UNSUPPORTED_FEATURES", {
          enumerable: !0,
          get: function() {
            return c.UNSUPPORTED_FEATURES;
          }
        }), Object.defineProperty(L, "UnexpectedResponseException", {
          enumerable: !0,
          get: function() {
            return c.UnexpectedResponseException;
          }
        }), Object.defineProperty(L, "Util", {
          enumerable: !0,
          get: function() {
            return c.Util;
          }
        }), Object.defineProperty(L, "VerbosityLevel", {
          enumerable: !0,
          get: function() {
            return c.VerbosityLevel;
          }
        }), Object.defineProperty(L, "XfaLayer", {
          enumerable: !0,
          get: function() {
            return x.XfaLayer;
          }
        }), Object.defineProperty(L, "build", {
          enumerable: !0,
          get: function() {
            return i.build;
          }
        }), Object.defineProperty(L, "createPromiseCapability", {
          enumerable: !0,
          get: function() {
            return c.createPromiseCapability;
          }
        }), Object.defineProperty(L, "createValidAbsoluteUrl", {
          enumerable: !0,
          get: function() {
            return c.createValidAbsoluteUrl;
          }
        }), Object.defineProperty(L, "getDocument", {
          enumerable: !0,
          get: function() {
            return i.getDocument;
          }
        }), Object.defineProperty(L, "getFilenameFromUrl", {
          enumerable: !0,
          get: function() {
            return t.getFilenameFromUrl;
          }
        }), Object.defineProperty(L, "getPdfFilenameFromUrl", {
          enumerable: !0,
          get: function() {
            return t.getPdfFilenameFromUrl;
          }
        }), Object.defineProperty(L, "getXfaPageViewport", {
          enumerable: !0,
          get: function() {
            return t.getXfaPageViewport;
          }
        }), Object.defineProperty(L, "isPdfFile", {
          enumerable: !0,
          get: function() {
            return t.isPdfFile;
          }
        }), Object.defineProperty(L, "loadScript", {
          enumerable: !0,
          get: function() {
            return t.loadScript;
          }
        }), Object.defineProperty(L, "renderTextLayer", {
          enumerable: !0,
          get: function() {
            return X.renderTextLayer;
          }
        }), Object.defineProperty(L, "shadow", {
          enumerable: !0,
          get: function() {
            return c.shadow;
          }
        }), Object.defineProperty(L, "version", {
          enumerable: !0,
          get: function() {
            return i.version;
          }
        });
        var c = __w_pdfjs_require__(1), i = __w_pdfjs_require__(129), t = __w_pdfjs_require__(133), Z = __w_pdfjs_require__(147), W = __w_pdfjs_require__(132), y = __w_pdfjs_require__(152), h = __w_pdfjs_require__(140), p = __w_pdfjs_require__(3), X = __w_pdfjs_require__(155), M = __w_pdfjs_require__(156), x = __w_pdfjs_require__(154);
        if (p.isNodeJS) {
          const {
            PDFNodeStream: n
          } = __w_pdfjs_require__(157);
          (0, i.setPDFNetworkStreamFactory)((V) => new n(V));
        } else {
          const {
            PDFNetworkStream: n
          } = __w_pdfjs_require__(160), {
            PDFFetchStream: V
          } = __w_pdfjs_require__(161);
          (0, i.setPDFNetworkStreamFactory)((S) => (0, t.isValidFetchUrl)(S.url) ? new V(S) : new n(S));
        }
      })(), __webpack_exports__;
    })()
  ));
})(pdf);
var pdfExports = pdf.exports;
const workerSrc = "data:text/javascript;base64,", initializePdfjs = () => {
  pdfExports.GlobalWorkerOptions.workerSrc = workerSrc;
}, readAsPDF = async (L, c = "string") => {
  let i;
  if (c === "string" && typeof L == "string") {
    const W = atob(L), y = new Uint8Array(W.length);
    for (let h = 0; h < W.length; h++)
      y[h] = W.charCodeAt(h);
    i = y.buffer;
  } else if (L instanceof File)
    i = await L.arrayBuffer();
  else
    throw new Error("Invalid input type for readAsPDF");
  const { PDFDocument: t } = await import("pdf-lib");
  return await t.load(i);
}, downloadPDF = (L, c) => {
  download(L, c, "application/pdf");
}, getPDFDocument = async (L) => {
  const c = await L.save();
  return pdfExports.getDocument({ data: c }).promise;
};
function ggID() {
  let L = 0;
  return function() {
    return L++;
  };
}
async function save(L, c, i, t = !1) {
  const Z = await L.arrayBuffer(), W = await PDFDocument.load(Z);
  try {
    const p = W.getForm();
    p.getFields().forEach((X) => {
      p.removeField(X);
    });
  } catch (p) {
    console.warn("No AcroForm found or already removed:", p);
  }
  const y = W.getPages();
  for (let p = 0; p < y.length; p++) {
    const X = y[p], M = X.getHeight(), x = c[p] || [];
    for (const n of x)
      if (n.type === "drawing") {
        const {
          x: V,
          y: S,
          path: o,
          originWidth: R,
          originHeight: J,
          width: u,
          height: e
        } = n, m = u / R, d = e / J, b = Math.min(m, d), N = R * b, G = V + (u - N) / 2;
        X.drawSvgPath(o, {
          x: G,
          y: M - S,
          // align bottom of signature to Vue's top position
          scale: b,
          borderWidth: 5,
          borderColor: rgb(0, 0, 0),
          borderLineCap: LineCapStyle.Round
        });
      }
  }
  const h = await W.save();
  return t && downloadPDF(h, i), await W.saveAsBase64();
}
const _sfc_main = {
  name: "DrawSignPdf",
  components: {
    PDFPage,
    DrawingCanvas,
    DrawingSignature,
    DialogBox,
    MagnifyingGlassMinusIcon: render$1,
    MagnifyingGlassPlusIcon: render
  },
  props: {
    pdfData: String,
    signatureData: Array,
    isDownload: {
      type: Boolean,
      default: !1
    },
    finish: Function,
    translations: {
      type: Object,
      default: () => ({})
    },
    enableZoom: {
      type: Boolean,
      default: !1
    }
  },
  emits: ["finish", "onPDFRendered"],
  setup(L, { emit: c }) {
    const i = ggID(), t = ref(null), Z = ref(""), W = ref([]), y = ref([]), h = ref([]), p = ref("Times-Roman"), X = ref(null), M = ref(-1), x = ref(!1), n = ref(!1), V = ref(""), S = ref({
      data: "",
      type: "application/pdf"
    }), o = ref(!1), R = ref("warning"), J = ref(1), u = 0.25, e = 0.5, m = 3, d = ref([]), b = computed(() => ({ ...{
      updateSign: "Update Signature",
      save: "Save",
      saving: "Saving",
      drawLabel: "Draw the signature here",
      drawDone: "Done",
      drawCancel: "Cancel",
      confirmBoxTitle: "Confirm Saving",
      confirmBoxDesc: "Are you sure you want to save the signed document?",
      confirmBoxClose: "Close",
      confirmBoxSaveChanges: "Save Changes",
      warningTitle: "Missing Signature",
      warningDesc: "The required signature is missing. Please sign to continue",
      warningClose: "Close",
      pdfLoading: "PDF will load here",
      additionalTextField: ""
    }, ...L.translations })), N = async () => {
      try {
        if (initializePdfjs(), !L.pdfData) return;
        M.value = 0, await r(L.pdfData, "string"), D(), document.addEventListener("keydown", al);
      } catch (Q) {
        console.error("onMounted error:", Q);
      }
    }, G = async (Q) => {
      const w = (Q.target.files || Q.dataTransfer && Q.dataTransfer.files)[0];
      if (!(!w || w.type !== "application/pdf")) {
        M.value = -1;
        try {
          await r(w, "arrayBuffer"), M.value = 0;
        } catch {
        }
      }
    }, r = async (Q, T) => {
      const w = await readAsPDF(Q, T), g = await getPDFDocument(w), K = [];
      for (let a = 1; a <= g.numPages; a++) {
        const Y = await g.getPage(a);
        K.push(markRaw(Y));
      }
      if (W.value = K, h.value = Array(g.numPages).fill([]), y.value = Array(g.numPages).fill({ scale: 1 }), d.value = Array(g.numPages).fill(!1), T === "string") {
        const a = atob(Q), Y = new Uint8Array(a.length);
        for (let C = 0; C < a.length; C++)
          Y[C] = a.charCodeAt(C);
        const z = new Blob([Y], { type: "application/pdf" });
        t.value = new File([z], "document.pdf", {
          type: "application/pdf"
        }), Z.value = "document.pdf";
      }
    }, j = async (Q) => {
      V.value = Q.signatureImageData, await f(Q.originWidth, Q.originHeight, Q.path), n.value = !1;
    }, D = () => {
      M.value >= 0 && (n.value = !0);
    }, f = (Q, T, w) => {
      var g;
      h.value = Array(h.value.length).fill([]), (g = L.signatureData) == null || g.forEach((K) => {
        const a = i(), Y = H(K.width), z = H(K.height), C = Y / Q, F = z / T, v = Math.min(C, F), $ = {
          id: a,
          path: w,
          type: "drawing",
          x: H(K.left),
          y: H(K.top),
          originWidth: Q,
          originHeight: T,
          width: Y,
          height: z,
          scale: v
        }, il = K.page - 1;
        h.value[il] && (h.value[il] = [
          ...h.value[il],
          $
        ]);
      });
    }, P = (Q) => {
      M.value = Q;
    }, B = (Q, T) => {
      h.value = h.value.map(
        (w, g) => g == M.value ? w.map(
          (K) => K.id === Q ? { ...K, ...T } : K
        ) : w
      );
    }, A = (Q, T) => {
      y.value[T] = Q;
    }, H = (Q) => Q * 72 / 2.54, O = async () => {
      if (!(!t.value || x.value || !W.value.length)) {
        x.value = !0;
        try {
          const Q = await save(
            t.value,
            h.value,
            Z.value,
            L.isDownload
          );
          S.value = { type: "application/pdf", data: Q }, c("finish", {
            signedDocument: S.value,
            signatureImage: V.value
          });
        } catch (Q) {
          console.error("Error saving PDF:", Q);
        } finally {
          x.value = !1;
        }
      }
    }, U = () => {
      R.value = V.value !== "" ? "confirm" : "warning", o.value = !0, document.body.classList.add("overflow-y-hidden");
    }, k = () => {
      o.value = !1, document.body.classList.remove("overflow-y-hidden");
    }, q = () => {
      O(), k();
    }, al = (Q) => {
      (Q.key === "Escape" || Q.key === "Esc") && k();
    }, Ml = (Q) => {
      J.value = Q === "in" ? Math.min(J.value + u, m) : Math.max(J.value - u, e);
    }, wl = (Q) => {
      d.value[Q] = !0, d.value.every(Boolean) && c("onPDFRendered");
    };
    return onMounted(N), onBeforeUnmount(() => {
      document.removeEventListener("keydown", al);
    }), {
      getTranslation: b,
      genID: i,
      pdfFile: t,
      pdfName: Z,
      pages: W,
      pagesScale: y,
      allObjects: h,
      currentFont: p,
      focusId: X,
      selectedPageIndex: M,
      saving: x,
      addingDrawing: n,
      isOpenConfirm: o,
      onUploadPDF: G,
      addPDF: r,
      onAddDrawing: D,
      addDrawing: f,
      selectPage: P,
      updateObject: B,
      onMeasure: A,
      savePDF: O,
      onFinishDrawing: j,
      openModal: U,
      closeModal: k,
      confirmSave: q,
      isConfirmOrWarning: R,
      zoomScale: J,
      zoomPDF: Ml,
      pageRenderStatus: d,
      renderFinished: wl
    };
  }
}, _hoisted_1 = {
  key: 0,
  id: "modelConfirm",
  class: "fixed inset-0 z-50 h-full w-full overflow-y-auto bg-gray-900 bg-opacity-60 px-4"
}, _hoisted_2 = { class: "flex min-h-screen flex-col items-center bg-gray-100 py-5" }, _hoisted_3 = {
  key: 0,
  class: "left-0 right-0 top-0 z-10 flex items-center justify-center flex-col gap-2 py-2 bg-gray-100 sticky w-full"
}, _hoisted_4 = {
  key: 0,
  class: "mt-2 flex gap-2"
}, _hoisted_5 = {
  key: 1,
  class: "sign-drawing-canvas fixed left-0 right-0 top-0 z-10 items-center justify-center border-b border-gray-300 bg-white shadow-lg",
  style: { height: "200px", "z-index": "60", width: "100%" },
  "data-cy": "sign-drawing-canvas"
}, _hoisted_6 = {
  key: 0,
  class: "bg-gray-100 border-b border-gray-300 shadow-lg p-2 flex justify-center gap-2"
}, _hoisted_7 = {
  key: 2,
  class: "w-full"
}, _hoisted_8 = ["onMousedown", "onTouchstart", "data-cy"], _hoisted_9 = {
  key: 3,
  class: "flex w-full flex-grow items-center justify-center"
}, _hoisted_10 = { class: "text-3xl font-bold text-gray-500" };
function _sfc_render(L, c, i, t, Z, W) {
  const y = resolveComponent("DialogBox"), h = resolveComponent("MagnifyingGlassMinusIcon"), p = resolveComponent("MagnifyingGlassPlusIcon"), X = resolveComponent("DrawingCanvas"), M = resolveComponent("PDFPage"), x = resolveComponent("DrawingSignature");
  return openBlock(), createElementBlock(Fragment, null, [
    t.isOpenConfirm ? (openBlock(), createElementBlock("div", _hoisted_1, [
      createVNode(y, {
        translations: t.getTranslation,
        type: t.isConfirmOrWarning,
        onCancel: t.closeModal,
        onFinish: t.confirmSave
      }, null, 8, ["translations", "type", "onCancel", "onFinish"])
    ])) : createCommentVNode("", !0),
    createElementVNode("div", null, [
      createElementVNode("main", _hoisted_2, [
        t.addingDrawing ? createCommentVNode("", !0) : (openBlock(), createElementBlock("div", _hoisted_3, [
          createElementVNode("button", {
            onClick: c[0] || (c[0] = (...n) => t.onAddDrawing && t.onAddDrawing(...n)),
            class: "btn-positive ml-3 mr-3 rounded bg-blue-500 px-3 py-1 font-bold text-white hover:bg-blue-700 md:mr-4 md:px-4",
            "data-cy": "update-sign"
          }, toDisplayString(t.getTranslation.updateSign), 1),
          createElementVNode("button", {
            onClick: c[1] || (c[1] = (...n) => t.openModal && t.openModal(...n)),
            class: normalizeClass(["btn-positive mr-3 rounded bg-blue-500 px-3 py-1 font-bold text-white hover:bg-blue-700 md:mr-4 md:px-4", {
              "cursor-not-allowed": t.pages.length === 0 || t.saving,
              "bg-blue-700": t.pages.length === 0 || t.saving
            }]),
            "data-cy": "save-sign"
          }, toDisplayString(t.saving ? t.getTranslation.saving : t.getTranslation.save), 3),
          i.enableZoom ? (openBlock(), createElementBlock("div", _hoisted_4, [
            createElementVNode("button", {
              onClick: c[2] || (c[2] = (n) => t.zoomPDF("out")),
              class: "w-6",
              "data-cy": "pdf-zoom-out"
            }, [
              createVNode(h)
            ]),
            createElementVNode("button", {
              onClick: c[3] || (c[3] = (n) => t.zoomPDF("in")),
              class: "w-6",
              "data-cy": "pdf-zoom-in"
            }, [
              createVNode(p)
            ])
          ])) : createCommentVNode("", !0)
        ])),
        t.addingDrawing ? (openBlock(), createElementBlock("div", _hoisted_5, [
          createVNode(X, {
            onFinish: t.onFinishDrawing,
            onCancel: c[4] || (c[4] = (n) => t.addingDrawing = !1),
            translations: t.getTranslation
          }, null, 8, ["onFinish", "translations"]),
          i.enableZoom ? (openBlock(), createElementBlock("div", _hoisted_6, [
            createElementVNode("button", {
              onClick: c[5] || (c[5] = (n) => t.zoomPDF("out")),
              class: "w-6",
              "data-cy": "pdf-zoom-out-toolbar"
            }, [
              createVNode(h)
            ]),
            createElementVNode("button", {
              onClick: c[6] || (c[6] = (n) => t.zoomPDF("in")),
              class: "w-6",
              "data-cy": "pdf-zoom-in-toolbar"
            }, [
              createVNode(p)
            ])
          ])) : createCommentVNode("", !0)
        ])) : createCommentVNode("", !0),
        t.pages.length ? (openBlock(), createElementBlock("div", _hoisted_7, [
          (openBlock(!0), createElementBlock(Fragment, null, renderList(t.pages, (n, V) => (openBlock(), createElementBlock("div", {
            key: V + t.zoomScale,
            class: "flex w-full flex-col items-center overflow-hidden p-5",
            onMousedown: (S) => t.selectPage(V),
            onTouchstart: (S) => t.selectPage(V),
            "data-cy": "page-" + V
          }, [
            createElementVNode("div", {
              class: normalizeClass(["relative shadow-lg", { "shadow-outline": V === t.selectedPageIndex }])
            }, [
              createVNode(M, {
                onMeasure: (S) => t.onMeasure(S, V),
                page: n,
                zoomScale: t.zoomScale,
                onFinishedRendering: () => t.renderFinished(V)
              }, null, 8, ["onMeasure", "page", "zoomScale", "onFinishedRendering"]),
              createElementVNode("div", {
                class: "absolute left-0 top-0 origin-top-left transform",
                style: normalizeStyle({
                  transform: `scale(${t.pagesScale[V].scale})`,
                  touchAction: "none"
                })
              }, [
                (openBlock(!0), createElementBlock(Fragment, null, renderList(t.allObjects[V], (S) => {
                  var o;
                  return openBlock(), createElementBlock("div", {
                    key: S.id
                  }, [
                    S.type === "drawing" ? (openBlock(), createBlock(x, {
                      key: 0,
                      onUpdate: (R) => t.updateObject(S.id, R),
                      path: S.path,
                      x: S.x,
                      y: S.y,
                      width: S.width,
                      height: S.height,
                      originWidth: S.originWidth,
                      originHeight: S.originHeight,
                      pageScale: (o = t.pagesScale[V]) == null ? void 0 : o.scale,
                      "data-cy": "sign-pos-" + S.id,
                      zoomScale: t.zoomScale
                    }, null, 8, ["onUpdate", "path", "x", "y", "width", "height", "originWidth", "originHeight", "pageScale", "data-cy", "zoomScale"])) : createCommentVNode("", !0)
                  ]);
                }), 128))
              ], 4)
            ], 2)
          ], 40, _hoisted_8))), 128))
        ])) : (openBlock(), createElementBlock("div", _hoisted_9, [
          createElementVNode("span", _hoisted_10, toDisplayString(t.getTranslation.pdfLoading), 1)
        ]))
      ])
    ])
  ], 64);
}
const DrawSignPdf = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__scopeId", "data-v-ab11e8e4"]]);
initializePdfjs();
const install = (L) => {
  L.component(DrawSignPdf.name || "DrawSignPdf", DrawSignPdf);
};
DrawSignPdf.install = install;
export {
  DrawSignPdf,
  DrawSignPdf as default
};
